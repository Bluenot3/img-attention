var ch={},qm={"./node_modules/onnxruntime-web/dist/ort-wasm-simd-threaded.jsep.wasm":(Ae,F,r)=>{Ae.exports=r.p+"ort-wasm-simd-threaded.jsep.wasm"},"?2ce3":()=>{},"?7a2c":()=>{},"?a42a":()=>{},"?2b25":()=>{},"?569f":()=>{},"?3f59":()=>{},"?154a":()=>{},"./node_modules/@huggingface/jinja/dist/index.js":(Ae,F,r)=>{r.r(F),r.d(F,{Environment:()=>Qe,Interpreter:()=>ot,Template:()=>dt,parse:()=>Z,tokenize:()=>T});var w=Object.freeze({Text:"Text",NumericLiteral:"NumericLiteral",BooleanLiteral:"BooleanLiteral",NullLiteral:"NullLiteral",StringLiteral:"StringLiteral",Identifier:"Identifier",Equals:"Equals",OpenParen:"OpenParen",CloseParen:"CloseParen",OpenStatement:"OpenStatement",CloseStatement:"CloseStatement",OpenExpression:"OpenExpression",CloseExpression:"CloseExpression",OpenSquareBracket:"OpenSquareBracket",CloseSquareBracket:"CloseSquareBracket",OpenCurlyBracket:"OpenCurlyBracket",CloseCurlyBracket:"CloseCurlyBracket",Comma:"Comma",Dot:"Dot",Colon:"Colon",Pipe:"Pipe",CallOperator:"CallOperator",AdditiveBinaryOperator:"AdditiveBinaryOperator",MultiplicativeBinaryOperator:"MultiplicativeBinaryOperator",ComparisonBinaryOperator:"ComparisonBinaryOperator",UnaryOperator:"UnaryOperator",Set:"Set",If:"If",For:"For",In:"In",Is:"Is",NotIn:"NotIn",Else:"Else",EndIf:"EndIf",ElseIf:"ElseIf",EndFor:"EndFor",And:"And",Or:"Or",Not:"UnaryOperator",Macro:"Macro",EndMacro:"EndMacro"}),D=Object.freeze({set:w.Set,for:w.For,in:w.In,is:w.Is,if:w.If,else:w.Else,endif:w.EndIf,elif:w.ElseIf,endfor:w.EndFor,and:w.And,or:w.Or,not:w.Not,"not in":w.NotIn,macro:w.Macro,endmacro:w.EndMacro,true:w.BooleanLiteral,false:w.BooleanLiteral,none:w.NullLiteral,True:w.BooleanLiteral,False:w.BooleanLiteral,None:w.NullLiteral}),W=class{constructor(A,oe){this.value=A,this.type=oe}};function te(A){return/\w/.test(A)}function j(A){return/[0-9]/.test(A)}var y=[["{%",w.OpenStatement],["%}",w.CloseStatement],["{{",w.OpenExpression],["}}",w.CloseExpression],["(",w.OpenParen],[")",w.CloseParen],["{",w.OpenCurlyBracket],["}",w.CloseCurlyBracket],["[",w.OpenSquareBracket],["]",w.CloseSquareBracket],[",",w.Comma],[".",w.Dot],[":",w.Colon],["|",w.Pipe],["<=",w.ComparisonBinaryOperator],[">=",w.ComparisonBinaryOperator],["==",w.ComparisonBinaryOperator],["!=",w.ComparisonBinaryOperator],["<",w.ComparisonBinaryOperator],[">",w.ComparisonBinaryOperator],["+",w.AdditiveBinaryOperator],["-",w.AdditiveBinaryOperator],["*",w.MultiplicativeBinaryOperator],["/",w.MultiplicativeBinaryOperator],["%",w.MultiplicativeBinaryOperator],["=",w.Equals]],P=new Map([["n",`
`],["t","	"],["r","\r"],["b","\b"],["f","\f"],["v","\v"],["'","'"],['"','"'],["\\","\\"]]);function v(A,oe={}){return A.endsWith(`
`)&&(A=A.slice(0,-1)),A=A.replace(/{#.*?#}/gs,"{##}"),oe.lstrip_blocks&&(A=A.replace(/^[ \t]*({[#%])/gm,"$1")),oe.trim_blocks&&(A=A.replace(/([#%]})\n/g,"$1")),A.replace(/{##}/g,"").replace(/-%}\s*/g,"%}").replace(/\s*{%-/g,"{%").replace(/-}}\s*/g,"}}").replace(/\s*{{-/g,"{{")}function T(A,oe={}){const q=[],_e=v(A,oe);let Se=0;const He=et=>{let it="";for(;et(_e[Se]);){if(_e[Se]==="\\"){if(++Se,Se>=_e.length)throw new SyntaxError("Unexpected end of input");const ct=_e[Se++],vt=P.get(ct);if(vt===void 0)throw new SyntaxError(`Unexpected escaped character: ${ct}`);it+=vt;continue}if(it+=_e[Se++],Se>=_e.length)throw new SyntaxError("Unexpected end of input")}return it};e:for(;Se<_e.length;){const et=q.at(-1)?.type;if(et===void 0||et===w.CloseStatement||et===w.CloseExpression){let ct="";for(;Se<_e.length&&!(_e[Se]==="{"&&(_e[Se+1]==="%"||_e[Se+1]==="{"));)ct+=_e[Se++];if(ct.length>0){q.push(new W(ct,w.Text));continue}}He(ct=>/\s/.test(ct));const it=_e[Se];if(it==="-"||it==="+"){const ct=q.at(-1)?.type;if(ct===w.Text||ct===void 0)throw new SyntaxError(`Unexpected character: ${it}`);switch(ct){case w.Identifier:case w.NumericLiteral:case w.BooleanLiteral:case w.NullLiteral:case w.StringLiteral:case w.CloseParen:case w.CloseSquareBracket:break;default:{++Se;const vt=He(j);q.push(new W(`${it}${vt}`,vt.length>0?w.NumericLiteral:w.UnaryOperator));continue}}}for(const[ct,vt]of y)if(_e.slice(Se,Se+ct.length)===ct){q.push(new W(ct,vt)),Se+=ct.length;continue e}if(it==="'"||it==='"'){++Se;const ct=He(vt=>vt!==it);q.push(new W(ct,w.StringLiteral)),++Se;continue}if(j(it)){const ct=He(j);q.push(new W(ct,w.NumericLiteral));continue}if(te(it)){const ct=He(te),vt=Object.hasOwn(D,ct)?D[ct]:w.Identifier;vt===w.In&&q.at(-1)?.type===w.Not?(q.pop(),q.push(new W("not in",w.NotIn))):q.push(new W(ct,vt));continue}throw new SyntaxError(`Unexpected character: ${it}`)}return q}var b=class{type="Statement"},z=class extends b{constructor(A){super(),this.body=A}type="Program"},K=class extends b{constructor(A,oe,q){super(),this.test=A,this.body=oe,this.alternate=q}type="If"},re=class extends b{constructor(A,oe,q,_e){super(),this.loopvar=A,this.iterable=oe,this.body=q,this.defaultBlock=_e}type="For"},ae=class extends b{constructor(A,oe){super(),this.assignee=A,this.value=oe}type="Set"},B=class extends b{constructor(A,oe,q){super(),this.name=A,this.args=oe,this.body=q}type="Macro"},G=class extends b{type="Expression"},X=class extends G{constructor(A,oe,q){super(),this.object=A,this.property=oe,this.computed=q}type="MemberExpression"},I=class extends G{constructor(A,oe){super(),this.callee=A,this.args=oe}type="CallExpression"},$=class extends G{constructor(A){super(),this.value=A}type="Identifier"},g=class extends G{constructor(A){super(),this.value=A}type="Literal"},C=class extends g{type="NumericLiteral"},x=class extends g{type="StringLiteral"},J=class extends g{type="BooleanLiteral"},Q=class extends g{type="NullLiteral"},le=class extends g{type="ArrayLiteral"},ue=class extends g{type="TupleLiteral"},fe=class extends g{type="ObjectLiteral"},Pe=class extends G{constructor(A,oe,q){super(),this.operator=A,this.left=oe,this.right=q}type="BinaryExpression"},ve=class extends G{constructor(A,oe){super(),this.operand=A,this.filter=oe}type="FilterExpression"},Fe=class extends G{constructor(A,oe){super(),this.iterable=A,this.test=oe}type="SelectExpression"},Ge=class extends G{constructor(A,oe,q){super(),this.operand=A,this.negate=oe,this.test=q}type="TestExpression"},Re=class extends G{constructor(A,oe){super(),this.operator=A,this.argument=oe}type="UnaryExpression"},ut=class extends G{constructor(A=void 0,oe=void 0,q=void 0){super(),this.start=A,this.stop=oe,this.step=q}type="SliceExpression"},de=class extends G{constructor(A,oe){super(),this.key=A,this.value=oe}type="KeywordArgumentExpression"};function Z(A){const oe=new z([]);let q=0;function _e(nt,pt){const St=A[q++];if(!St||St.type!==nt)throw new Error(`Parser Error: ${pt}. ${St.type} !== ${nt}.`);return St}function Se(){switch(A[q].type){case w.Text:return it();case w.OpenStatement:return ct();case w.OpenExpression:return vt();default:throw new SyntaxError(`Unexpected token type: ${A[q].type}`)}}function He(...nt){return q+nt.length<=A.length&&nt.some((pt,St)=>pt!==A[q+St].type)}function et(...nt){return q+nt.length<=A.length&&nt.every((pt,St)=>pt===A[q+St].type)}function it(){return new x(_e(w.Text,"Expected text token").value)}function ct(){_e(w.OpenStatement,"Expected opening statement token");let nt;switch(A[q].type){case w.Set:++q,nt=Yt(),_e(w.CloseStatement,"Expected closing statement token");break;case w.If:++q,nt=ts(),_e(w.OpenStatement,"Expected {% token"),_e(w.EndIf,"Expected endif token"),_e(w.CloseStatement,"Expected %} token");break;case w.Macro:++q,nt=xs(),_e(w.OpenStatement,"Expected {% token"),_e(w.EndMacro,"Expected endmacro token"),_e(w.CloseStatement,"Expected %} token");break;case w.For:++q,nt=Ps(),_e(w.OpenStatement,"Expected {% token"),_e(w.EndFor,"Expected endfor token"),_e(w.CloseStatement,"Expected %} token");break;default:throw new SyntaxError(`Unknown statement type: ${A[q].type}`)}return nt}function vt(){_e(w.OpenExpression,"Expected opening expression token");const nt=Ss();return _e(w.CloseExpression,"Expected closing expression token"),nt}function Yt(){const nt=Ss();if(et(w.Equals)){++q;const pt=Yt();return new ae(nt,pt)}return nt}function ts(){const nt=Ss();_e(w.CloseStatement,"Expected closing statement token");const pt=[],St=[];for(;!(A[q]?.type===w.OpenStatement&&(A[q+1]?.type===w.ElseIf||A[q+1]?.type===w.Else||A[q+1]?.type===w.EndIf));)pt.push(Se());if(A[q]?.type===w.OpenStatement&&A[q+1]?.type!==w.EndIf)if(++q,et(w.ElseIf))_e(w.ElseIf,"Expected elseif token"),St.push(ts());else for(_e(w.Else,"Expected else token"),_e(w.CloseStatement,"Expected closing statement token");!(A[q]?.type===w.OpenStatement&&A[q+1]?.type===w.EndIf);)St.push(Se());return new K(nt,pt,St)}function xs(){const nt=nr();if(nt.type!=="Identifier")throw new SyntaxError("Expected identifier following macro statement");const pt=Or();_e(w.CloseStatement,"Expected closing statement token");const St=[];for(;He(w.OpenStatement,w.EndMacro);)St.push(Se());return new B(nt,pt,St)}function ms(nt=!1){const pt=nt?nr:Ss,St=[pt()],ds=et(w.Comma);for(;ds&&(++q,St.push(pt()),!!et(w.Comma)););return ds?new ue(St):St[0]}function Ps(){const nt=ms(!0);if(!(nt instanceof $||nt instanceof ue))throw new SyntaxError(`Expected identifier/tuple for the loop variable, got ${nt.type} instead`);_e(w.In,"Expected `in` keyword following loop variable");const pt=Ss();_e(w.CloseStatement,"Expected closing statement token");const St=[];for(;He(w.OpenStatement,w.EndFor)&&He(w.OpenStatement,w.Else);)St.push(Se());const ds=[];if(et(w.OpenStatement,w.Else))for(++q,++q,_e(w.CloseStatement,"Expected closing statement token");He(w.OpenStatement,w.EndFor);)ds.push(Se());return new re(nt,pt,St,ds)}function Ss(){return Hs()}function Hs(){const nt=sr();if(et(w.If)){++q;const pt=sr();if(et(w.Else)){++q;const St=sr();return new K(pt,[nt],[St])}else return new Fe(nt,pt)}return nt}function sr(){let nt=Ur();for(;et(w.Or);){const pt=A[q];++q;const St=Ur();nt=new Pe(pt,nt,St)}return nt}function Ur(){let nt=Fr();for(;et(w.And);){const pt=A[q];++q;const St=Fr();nt=new Pe(pt,nt,St)}return nt}function Fr(){let nt;for(;et(w.Not);){const pt=A[q];++q;const St=Fr();nt=new Re(pt,St)}return nt??wr()}function wr(){let nt=Bt();for(;et(w.ComparisonBinaryOperator)||et(w.In)||et(w.NotIn);){const pt=A[q];++q;const St=Bt();nt=new Pe(pt,nt,St)}return nt}function Bt(){let nt=cr();for(;et(w.AdditiveBinaryOperator);){const pt=A[q];++q;const St=cr();nt=new Pe(pt,nt,St)}return nt}function Vr(){const nt=Pr();return et(w.OpenParen)?Tr(nt):nt}function Tr(nt){let pt=new I(nt,Or());return et(w.OpenParen)&&(pt=Tr(pt)),pt}function Or(){_e(w.OpenParen,"Expected opening parenthesis for arguments list");const nt=xr();return _e(w.CloseParen,"Expected closing parenthesis for arguments list"),nt}function xr(){const nt=[];for(;!et(w.CloseParen);){let pt=Ss();if(et(w.Equals)){if(++q,!(pt instanceof $))throw new SyntaxError("Expected identifier for keyword argument");const St=Ss();pt=new de(pt,St)}nt.push(pt),et(w.Comma)&&++q}return nt}function rr(){const nt=[];let pt=!1;for(;!et(w.CloseSquareBracket);)et(w.Colon)?(nt.push(void 0),++q,pt=!0):(nt.push(Ss()),et(w.Colon)&&(++q,pt=!0));if(nt.length===0)throw new SyntaxError("Expected at least one argument for member/slice expression");if(pt){if(nt.length>3)throw new SyntaxError("Expected 0-3 arguments for slice expression");return new ut(...nt)}return nt[0]}function Pr(){let nt=nr();for(;et(w.Dot)||et(w.OpenSquareBracket);){const pt=A[q];++q;let St;const ds=pt.type!==w.Dot;if(ds)St=rr(),_e(w.CloseSquareBracket,"Expected closing square bracket");else if(St=nr(),St.type!=="Identifier")throw new SyntaxError("Expected identifier following dot operator");nt=new X(nt,St,ds)}return nt}function cr(){let nt=Er();for(;et(w.MultiplicativeBinaryOperator);){const pt=A[q];++q;const St=Er();nt=new Pe(pt,nt,St)}return nt}function Er(){let nt=Gr();for(;et(w.Is);){++q;const pt=et(w.Not);pt&&++q;let St=nr();if(St instanceof J?St=new $(St.value.toString()):St instanceof Q&&(St=new $("none")),!(St instanceof $))throw new SyntaxError("Expected identifier for the test");nt=new Ge(nt,pt,St)}return nt}function Gr(){let nt=Vr();for(;et(w.Pipe);){++q;let pt=nr();if(!(pt instanceof $))throw new SyntaxError("Expected identifier for the filter");et(w.OpenParen)&&(pt=Tr(pt)),nt=new ve(nt,pt)}return nt}function nr(){const nt=A[q];switch(nt.type){case w.NumericLiteral:return++q,new C(Number(nt.value));case w.StringLiteral:return++q,new x(nt.value);case w.BooleanLiteral:return++q,new J(nt.value.toLowerCase()==="true");case w.NullLiteral:return++q,new Q(null);case w.Identifier:return++q,new $(nt.value);case w.OpenParen:{++q;const pt=ms();if(A[q].type!==w.CloseParen)throw new SyntaxError(`Expected closing parenthesis, got ${A[q].type} instead`);return++q,pt}case w.OpenSquareBracket:{++q;const pt=[];for(;!et(w.CloseSquareBracket);)pt.push(Ss()),et(w.Comma)&&++q;return++q,new le(pt)}case w.OpenCurlyBracket:{++q;const pt=new Map;for(;!et(w.CloseCurlyBracket);){const St=Ss();_e(w.Colon,"Expected colon between key and value in object literal");const ds=Ss();pt.set(St,ds),et(w.Comma)&&++q}return++q,new fe(pt)}default:throw new SyntaxError(`Unexpected token: ${nt.type}`)}}for(;q<A.length;)oe.body.push(Se());return oe}function he(A,oe,q=1){oe===void 0&&(oe=A,A=0);const _e=[];for(let Se=A;Se<oe;Se+=q)_e.push(Se);return _e}function be(A,oe,q,_e=1){const Se=Math.sign(_e);Se>=0?(oe=(oe??=0)<0?Math.max(A.length+oe,0):Math.min(oe,A.length),q=(q??=A.length)<0?Math.max(A.length+q,0):Math.min(q,A.length)):(oe=(oe??=A.length-1)<0?Math.max(A.length+oe,-1):Math.min(oe,A.length-1),q=(q??=-1)<-1?Math.max(A.length+q,-1):Math.min(q,A.length-1));const He=[];for(let et=oe;Se*et<Se*q;et+=_e)He.push(A[et]);return He}function De(A){return A.replace(/\b\w/g,oe=>oe.toUpperCase())}var Ze=class{type="RuntimeValue";value;builtins=new Map;constructor(A=void 0){this.value=A}__bool__(){return new Xe(!!this.value)}},Ke=class extends Ze{type="NumericValue"},ne=class extends Ze{type="StringValue";builtins=new Map([["upper",new Ne(()=>new ne(this.value.toUpperCase()))],["lower",new Ne(()=>new ne(this.value.toLowerCase()))],["strip",new Ne(()=>new ne(this.value.trim()))],["title",new Ne(()=>new ne(De(this.value)))],["length",new Ke(this.value.length)],["rstrip",new Ne(()=>new ne(this.value.trimEnd()))],["lstrip",new Ne(()=>new ne(this.value.trimStart()))]])},Xe=class extends Ze{type="BooleanValue"},$e=class extends Ze{type="ObjectValue";__bool__(){return new Xe(this.value.size>0)}builtins=new Map([["get",new Ne(([A,oe])=>{if(!(A instanceof ne))throw new Error(`Object key must be a string: got ${A.type}`);return this.value.get(A.value)??oe??new Ve})],["items",new Ne(()=>new Me(Array.from(this.value.entries()).map(([A,oe])=>new Me([new ne(A),oe]))))]])},ie=class extends $e{type="KeywordArgumentsValue"},Me=class extends Ze{type="ArrayValue";builtins=new Map([["length",new Ke(this.value.length)]]);__bool__(){return new Xe(this.value.length>0)}},je=class extends Me{type="TupleValue"},Ne=class extends Ze{type="FunctionValue"},Ve=class extends Ze{type="NullValue"},Be=class extends Ze{type="UndefinedValue"},Qe=class{constructor(A){this.parent=A}variables=new Map([["namespace",new Ne(A=>{if(A.length===0)return new $e(new Map);if(A.length!==1||!(A[0]instanceof $e))throw new Error("`namespace` expects either zero arguments or a single object argument");return A[0]})]]);tests=new Map([["boolean",A=>A.type==="BooleanValue"],["callable",A=>A instanceof Ne],["odd",A=>{if(A.type!=="NumericValue")throw new Error(`Cannot apply test "odd" to type: ${A.type}`);return A.value%2!==0}],["even",A=>{if(A.type!=="NumericValue")throw new Error(`Cannot apply test "even" to type: ${A.type}`);return A.value%2===0}],["false",A=>A.type==="BooleanValue"&&!A.value],["true",A=>A.type==="BooleanValue"&&A.value],["none",A=>A.type==="NullValue"],["string",A=>A.type==="StringValue"],["number",A=>A.type==="NumericValue"],["integer",A=>A.type==="NumericValue"&&Number.isInteger(A.value)],["iterable",A=>A.type==="ArrayValue"||A.type==="StringValue"],["mapping",A=>A.type==="ObjectValue"],["lower",A=>{const oe=A.value;return A.type==="StringValue"&&oe===oe.toLowerCase()}],["upper",A=>{const oe=A.value;return A.type==="StringValue"&&oe===oe.toUpperCase()}],["none",A=>A.type==="NullValue"],["defined",A=>A.type!=="UndefinedValue"],["undefined",A=>A.type==="UndefinedValue"],["equalto",(A,oe)=>A.value===oe.value],["eq",(A,oe)=>A.value===oe.value]]);set(A,oe){return this.declareVariable(A,gt(oe))}declareVariable(A,oe){if(this.variables.has(A))throw new SyntaxError(`Variable already declared: ${A}`);return this.variables.set(A,oe),oe}setVariable(A,oe){return this.variables.set(A,oe),oe}resolve(A){if(this.variables.has(A))return this;if(this.parent)return this.parent.resolve(A);throw new Error(`Unknown variable: ${A}`)}lookupVariable(A){try{return this.resolve(A).variables.get(A)??new Be}catch{return new Be}}},ot=class{global;constructor(A){this.global=A??new Qe}run(A){return this.evaluate(A,this.global)}evaluateBinaryExpression(A,oe){const q=this.evaluate(A.left,oe);switch(A.operator.value){case"and":return q.__bool__().value?this.evaluate(A.right,oe):q;case"or":return q.__bool__().value?q:this.evaluate(A.right,oe)}const _e=this.evaluate(A.right,oe);switch(A.operator.value){case"==":return new Xe(q.value==_e.value);case"!=":return new Xe(q.value!=_e.value)}if(q instanceof Be||_e instanceof Be)throw new Error("Cannot perform operation on undefined values");if(q instanceof Ve||_e instanceof Ve)throw new Error("Cannot perform operation on null values");if(q instanceof Ke&&_e instanceof Ke)switch(A.operator.value){case"+":return new Ke(q.value+_e.value);case"-":return new Ke(q.value-_e.value);case"*":return new Ke(q.value*_e.value);case"/":return new Ke(q.value/_e.value);case"%":return new Ke(q.value%_e.value);case"<":return new Xe(q.value<_e.value);case">":return new Xe(q.value>_e.value);case">=":return new Xe(q.value>=_e.value);case"<=":return new Xe(q.value<=_e.value)}else if(q instanceof Me&&_e instanceof Me)switch(A.operator.value){case"+":return new Me(q.value.concat(_e.value))}else if(_e instanceof Me){const Se=_e.value.find(He=>He.value===q.value)!==void 0;switch(A.operator.value){case"in":return new Xe(Se);case"not in":return new Xe(!Se)}}if(q instanceof ne||_e instanceof ne)switch(A.operator.value){case"+":return new ne(q.value.toString()+_e.value.toString())}if(q instanceof ne&&_e instanceof ne)switch(A.operator.value){case"in":return new Xe(_e.value.includes(q.value));case"not in":return new Xe(!_e.value.includes(q.value))}if(q instanceof ne&&_e instanceof $e)switch(A.operator.value){case"in":return new Xe(_e.value.has(q.value));case"not in":return new Xe(!_e.value.has(q.value))}throw new SyntaxError(`Unknown operator "${A.operator.value}" between ${q.type} and ${_e.type}`)}evaluateArguments(A,oe){const q=[],_e=new Map;for(const Se of A)if(Se.type==="KeywordArgumentExpression"){const He=Se;_e.set(He.key.value,this.evaluate(He.value,oe))}else{if(_e.size>0)throw new Error("Positional arguments must come before keyword arguments");q.push(this.evaluate(Se,oe))}return[q,_e]}evaluateFilterExpression(A,oe){const q=this.evaluate(A.operand,oe);if(A.filter.type==="Identifier"){const _e=A.filter;if(_e.value==="tojson")return new ne(lt(q));if(q instanceof Me)switch(_e.value){case"list":return q;case"first":return q.value[0];case"last":return q.value[q.value.length-1];case"length":return new Ke(q.value.length);case"reverse":return new Me(q.value.reverse());case"sort":return new Me(q.value.sort((Se,He)=>{if(Se.type!==He.type)throw new Error(`Cannot compare different types: ${Se.type} and ${He.type}`);switch(Se.type){case"NumericValue":return Se.value-He.value;case"StringValue":return Se.value.localeCompare(He.value);default:throw new Error(`Cannot compare type: ${Se.type}`)}}));default:throw new Error(`Unknown ArrayValue filter: ${_e.value}`)}else if(q instanceof ne)switch(_e.value){case"length":return new Ke(q.value.length);case"upper":return new ne(q.value.toUpperCase());case"lower":return new ne(q.value.toLowerCase());case"title":return new ne(De(q.value));case"capitalize":return new ne(q.value.charAt(0).toUpperCase()+q.value.slice(1));case"trim":return new ne(q.value.trim());case"indent":return new ne(q.value.split(`
`).map((Se,He)=>He===0||Se.length===0?Se:"    "+Se).join(`
`));case"string":return q;default:throw new Error(`Unknown StringValue filter: ${_e.value}`)}else if(q instanceof Ke)switch(_e.value){case"abs":return new Ke(Math.abs(q.value));default:throw new Error(`Unknown NumericValue filter: ${_e.value}`)}else if(q instanceof $e)switch(_e.value){case"items":return new Me(Array.from(q.value.entries()).map(([Se,He])=>new Me([new ne(Se),He])));case"length":return new Ke(q.value.size);default:throw new Error(`Unknown ObjectValue filter: ${_e.value}`)}throw new Error(`Cannot apply filter "${_e.value}" to type: ${q.type}`)}else if(A.filter.type==="CallExpression"){const _e=A.filter;if(_e.callee.type!=="Identifier")throw new Error(`Unknown filter: ${_e.callee.type}`);const Se=_e.callee.value;if(Se==="tojson"){const[,He]=this.evaluateArguments(_e.args,oe),et=He.get("indent")??new Ve;if(!(et instanceof Ke||et instanceof Ve))throw new Error("If set, indent must be a number");return new ne(lt(q,et.value))}if(q instanceof Me){switch(Se){case"selectattr":case"rejectattr":{const He=Se==="selectattr";if(q.value.some(ts=>!(ts instanceof $e)))throw new Error(`\`${Se}\` can only be applied to array of objects`);if(_e.args.some(ts=>ts.type!=="StringLiteral"))throw new Error(`arguments of \`${Se}\` must be strings`);const[et,it,ct]=_e.args.map(ts=>this.evaluate(ts,oe));let vt;if(it){const ts=oe.tests.get(it.value);if(!ts)throw new Error(`Unknown test: ${it.value}`);vt=ts}else vt=(...ts)=>ts[0].__bool__().value;const Yt=q.value.filter(ts=>{const xs=ts.value.get(et.value),ms=xs?vt(xs,ct):!1;return He?ms:!ms});return new Me(Yt)}case"map":{const[,He]=this.evaluateArguments(_e.args,oe);if(He.has("attribute")){const et=He.get("attribute");if(!(et instanceof ne))throw new Error("attribute must be a string");const it=He.get("default"),ct=q.value.map(vt=>{if(!(vt instanceof $e))throw new Error("items in map must be an object");return vt.value.get(et.value)??it??new Be});return new Me(ct)}else throw new Error("`map` expressions without `attribute` set are not currently supported.")}}throw new Error(`Unknown ArrayValue filter: ${Se}`)}else if(q instanceof ne){switch(Se){case"indent":{const[He,et]=this.evaluateArguments(_e.args,oe),it=He.at(0)??et.get("width")??new Ke(4);if(!(it instanceof Ke))throw new Error("width must be a number");const ct=He.at(1)??et.get("first")??new Xe(!1),vt=He.at(2)??et.get("blank")??new Xe(!1),Yt=q.value.split(`
`),ts=" ".repeat(it.value),xs=Yt.map((ms,Ps)=>!ct.value&&Ps===0||!vt.value&&ms.length===0?ms:ts+ms);return new ne(xs.join(`
`))}}throw new Error(`Unknown StringValue filter: ${Se}`)}else throw new Error(`Cannot apply filter "${Se}" to type: ${q.type}`)}throw new Error(`Unknown filter: ${A.filter.type}`)}evaluateTestExpression(A,oe){const q=this.evaluate(A.operand,oe),_e=oe.tests.get(A.test.value);if(!_e)throw new Error(`Unknown test: ${A.test.value}`);const Se=_e(q);return new Xe(A.negate?!Se:Se)}evaluateUnaryExpression(A,oe){const q=this.evaluate(A.argument,oe);switch(A.operator.value){case"not":return new Xe(!q.value);default:throw new SyntaxError(`Unknown operator: ${A.operator.value}`)}}evalProgram(A,oe){return this.evaluateBlock(A.body,oe)}evaluateBlock(A,oe){let q="";for(const _e of A){const Se=this.evaluate(_e,oe);Se.type!=="NullValue"&&Se.type!=="UndefinedValue"&&(q+=Se.value)}return new ne(q)}evaluateIdentifier(A,oe){return oe.lookupVariable(A.value)}evaluateCallExpression(A,oe){const[q,_e]=this.evaluateArguments(A.args,oe);_e.size>0&&q.push(new ie(_e));const Se=this.evaluate(A.callee,oe);if(Se.type!=="FunctionValue")throw new Error(`Cannot call something that is not a function: got ${Se.type}`);return Se.value(q,oe)}evaluateSliceExpression(A,oe,q){if(!(A instanceof Me||A instanceof ne))throw new Error("Slice object must be an array or string");const _e=this.evaluate(oe.start,q),Se=this.evaluate(oe.stop,q),He=this.evaluate(oe.step,q);if(!(_e instanceof Ke||_e instanceof Be))throw new Error("Slice start must be numeric or undefined");if(!(Se instanceof Ke||Se instanceof Be))throw new Error("Slice stop must be numeric or undefined");if(!(He instanceof Ke||He instanceof Be))throw new Error("Slice step must be numeric or undefined");return A instanceof Me?new Me(be(A.value,_e.value,Se.value,He.value)):new ne(be(Array.from(A.value),_e.value,Se.value,He.value).join(""))}evaluateMemberExpression(A,oe){const q=this.evaluate(A.object,oe);let _e;if(A.computed){if(A.property.type==="SliceExpression")return this.evaluateSliceExpression(q,A.property,oe);_e=this.evaluate(A.property,oe)}else _e=new ne(A.property.value);let Se;if(q instanceof $e){if(!(_e instanceof ne))throw new Error(`Cannot access property with non-string: got ${_e.type}`);Se=q.value.get(_e.value)??q.builtins.get(_e.value)}else if(q instanceof Me||q instanceof ne)if(_e instanceof Ke)Se=q.value.at(_e.value),q instanceof ne&&(Se=new ne(q.value.at(_e.value)));else if(_e instanceof ne)Se=q.builtins.get(_e.value);else throw new Error(`Cannot access property with non-string/non-number: got ${_e.type}`);else{if(!(_e instanceof ne))throw new Error(`Cannot access property with non-string: got ${_e.type}`);Se=q.builtins.get(_e.value)}return Se instanceof Ze?Se:new Be}evaluateSet(A,oe){const q=this.evaluate(A.value,oe);if(A.assignee.type==="Identifier"){const _e=A.assignee.value;oe.setVariable(_e,q)}else if(A.assignee.type==="MemberExpression"){const _e=A.assignee,Se=this.evaluate(_e.object,oe);if(!(Se instanceof $e))throw new Error("Cannot assign to member of non-object");if(_e.property.type!=="Identifier")throw new Error("Cannot assign to member with non-identifier property");Se.value.set(_e.property.value,q)}else throw new Error(`Invalid LHS inside assignment expression: ${JSON.stringify(A.assignee)}`);return new Ve}evaluateIf(A,oe){const q=this.evaluate(A.test,oe);return this.evaluateBlock(q.__bool__().value?A.body:A.alternate,oe)}evaluateFor(A,oe){const q=new Qe(oe);let _e,Se;if(A.iterable.type==="SelectExpression"){const vt=A.iterable;Se=this.evaluate(vt.iterable,q),_e=vt.test}else Se=this.evaluate(A.iterable,q);if(!(Se instanceof Me))throw new Error(`Expected iterable type in for loop: got ${Se.type}`);const He=[],et=[];for(let vt=0;vt<Se.value.length;++vt){const Yt=new Qe(q),ts=Se.value[vt];let xs;if(A.loopvar.type==="Identifier")xs=ms=>ms.setVariable(A.loopvar.value,ts);else if(A.loopvar.type==="TupleLiteral"){const ms=A.loopvar;if(ts.type!=="ArrayValue")throw new Error(`Cannot unpack non-iterable type: ${ts.type}`);const Ps=ts;if(ms.value.length!==Ps.value.length)throw new Error(`Too ${ms.value.length>Ps.value.length?"few":"many"} items to unpack`);xs=Ss=>{for(let Hs=0;Hs<ms.value.length;++Hs){if(ms.value[Hs].type!=="Identifier")throw new Error(`Cannot unpack non-identifier type: ${ms.value[Hs].type}`);Ss.setVariable(ms.value[Hs].value,Ps.value[Hs])}}}else throw new Error(`Invalid loop variable(s): ${A.loopvar.type}`);_e&&(xs(Yt),!this.evaluate(_e,Yt).__bool__().value)||(He.push(ts),et.push(xs))}let it="",ct=!0;for(let vt=0;vt<He.length;++vt){const Yt=new Map([["index",new Ke(vt+1)],["index0",new Ke(vt)],["revindex",new Ke(He.length-vt)],["revindex0",new Ke(He.length-vt-1)],["first",new Xe(vt===0)],["last",new Xe(vt===He.length-1)],["length",new Ke(He.length)],["previtem",vt>0?He[vt-1]:new Be],["nextitem",vt<He.length-1?He[vt+1]:new Be]]);q.setVariable("loop",new $e(Yt)),et[vt](q);const ts=this.evaluateBlock(A.body,q);it+=ts.value,ct=!1}if(ct){const vt=this.evaluateBlock(A.defaultBlock,q);it+=vt.value}return new ne(it)}evaluateMacro(A,oe){return oe.setVariable(A.name.value,new Ne((q,_e)=>{const Se=new Qe(_e);q=q.slice();let He;q.at(-1)?.type==="KeywordArgumentsValue"&&(He=q.pop());for(let et=0;et<A.args.length;++et){const it=A.args[et],ct=q[et];if(it.type==="Identifier"){const vt=it;if(!ct)throw new Error(`Missing positional argument: ${vt.value}`);Se.setVariable(vt.value,ct)}else if(it.type==="KeywordArgumentExpression"){const vt=it,Yt=ct??He?.value.get(vt.key.value)??this.evaluate(vt.value,Se);Se.setVariable(vt.key.value,Yt)}else throw new Error(`Unknown argument type: ${it.type}`)}return this.evaluateBlock(A.body,Se)})),new Ve}evaluate(A,oe){if(A===void 0)return new Be;switch(A.type){case"Program":return this.evalProgram(A,oe);case"Set":return this.evaluateSet(A,oe);case"If":return this.evaluateIf(A,oe);case"For":return this.evaluateFor(A,oe);case"Macro":return this.evaluateMacro(A,oe);case"NumericLiteral":return new Ke(Number(A.value));case"StringLiteral":return new ne(A.value);case"BooleanLiteral":return new Xe(A.value);case"NullLiteral":return new Ve(A.value);case"ArrayLiteral":return new Me(A.value.map(q=>this.evaluate(q,oe)));case"TupleLiteral":return new je(A.value.map(q=>this.evaluate(q,oe)));case"ObjectLiteral":{const q=new Map;for(const[_e,Se]of A.value){const He=this.evaluate(_e,oe);if(!(He instanceof ne))throw new Error(`Object keys must be strings: got ${He.type}`);q.set(He.value,this.evaluate(Se,oe))}return new $e(q)}case"Identifier":return this.evaluateIdentifier(A,oe);case"CallExpression":return this.evaluateCallExpression(A,oe);case"MemberExpression":return this.evaluateMemberExpression(A,oe);case"UnaryExpression":return this.evaluateUnaryExpression(A,oe);case"BinaryExpression":return this.evaluateBinaryExpression(A,oe);case"FilterExpression":return this.evaluateFilterExpression(A,oe);case"TestExpression":return this.evaluateTestExpression(A,oe);default:throw new SyntaxError(`Unknown node type: ${A.type}`)}}};function gt(A){switch(typeof A){case"number":return new Ke(A);case"string":return new ne(A);case"boolean":return new Xe(A);case"undefined":return new Be;case"object":return A===null?new Ve:Array.isArray(A)?new Me(A.map(gt)):new $e(new Map(Object.entries(A).map(([oe,q])=>[oe,gt(q)])));case"function":return new Ne((oe,q)=>{const _e=A(...oe.map(Se=>Se.value))??null;return gt(_e)});default:throw new Error(`Cannot convert to runtime value: ${A}`)}}function lt(A,oe,q){const _e=q??0;switch(A.type){case"NullValue":case"UndefinedValue":return"null";case"NumericValue":case"StringValue":case"BooleanValue":return JSON.stringify(A.value);case"ArrayValue":case"ObjectValue":{const Se=oe?" ".repeat(oe):"",He=`
`+Se.repeat(_e),et=He+Se;if(A.type==="ArrayValue"){const it=A.value.map(ct=>lt(ct,oe,_e+1));return oe?`[${et}${it.join(`,${et}`)}${He}]`:`[${it.join(", ")}]`}else{const it=Array.from(A.value.entries()).map(([ct,vt])=>{const Yt=`"${ct}": ${lt(vt,oe,_e+1)}`;return oe?`${et}${Yt}`:Yt});return oe?`{${it.join(",")}${He}}`:`{${it.join(", ")}}`}}default:throw new Error(`Cannot convert to JSON: ${A.type}`)}}var dt=class{parsed;constructor(A){const oe=T(A,{lstrip_blocks:!0,trim_blocks:!0});this.parsed=Z(oe)}render(A){const oe=new Qe;oe.set("false",!1),oe.set("true",!0),oe.set("raise_exception",Se=>{throw new Error(Se)}),oe.set("range",he);for(const[Se,He]of Object.entries(A))oe.set(Se,He);return new ot(oe).run(this.parsed).value}}},"./node_modules/onnxruntime-common/dist/esm/backend-impl.js":(Ae,F,r)=>{r.r(F),r.d(F,{registerBackend:()=>W,resolveBackendAndExecutionProviders:()=>j});const w=new Map,D=[],W=(y,P,v)=>{if(P&&typeof P.init=="function"&&typeof P.createInferenceSessionHandler=="function"){const T=w.get(y);if(T===void 0)w.set(y,{backend:P,priority:v});else{if(T.priority>v)return;if(T.priority===v&&T.backend!==P)throw new Error(`cannot register backend "${y}" using priority ${v}`)}if(v>=0){const b=D.indexOf(y);b!==-1&&D.splice(b,1);for(let z=0;z<D.length;z++)if(w.get(D[z]).priority<=v){D.splice(z,0,y);return}D.push(y)}return}throw new TypeError("not a valid backend")},te=async y=>{const P=w.get(y);if(!P)return"backend not found.";if(P.initialized)return P.backend;if(P.aborted)return P.error;{const v=!!P.initPromise;try{return v||(P.initPromise=P.backend.init(y)),await P.initPromise,P.initialized=!0,P.backend}catch(T){return v||(P.error=`${T}`,P.aborted=!0),P.error}finally{delete P.initPromise}}},j=async y=>{const P=y.executionProviders||[],v=P.map(ae=>typeof ae=="string"?ae:ae.name),T=v.length===0?D:v;let b;const z=[],K=new Set;for(const ae of T){const B=await te(ae);typeof B=="string"?z.push({name:ae,err:B}):(b||(b=B),b===B&&K.add(ae))}if(!b)throw new Error(`no available backend found. ERR: ${z.map(ae=>`[${ae.name}] ${ae.err}`).join(", ")}`);for(const{name:ae,err:B}of z)v.includes(ae)&&console.warn(`removing requested execution provider "${ae}" from session options because it is not available: ${B}`);const re=P.filter(ae=>K.has(typeof ae=="string"?ae:ae.name));return[b,new Proxy(y,{get:(ae,B)=>B==="executionProviders"?re:Reflect.get(ae,B)})]}},"./node_modules/onnxruntime-common/dist/esm/backend.js":(Ae,F,r)=>{r.r(F),r.d(F,{registerBackend:()=>w.registerBackend});var w=r("./node_modules/onnxruntime-common/dist/esm/backend-impl.js")},"./node_modules/onnxruntime-common/dist/esm/env-impl.js":(Ae,F,r)=>{r.r(F),r.d(F,{env:()=>W});var w=r("./node_modules/onnxruntime-common/dist/esm/version.js");let D="warning";const W={wasm:{},webgl:{},webgpu:{},versions:{common:w.version},set logLevel(te){if(te!==void 0){if(typeof te!="string"||["verbose","info","warning","error","fatal"].indexOf(te)===-1)throw new Error(`Unsupported logging level: ${te}`);D=te}},get logLevel(){return D}};Object.defineProperty(W,"logLevel",{enumerable:!0})},"./node_modules/onnxruntime-common/dist/esm/env.js":(Ae,F,r)=>{r.r(F),r.d(F,{env:()=>D});var w=r("./node_modules/onnxruntime-common/dist/esm/env-impl.js");const D=w.env},"./node_modules/onnxruntime-common/dist/esm/index.js":(Ae,F,r)=>{r.r(F),r.d(F,{InferenceSession:()=>W.InferenceSession,TRACE:()=>j.TRACE,TRACE_FUNC_BEGIN:()=>j.TRACE_FUNC_BEGIN,TRACE_FUNC_END:()=>j.TRACE_FUNC_END,Tensor:()=>te.Tensor,TrainingSession:()=>y.TrainingSession,env:()=>D.env,registerBackend:()=>w.registerBackend});var w=r("./node_modules/onnxruntime-common/dist/esm/backend.js"),D=r("./node_modules/onnxruntime-common/dist/esm/env.js"),W=r("./node_modules/onnxruntime-common/dist/esm/inference-session.js"),te=r("./node_modules/onnxruntime-common/dist/esm/tensor.js");r("./node_modules/onnxruntime-common/dist/esm/tensor-conversion.js"),r("./node_modules/onnxruntime-common/dist/esm/tensor-factory.js");var j=r("./node_modules/onnxruntime-common/dist/esm/trace.js");r("./node_modules/onnxruntime-common/dist/esm/onnx-model.js"),r("./node_modules/onnxruntime-common/dist/esm/onnx-value.js");var y=r("./node_modules/onnxruntime-common/dist/esm/training-session.js")},"./node_modules/onnxruntime-common/dist/esm/inference-session-impl.js":(Ae,F,r)=>{r.r(F),r.d(F,{InferenceSession:()=>te});var w=r("./node_modules/onnxruntime-common/dist/esm/backend-impl.js"),D=r("./node_modules/onnxruntime-common/dist/esm/tensor.js"),W=r("./node_modules/onnxruntime-common/dist/esm/trace.js");class te{constructor(y){this.handler=y}async run(y,P,v){(0,W.TRACE_FUNC_BEGIN)();const T={};let b={};if(typeof y!="object"||y===null||y instanceof D.Tensor||Array.isArray(y))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let z=!0;if(typeof P=="object"){if(P===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(P instanceof D.Tensor)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(P)){if(P.length===0)throw new TypeError("'fetches' cannot be an empty array.");z=!1;for(const ae of P){if(typeof ae!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(ae)===-1)throw new RangeError(`'fetches' contains invalid output name: ${ae}.`);T[ae]=null}if(typeof v=="object"&&v!==null)b=v;else if(typeof v<"u")throw new TypeError("'options' must be an object.")}else{let ae=!1;const B=Object.getOwnPropertyNames(P);for(const G of this.outputNames)if(B.indexOf(G)!==-1){const X=P[G];(X===null||X instanceof D.Tensor)&&(ae=!0,z=!1,T[G]=X)}if(ae){if(typeof v=="object"&&v!==null)b=v;else if(typeof v<"u")throw new TypeError("'options' must be an object.")}else b=P}}else if(typeof P<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const ae of this.inputNames)if(typeof y[ae]>"u")throw new Error(`input '${ae}' is missing in 'feeds'.`);if(z)for(const ae of this.outputNames)T[ae]=null;const K=await this.handler.run(y,T,b),re={};for(const ae in K)if(Object.hasOwnProperty.call(K,ae)){const B=K[ae];B instanceof D.Tensor?re[ae]=B:re[ae]=new D.Tensor(B.type,B.data,B.dims)}return(0,W.TRACE_FUNC_END)(),re}async release(){return this.handler.dispose()}static async create(y,P,v,T){(0,W.TRACE_FUNC_BEGIN)();let b,z={};if(typeof y=="string"){if(b=y,typeof P=="object"&&P!==null)z=P;else if(typeof P<"u")throw new TypeError("'options' must be an object.")}else if(y instanceof Uint8Array){if(b=y,typeof P=="object"&&P!==null)z=P;else if(typeof P<"u")throw new TypeError("'options' must be an object.")}else if(y instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&y instanceof SharedArrayBuffer){const B=y;let G=0,X=y.byteLength;if(typeof P=="object"&&P!==null)z=P;else if(typeof P=="number"){if(G=P,!Number.isSafeInteger(G))throw new RangeError("'byteOffset' must be an integer.");if(G<0||G>=B.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${B.byteLength}).`);if(X=y.byteLength-G,typeof v=="number"){if(X=v,!Number.isSafeInteger(X))throw new RangeError("'byteLength' must be an integer.");if(X<=0||G+X>B.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${B.byteLength-G}].`);if(typeof T=="object"&&T!==null)z=T;else if(typeof T<"u")throw new TypeError("'options' must be an object.")}else if(typeof v<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof P<"u")throw new TypeError("'options' must be an object.");b=new Uint8Array(B,G,X)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");const[K,re]=await(0,w.resolveBackendAndExecutionProviders)(z),ae=await K.createInferenceSessionHandler(b,re);return(0,W.TRACE_FUNC_END)(),new te(ae)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}},"./node_modules/onnxruntime-common/dist/esm/inference-session.js":(Ae,F,r)=>{r.r(F),r.d(F,{InferenceSession:()=>D});var w=r("./node_modules/onnxruntime-common/dist/esm/inference-session-impl.js");const D=w.InferenceSession},"./node_modules/onnxruntime-common/dist/esm/onnx-model.js":(Ae,F,r)=>{r.r(F)},"./node_modules/onnxruntime-common/dist/esm/onnx-value.js":(Ae,F,r)=>{r.r(F)},"./node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js":(Ae,F,r)=>{r.r(F),r.d(F,{tensorToDataURL:()=>w,tensorToImageData:()=>D});const w=(W,te)=>{const j=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);j.width=W.dims[3],j.height=W.dims[2];const y=j.getContext("2d");if(y!=null){let P,v;te?.tensorLayout!==void 0&&te.tensorLayout==="NHWC"?(P=W.dims[2],v=W.dims[3]):(P=W.dims[3],v=W.dims[2]);const T=te?.format!==void 0?te.format:"RGB",b=te?.norm;let z,K;b===void 0||b.mean===void 0?z=[255,255,255,255]:typeof b.mean=="number"?z=[b.mean,b.mean,b.mean,b.mean]:(z=[b.mean[0],b.mean[1],b.mean[2],0],b.mean[3]!==void 0&&(z[3]=b.mean[3])),b===void 0||b.bias===void 0?K=[0,0,0,0]:typeof b.bias=="number"?K=[b.bias,b.bias,b.bias,b.bias]:(K=[b.bias[0],b.bias[1],b.bias[2],0],b.bias[3]!==void 0&&(K[3]=b.bias[3]));const re=v*P;let ae=0,B=re,G=re*2,X=-1;T==="RGBA"?(ae=0,B=re,G=re*2,X=re*3):T==="RGB"?(ae=0,B=re,G=re*2):T==="RBG"&&(ae=0,G=re,B=re*2);for(let I=0;I<v;I++)for(let $=0;$<P;$++){const g=(W.data[ae++]-K[0])*z[0],C=(W.data[B++]-K[1])*z[1],x=(W.data[G++]-K[2])*z[2],J=X===-1?255:(W.data[X++]-K[3])*z[3];y.fillStyle="rgba("+g+","+C+","+x+","+J+")",y.fillRect($,I,1,1)}if("toDataURL"in j)return j.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},D=(W,te)=>{const j=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d");let y;if(j!=null){let P,v,T;te?.tensorLayout!==void 0&&te.tensorLayout==="NHWC"?(P=W.dims[2],v=W.dims[1],T=W.dims[3]):(P=W.dims[3],v=W.dims[2],T=W.dims[1]);const b=te!==void 0&&te.format!==void 0?te.format:"RGB",z=te?.norm;let K,re;z===void 0||z.mean===void 0?K=[255,255,255,255]:typeof z.mean=="number"?K=[z.mean,z.mean,z.mean,z.mean]:(K=[z.mean[0],z.mean[1],z.mean[2],255],z.mean[3]!==void 0&&(K[3]=z.mean[3])),z===void 0||z.bias===void 0?re=[0,0,0,0]:typeof z.bias=="number"?re=[z.bias,z.bias,z.bias,z.bias]:(re=[z.bias[0],z.bias[1],z.bias[2],0],z.bias[3]!==void 0&&(re[3]=z.bias[3]));const ae=v*P;if(te!==void 0&&(te.format!==void 0&&T===4&&te.format!=="RGBA"||T===3&&te.format!=="RGB"&&te.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");const B=4;let G=0,X=1,I=2,$=3,g=0,C=ae,x=ae*2,J=-1;b==="RGBA"?(g=0,C=ae,x=ae*2,J=ae*3):b==="RGB"?(g=0,C=ae,x=ae*2):b==="RBG"&&(g=0,x=ae,C=ae*2),y=j.createImageData(P,v);for(let Q=0;Q<v*P;G+=B,X+=B,I+=B,$+=B,Q++)y.data[G]=(W.data[g++]-re[0])*K[0],y.data[X]=(W.data[C++]-re[1])*K[1],y.data[I]=(W.data[x++]-re[2])*K[2],y.data[$]=J===-1?255:(W.data[J++]-re[3])*K[3]}else throw new Error("Can not access image data");return y}},"./node_modules/onnxruntime-common/dist/esm/tensor-conversion.js":(Ae,F,r)=>{r.r(F)},"./node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js":(Ae,F,r)=>{r.r(F),r.d(F,{bufferToTensor:()=>D,tensorFromGpuBuffer:()=>j,tensorFromImage:()=>W,tensorFromMLTensor:()=>y,tensorFromPinnedBuffer:()=>P,tensorFromTexture:()=>te});var w=r("./node_modules/onnxruntime-common/dist/esm/tensor-impl.js");const D=(v,T)=>{if(v===void 0)throw new Error("Image buffer must be defined");if(T.height===void 0||T.width===void 0)throw new Error("Image height and width must be defined");if(T.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");const{height:b,width:z}=T,K=T.norm??{mean:255,bias:0};let re,ae;typeof K.mean=="number"?re=[K.mean,K.mean,K.mean,K.mean]:re=[K.mean[0],K.mean[1],K.mean[2],K.mean[3]??255],typeof K.bias=="number"?ae=[K.bias,K.bias,K.bias,K.bias]:ae=[K.bias[0],K.bias[1],K.bias[2],K.bias[3]??0];const B=T.format!==void 0?T.format:"RGBA",G=T.tensorFormat!==void 0&&T.tensorFormat!==void 0?T.tensorFormat:"RGB",X=b*z,I=G==="RGBA"?new Float32Array(X*4):new Float32Array(X*3);let $=4,g=0,C=1,x=2,J=3,Q=0,le=X,ue=X*2,fe=-1;B==="RGB"&&($=3,g=0,C=1,x=2,J=-1),G==="RGBA"?fe=X*3:G==="RBG"?(Q=0,ue=X,le=X*2):G==="BGR"&&(ue=0,le=X,Q=X*2);for(let ve=0;ve<X;ve++,g+=$,x+=$,C+=$,J+=$)I[Q++]=(v[g]+ae[0])/re[0],I[le++]=(v[C]+ae[1])/re[1],I[ue++]=(v[x]+ae[2])/re[2],fe!==-1&&J!==-1&&(I[fe++]=(v[J]+ae[3])/re[3]);return G==="RGBA"?new w.Tensor("float32",I,[1,4,b,z]):new w.Tensor("float32",I,[1,3,b,z])},W=async(v,T)=>{const b=typeof HTMLImageElement<"u"&&v instanceof HTMLImageElement,z=typeof ImageData<"u"&&v instanceof ImageData,K=typeof ImageBitmap<"u"&&v instanceof ImageBitmap,re=typeof v=="string";let ae,B=T??{};const G=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},X=I=>typeof HTMLCanvasElement<"u"&&I instanceof HTMLCanvasElement||I instanceof OffscreenCanvas?I.getContext("2d"):null;if(b){const I=G();I.width=v.width,I.height=v.height;const $=X(I);if($!=null){let g=v.height,C=v.width;if(T!==void 0&&T.resizedHeight!==void 0&&T.resizedWidth!==void 0&&(g=T.resizedHeight,C=T.resizedWidth),T!==void 0){if(B=T,T.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");B.tensorFormat="RGBA",B.height=g,B.width=C}else B.tensorFormat="RGBA",B.height=g,B.width=C;$.drawImage(v,0,0),ae=$.getImageData(0,0,C,g).data}else throw new Error("Can not access image data")}else if(z){let I,$;if(T!==void 0&&T.resizedWidth!==void 0&&T.resizedHeight!==void 0?(I=T.resizedHeight,$=T.resizedWidth):(I=v.height,$=v.width),T!==void 0&&(B=T),B.format="RGBA",B.height=I,B.width=$,T!==void 0){const g=G();g.width=$,g.height=I;const C=X(g);if(C!=null)C.putImageData(v,0,0),ae=C.getImageData(0,0,$,I).data;else throw new Error("Can not access image data")}else ae=v.data}else if(K){if(T===void 0)throw new Error("Please provide image config with format for Imagebitmap");const I=G();I.width=v.width,I.height=v.height;const $=X(I);if($!=null){const g=v.height,C=v.width;return $.drawImage(v,0,0,C,g),ae=$.getImageData(0,0,C,g).data,B.height=g,B.width=C,D(ae,B)}else throw new Error("Can not access image data")}else{if(re)return new Promise((I,$)=>{const g=G(),C=X(g);if(!v||!C)return $();const x=new Image;x.crossOrigin="Anonymous",x.src=v,x.onload=()=>{g.width=x.width,g.height=x.height,C.drawImage(x,0,0,g.width,g.height);const J=C.getImageData(0,0,g.width,g.height);B.height=g.height,B.width=g.width,I(D(J.data,B))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(ae!==void 0)return D(ae,B);throw new Error("Input data provided is not supported - aborted tensor creation")},te=(v,T)=>{const{width:b,height:z,download:K,dispose:re}=T,ae=[1,z,b,4];return new w.Tensor({location:"texture",type:"float32",texture:v,dims:ae,download:K,dispose:re})},j=(v,T)=>{const{dataType:b,dims:z,download:K,dispose:re}=T;return new w.Tensor({location:"gpu-buffer",type:b??"float32",gpuBuffer:v,dims:z,download:K,dispose:re})},y=(v,T)=>{const{dataType:b,dims:z,download:K,dispose:re}=T;return new w.Tensor({location:"ml-tensor",type:b??"float32",mlTensor:v,dims:z,download:K,dispose:re})},P=(v,T,b)=>new w.Tensor({location:"cpu-pinned",type:v,data:T,dims:b??[T.length]})},"./node_modules/onnxruntime-common/dist/esm/tensor-factory.js":(Ae,F,r)=>{r.r(F)},"./node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js":(Ae,F,r)=>{r.r(F),r.d(F,{NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP:()=>D,NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP:()=>w,checkTypedArray:()=>te});const w=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array],["int4",Uint8Array],["uint4",Uint8Array]]),D=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]);let W=!1;const te=()=>{if(!W){W=!0;const j=typeof BigInt64Array<"u"&&BigInt64Array.from,y=typeof BigUint64Array<"u"&&BigUint64Array.from,P=typeof Float16Array<"u"&&Float16Array.from;j&&(w.set("int64",BigInt64Array),D.set(BigInt64Array,"int64")),y&&(w.set("uint64",BigUint64Array),D.set(BigUint64Array,"uint64")),P?(w.set("float16",Float16Array),D.set(Float16Array,"float16")):w.set("float16",Uint16Array)}}},"./node_modules/onnxruntime-common/dist/esm/tensor-impl.js":(Ae,F,r)=>{r.r(F),r.d(F,{Tensor:()=>j});var w=r("./node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js"),D=r("./node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js"),W=r("./node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js"),te=r("./node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js");class j{constructor(P,v,T){(0,W.checkTypedArray)();let b,z;if(typeof P=="object"&&"location"in P)switch(this.dataLocation=P.location,b=P.type,z=P.dims,P.location){case"cpu-pinned":{const re=W.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(b);if(!re)throw new TypeError(`unsupported type "${b}" to create tensor from pinned buffer`);if(!(P.data instanceof re))throw new TypeError(`buffer should be of type ${re.name}`);this.cpuData=P.data;break}case"texture":{if(b!=="float32")throw new TypeError(`unsupported type "${b}" to create tensor from texture`);this.gpuTextureData=P.texture,this.downloader=P.download,this.disposer=P.dispose;break}case"gpu-buffer":{if(b!=="float32"&&b!=="float16"&&b!=="int32"&&b!=="int64"&&b!=="uint32"&&b!=="uint8"&&b!=="bool"&&b!=="uint4"&&b!=="int4")throw new TypeError(`unsupported type "${b}" to create tensor from gpu buffer`);this.gpuBufferData=P.gpuBuffer,this.downloader=P.download,this.disposer=P.dispose;break}case"ml-tensor":{if(b!=="float32"&&b!=="float16"&&b!=="int32"&&b!=="int64"&&b!=="uint32"&&b!=="uint64"&&b!=="int8"&&b!=="uint8"&&b!=="bool")throw new TypeError(`unsupported type "${b}" to create tensor from MLTensor`);this.mlTensorData=P.mlTensor,this.downloader=P.download,this.disposer=P.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let re,ae;if(typeof P=="string")if(b=P,ae=T,P==="string"){if(!Array.isArray(v))throw new TypeError("A string tensor's data must be a string array.");re=v}else{const B=W.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(P);if(B===void 0)throw new TypeError(`Unsupported tensor type: ${P}.`);if(Array.isArray(v)){if(P==="float16"&&B===Uint16Array||P==="uint4"||P==="int4")throw new TypeError(`Creating a ${P} tensor from number array is not supported. Please use ${B.name} as data.`);P==="uint64"||P==="int64"?re=B.from(v,BigInt):re=B.from(v)}else if(v instanceof B)re=v;else if(v instanceof Uint8ClampedArray)if(P==="uint8")re=Uint8Array.from(v);else throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");else throw new TypeError(`A ${b} tensor's data must be type of ${B}`)}else if(ae=v,Array.isArray(P)){if(P.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");const B=typeof P[0];if(B==="string")b="string",re=P;else if(B==="boolean")b="bool",re=Uint8Array.from(P);else throw new TypeError(`Invalid element type of data array: ${B}.`)}else if(P instanceof Uint8ClampedArray)b="uint8",re=Uint8Array.from(P);else{const B=W.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(P.constructor);if(B===void 0)throw new TypeError(`Unsupported type for tensor data: ${P.constructor}.`);b=B,re=P}if(ae===void 0)ae=[re.length];else if(!Array.isArray(ae))throw new TypeError("A tensor's dims must be a number array");z=ae,this.cpuData=re,this.dataLocation="cpu"}const K=(0,te.calculateSize)(z);if(this.cpuData&&K!==this.cpuData.length&&!((b==="uint4"||b==="int4")&&Math.ceil(K/2)===this.cpuData.length))throw new Error(`Tensor's size(${K}) does not match data length(${this.cpuData.length}).`);this.type=b,this.dims=z,this.size=K}static async fromImage(P,v){return(0,D.tensorFromImage)(P,v)}static fromTexture(P,v){return(0,D.tensorFromTexture)(P,v)}static fromGpuBuffer(P,v){return(0,D.tensorFromGpuBuffer)(P,v)}static fromMLTensor(P,v){return(0,D.tensorFromMLTensor)(P,v)}static fromPinnedBuffer(P,v,T){return(0,D.tensorFromPinnedBuffer)(P,v,T)}toDataURL(P){return(0,w.tensorToDataURL)(this,P)}toImageData(P){return(0,w.tensorToImageData)(this,P)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}get mlTensor(){if(this.ensureValid(),!this.mlTensorData)throw new Error("The data is not stored as a WebNN MLTensor.");return this.mlTensorData}async getData(P){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":case"ml-tensor":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;const v=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=v,P&&this.disposer&&(this.disposer(),this.disposer=void 0),v}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.mlTensorData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(P){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return(0,te.tensorReshape)(this,P)}}},"./node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js":(Ae,F,r)=>{r.r(F),r.d(F,{calculateSize:()=>D,tensorReshape:()=>W});var w=r("./node_modules/onnxruntime-common/dist/esm/tensor-impl.js");const D=te=>{let j=1;for(let y=0;y<te.length;y++){const P=te[y];if(typeof P!="number"||!Number.isSafeInteger(P))throw new TypeError(`dims[${y}] must be an integer, got: ${P}`);if(P<0)throw new RangeError(`dims[${y}] must be a non-negative integer, got: ${P}`);j*=P}return j},W=(te,j)=>{switch(te.location){case"cpu":return new w.Tensor(te.type,te.data,j);case"cpu-pinned":return new w.Tensor({location:"cpu-pinned",data:te.data,type:te.type,dims:j});case"texture":return new w.Tensor({location:"texture",texture:te.texture,type:te.type,dims:j});case"gpu-buffer":return new w.Tensor({location:"gpu-buffer",gpuBuffer:te.gpuBuffer,type:te.type,dims:j});case"ml-tensor":return new w.Tensor({location:"ml-tensor",mlTensor:te.mlTensor,type:te.type,dims:j});default:throw new Error(`tensorReshape: tensor location ${te.location} is not supported`)}}},"./node_modules/onnxruntime-common/dist/esm/tensor.js":(Ae,F,r)=>{r.r(F),r.d(F,{Tensor:()=>D});var w=r("./node_modules/onnxruntime-common/dist/esm/tensor-impl.js");const D=w.Tensor},"./node_modules/onnxruntime-common/dist/esm/trace.js":(Ae,F,r)=>{r.r(F),r.d(F,{TRACE:()=>D,TRACE_FUNC_BEGIN:()=>te,TRACE_FUNC_END:()=>j});var w=r("./node_modules/onnxruntime-common/dist/esm/env-impl.js");const D=(y,P)=>{(typeof w.env.trace>"u"?!w.env.wasm.trace:!w.env.trace)||console.timeStamp(`${y}::ORT::${P}`)},W=(y,P)=>{const v=new Error().stack?.split(/\r\n|\r|\n/g)||[];let T=!1;for(let b=0;b<v.length;b++){if(T&&!v[b].includes("TRACE_FUNC")){let z=`FUNC_${y}::${v[b].trim().split(" ")[1]}`;P&&(z+=`::${P}`),D("CPU",z);return}v[b].includes("TRACE_FUNC")&&(T=!0)}},te=y=>{(typeof w.env.trace>"u"?!w.env.wasm.trace:!w.env.trace)||W("BEGIN",y)},j=y=>{(typeof w.env.trace>"u"?!w.env.wasm.trace:!w.env.trace)||W("END",y)}},"./node_modules/onnxruntime-common/dist/esm/training-session-impl.js":(Ae,F,r)=>{r.r(F),r.d(F,{TrainingSession:()=>te});var w=r("./node_modules/onnxruntime-common/dist/esm/backend-impl.js"),D=r("./node_modules/onnxruntime-common/dist/esm/tensor.js");const W="Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.";class te{constructor(y,P,v){this.handler=y,this.hasOptimizerModel=P,this.hasEvalModel=v}get trainingInputNames(){return this.handler.inputNames}get trainingOutputNames(){return this.handler.outputNames}get evalInputNames(){if(this.hasEvalModel)return this.handler.evalInputNames;throw new Error("This training session has no evalModel loaded.")}get evalOutputNames(){if(this.hasEvalModel)return this.handler.evalOutputNames;throw new Error("This training session has no evalModel loaded.")}static async create(y,P){const v=y.evalModel||"",T=y.optimizerModel||"",b=P||{},[z,K]=await(0,w.resolveBackendAndExecutionProviders)(b);if(z.createTrainingSessionHandler){const re=await z.createTrainingSessionHandler(y.checkpointState,y.trainModel,v,T,K);return new te(re,!!y.optimizerModel,!!y.evalModel)}else throw new Error(W)}typeNarrowingForRunStep(y,P,v,T,b){const z={};let K={};if(typeof v!="object"||v===null||v instanceof D.Tensor||Array.isArray(v))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let re=!0;if(typeof T=="object"){if(T===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(T instanceof D.Tensor)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(T)){if(T.length===0)throw new TypeError("'fetches' cannot be an empty array.");re=!1;for(const ae of T){if(typeof ae!="string")throw new TypeError("'fetches' must be a string array or an object.");if(P.indexOf(ae)===-1)throw new RangeError(`'fetches' contains invalid output name: ${ae}.`);z[ae]=null}if(typeof b=="object"&&b!==null)K=b;else if(typeof b<"u")throw new TypeError("'options' must be an object.")}else{let ae=!1;const B=Object.getOwnPropertyNames(T);for(const G of P)if(B.indexOf(G)!==-1){const X=T[G];(X===null||X instanceof D.Tensor)&&(ae=!0,re=!1,z[G]=X)}if(ae){if(typeof b=="object"&&b!==null)K=b;else if(typeof b<"u")throw new TypeError("'options' must be an object.")}else K=T}}else if(typeof T<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const ae of y)if(typeof v[ae]>"u")throw new Error(`input '${ae}' is missing in 'feeds'.`);if(re)for(const ae of P)z[ae]=null;return[z,K]}convertHandlerReturnTypeToMapOfTensors(y){const P={};for(const v in y)if(Object.hasOwnProperty.call(y,v)){const T=y[v];T instanceof D.Tensor?P[v]=T:P[v]=new D.Tensor(T.type,T.data,T.dims)}return P}async lazyResetGrad(){await this.handler.lazyResetGrad()}async runTrainStep(y,P,v){const[T,b]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,y,P,v),z=await this.handler.runTrainStep(y,T,b);return this.convertHandlerReturnTypeToMapOfTensors(z)}async runOptimizerStep(y){if(this.hasOptimizerModel)await this.handler.runOptimizerStep(y||{});else throw new Error("This TrainingSession has no OptimizerModel loaded.")}async runEvalStep(y,P,v){if(this.hasEvalModel){const[T,b]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,y,P,v),z=await this.handler.runEvalStep(y,T,b);return this.convertHandlerReturnTypeToMapOfTensors(z)}else throw new Error("This TrainingSession has no EvalModel loaded.")}async getParametersSize(y=!0){return this.handler.getParametersSize(y)}async loadParametersBuffer(y,P=!0){const v=await this.getParametersSize(P);if(y.length!==4*v)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(y,P)}async getContiguousParameters(y=!0){return this.handler.getContiguousParameters(y)}async release(){return this.handler.dispose()}}},"./node_modules/onnxruntime-common/dist/esm/training-session.js":(Ae,F,r)=>{r.r(F),r.d(F,{TrainingSession:()=>D});var w=r("./node_modules/onnxruntime-common/dist/esm/training-session-impl.js");const D=w.TrainingSession},"./node_modules/onnxruntime-common/dist/esm/version.js":(Ae,F,r)=>{r.r(F),r.d(F,{version:()=>w});const w="1.20.1"},"./node_modules/onnxruntime-web/dist/ort.bundle.min.mjs":(Ae,F,r)=>{r.r(F),r.d(F,{InferenceSession:()=>lt,TRACE:()=>je,TRACE_FUNC_BEGIN:()=>Ve,TRACE_FUNC_END:()=>Be,Tensor:()=>ie,default:()=>t_,env:()=>x,registerBackend:()=>K});/*!

 */var w=Object.defineProperty,D=Object.getOwnPropertyDescriptor,W=Object.getOwnPropertyNames,te=Object.prototype.hasOwnProperty,j=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(t,s)=>(typeof require<"u"?require:t)[s]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')}),y=(e,t)=>()=>(e&&(t=e(e=0)),t),P=(e,t)=>{for(var s in t)w(e,s,{get:t[s],enumerable:!0})},v=(e,t,s,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of W(t))!te.call(e,o)&&o!==s&&w(e,o,{get:()=>t[o],enumerable:!(n=D(t,o))||n.enumerable});return e},T=e=>v(w({},"__esModule",{value:!0}),e),b,z,K,re,ae,B=y(()=>{b=new Map,z=[],K=(e,t,s)=>{if(t&&typeof t.init=="function"&&typeof t.createInferenceSessionHandler=="function"){let n=b.get(e);if(n===void 0)b.set(e,{backend:t,priority:s});else{if(n.priority>s)return;if(n.priority===s&&n.backend!==t)throw new Error(`cannot register backend "${e}" using priority ${s}`)}if(s>=0){let o=z.indexOf(e);o!==-1&&z.splice(o,1);for(let i=0;i<z.length;i++)if(b.get(z[i]).priority<=s){z.splice(i,0,e);return}z.push(e)}return}throw new TypeError("not a valid backend")},re=async e=>{let t=b.get(e);if(!t)return"backend not found.";if(t.initialized)return t.backend;if(t.aborted)return t.error;{let s=!!t.initPromise;try{return s||(t.initPromise=t.backend.init(e)),await t.initPromise,t.initialized=!0,t.backend}catch(n){return s||(t.error=`${n}`,t.aborted=!0),t.error}finally{delete t.initPromise}}},ae=async e=>{let t=e.executionProviders||[],s=t.map(p=>typeof p=="string"?p:p.name),n=s.length===0?z:s,o,i=[],a=new Set;for(let p of n){let h=await re(p);typeof h=="string"?i.push({name:p,err:h}):(o||(o=h),o===h&&a.add(p))}if(!o)throw new Error(`no available backend found. ERR: ${i.map(p=>`[${p.name}] ${p.err}`).join(", ")}`);for(let{name:p,err:h}of i)s.includes(p)&&console.warn(`removing requested execution provider "${p}" from session options because it is not available: ${h}`);let c=t.filter(p=>a.has(typeof p=="string"?p:p.name));return[o,new Proxy(e,{get:(p,h)=>h==="executionProviders"?c:Reflect.get(p,h)})]}}),G=y(()=>{B()}),X,I=y(()=>{X="1.21.0-dev.20241205-6ed77cc374"}),$,g,C=y(()=>{I(),$="warning",g={wasm:{},webgl:{},webgpu:{},versions:{common:X},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);$=e}},get logLevel(){return $}},Object.defineProperty(g,"logLevel",{enumerable:!0})}),x,J=y(()=>{C(),x=g}),Q,le,ue=y(()=>{Q=(e,t)=>{let s=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);s.width=e.dims[3],s.height=e.dims[2];let n=s.getContext("2d");if(n!=null){let o,i;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(o=e.dims[2],i=e.dims[3]):(o=e.dims[3],i=e.dims[2]);let a=t?.format!==void 0?t.format:"RGB",c=t?.norm,p,h;c===void 0||c.mean===void 0?p=[255,255,255,255]:typeof c.mean=="number"?p=[c.mean,c.mean,c.mean,c.mean]:(p=[c.mean[0],c.mean[1],c.mean[2],0],c.mean[3]!==void 0&&(p[3]=c.mean[3])),c===void 0||c.bias===void 0?h=[0,0,0,0]:typeof c.bias=="number"?h=[c.bias,c.bias,c.bias,c.bias]:(h=[c.bias[0],c.bias[1],c.bias[2],0],c.bias[3]!==void 0&&(h[3]=c.bias[3]));let k=i*o,u=0,S=k,R=k*2,N=-1;a==="RGBA"?(u=0,S=k,R=k*2,N=k*3):a==="RGB"?(u=0,S=k,R=k*2):a==="RBG"&&(u=0,R=k,S=k*2);for(let L=0;L<i;L++)for(let se=0;se<o;se++){let ee=(e.data[u++]-h[0])*p[0],U=(e.data[S++]-h[1])*p[1],ce=(e.data[R++]-h[2])*p[2],me=N===-1?255:(e.data[N++]-h[3])*p[3];n.fillStyle="rgba("+ee+","+U+","+ce+","+me+")",n.fillRect(se,L,1,1)}if("toDataURL"in s)return s.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},le=(e,t)=>{let s=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d"),n;if(s!=null){let o,i,a;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(o=e.dims[2],i=e.dims[1],a=e.dims[3]):(o=e.dims[3],i=e.dims[2],a=e.dims[1]);let c=t!==void 0&&t.format!==void 0?t.format:"RGB",p=t?.norm,h,k;p===void 0||p.mean===void 0?h=[255,255,255,255]:typeof p.mean=="number"?h=[p.mean,p.mean,p.mean,p.mean]:(h=[p.mean[0],p.mean[1],p.mean[2],255],p.mean[3]!==void 0&&(h[3]=p.mean[3])),p===void 0||p.bias===void 0?k=[0,0,0,0]:typeof p.bias=="number"?k=[p.bias,p.bias,p.bias,p.bias]:(k=[p.bias[0],p.bias[1],p.bias[2],0],p.bias[3]!==void 0&&(k[3]=p.bias[3]));let u=i*o;if(t!==void 0&&(t.format!==void 0&&a===4&&t.format!=="RGBA"||a===3&&t.format!=="RGB"&&t.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let S=4,R=0,N=1,L=2,se=3,ee=0,U=u,ce=u*2,me=-1;c==="RGBA"?(ee=0,U=u,ce=u*2,me=u*3):c==="RGB"?(ee=0,U=u,ce=u*2):c==="RBG"&&(ee=0,ce=u,U=u*2),n=s.createImageData(o,i);for(let ye=0;ye<i*o;R+=S,N+=S,L+=S,se+=S,ye++)n.data[R]=(e.data[ee++]-k[0])*h[0],n.data[N]=(e.data[U++]-k[1])*h[1],n.data[L]=(e.data[ce++]-k[2])*h[2],n.data[se]=me===-1?255:(e.data[me++]-k[3])*h[3]}else throw new Error("Can not access image data");return n}}),fe,Pe,ve,Fe,Ge,Re,ut=y(()=>{$e(),fe=(e,t)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(t.height===void 0||t.width===void 0)throw new Error("Image height and width must be defined");if(t.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let{height:s,width:n}=t,o=t.norm??{mean:255,bias:0},i,a;typeof o.mean=="number"?i=[o.mean,o.mean,o.mean,o.mean]:i=[o.mean[0],o.mean[1],o.mean[2],o.mean[3]??255],typeof o.bias=="number"?a=[o.bias,o.bias,o.bias,o.bias]:a=[o.bias[0],o.bias[1],o.bias[2],o.bias[3]??0];let c=t.format!==void 0?t.format:"RGBA",p=t.tensorFormat!==void 0&&t.tensorFormat!==void 0?t.tensorFormat:"RGB",h=s*n,k=p==="RGBA"?new Float32Array(h*4):new Float32Array(h*3),u=4,S=0,R=1,N=2,L=3,se=0,ee=h,U=h*2,ce=-1;c==="RGB"&&(u=3,S=0,R=1,N=2,L=-1),p==="RGBA"?ce=h*3:p==="RBG"?(se=0,U=h,ee=h*2):p==="BGR"&&(U=0,ee=h,se=h*2);for(let me=0;me<h;me++,S+=u,N+=u,R+=u,L+=u)k[se++]=(e[S]+a[0])/i[0],k[ee++]=(e[R]+a[1])/i[1],k[U++]=(e[N]+a[2])/i[2],ce!==-1&&L!==-1&&(k[ce++]=(e[L]+a[3])/i[3]);return p==="RGBA"?new Xe("float32",k,[1,4,s,n]):new Xe("float32",k,[1,3,s,n])},Pe=async(e,t)=>{let s=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,n=typeof ImageData<"u"&&e instanceof ImageData,o=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,i=typeof e=="string",a,c=t??{},p=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},h=k=>typeof HTMLCanvasElement<"u"&&k instanceof HTMLCanvasElement||k instanceof OffscreenCanvas?k.getContext("2d"):null;if(s){let k=p();k.width=e.width,k.height=e.height;let u=h(k);if(u!=null){let S=e.height,R=e.width;if(t!==void 0&&t.resizedHeight!==void 0&&t.resizedWidth!==void 0&&(S=t.resizedHeight,R=t.resizedWidth),t!==void 0){if(c=t,t.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");c.tensorFormat="RGBA",c.height=S,c.width=R}else c.tensorFormat="RGBA",c.height=S,c.width=R;u.drawImage(e,0,0),a=u.getImageData(0,0,R,S).data}else throw new Error("Can not access image data")}else if(n){let k,u;if(t!==void 0&&t.resizedWidth!==void 0&&t.resizedHeight!==void 0?(k=t.resizedHeight,u=t.resizedWidth):(k=e.height,u=e.width),t!==void 0&&(c=t),c.format="RGBA",c.height=k,c.width=u,t!==void 0){let S=p();S.width=u,S.height=k;let R=h(S);if(R!=null)R.putImageData(e,0,0),a=R.getImageData(0,0,u,k).data;else throw new Error("Can not access image data")}else a=e.data}else if(o){if(t===void 0)throw new Error("Please provide image config with format for Imagebitmap");let k=p();k.width=e.width,k.height=e.height;let u=h(k);if(u!=null){let S=e.height,R=e.width;return u.drawImage(e,0,0,R,S),a=u.getImageData(0,0,R,S).data,c.height=S,c.width=R,fe(a,c)}else throw new Error("Can not access image data")}else{if(i)return new Promise((k,u)=>{let S=p(),R=h(S);if(!e||!R)return u();let N=new Image;N.crossOrigin="Anonymous",N.src=e,N.onload=()=>{S.width=N.width,S.height=N.height,R.drawImage(N,0,0,S.width,S.height);let L=R.getImageData(0,0,S.width,S.height);c.height=S.height,c.width=S.width,k(fe(L.data,c))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(a!==void 0)return fe(a,c);throw new Error("Input data provided is not supported - aborted tensor creation")},ve=(e,t)=>{let{width:s,height:n,download:o,dispose:i}=t,a=[1,n,s,4];return new Xe({location:"texture",type:"float32",texture:e,dims:a,download:o,dispose:i})},Fe=(e,t)=>{let{dataType:s,dims:n,download:o,dispose:i}=t;return new Xe({location:"gpu-buffer",type:s??"float32",gpuBuffer:e,dims:n,download:o,dispose:i})},Ge=(e,t)=>{let{dataType:s,dims:n,download:o,dispose:i}=t;return new Xe({location:"ml-tensor",type:s??"float32",mlTensor:e,dims:n,download:o,dispose:i})},Re=(e,t,s)=>new Xe({location:"cpu-pinned",type:e,data:t,dims:s??[t.length]})}),de,Z,he,be,De=y(()=>{de=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array],["int4",Uint8Array],["uint4",Uint8Array]]),Z=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),he=!1,be=()=>{if(!he){he=!0;let e=typeof BigInt64Array<"u"&&BigInt64Array.from,t=typeof BigUint64Array<"u"&&BigUint64Array.from,s=typeof Float16Array<"u"&&Float16Array.from;e&&(de.set("int64",BigInt64Array),Z.set(BigInt64Array,"int64")),t&&(de.set("uint64",BigUint64Array),Z.set(BigUint64Array,"uint64")),s?(de.set("float16",Float16Array),Z.set(Float16Array,"float16")):de.set("float16",Uint16Array)}}}),Ze,Ke,ne=y(()=>{$e(),Ze=e=>{let t=1;for(let s=0;s<e.length;s++){let n=e[s];if(typeof n!="number"||!Number.isSafeInteger(n))throw new TypeError(`dims[${s}] must be an integer, got: ${n}`);if(n<0)throw new RangeError(`dims[${s}] must be a non-negative integer, got: ${n}`);t*=n}return t},Ke=(e,t)=>{switch(e.location){case"cpu":return new Xe(e.type,e.data,t);case"cpu-pinned":return new Xe({location:"cpu-pinned",data:e.data,type:e.type,dims:t});case"texture":return new Xe({location:"texture",texture:e.texture,type:e.type,dims:t});case"gpu-buffer":return new Xe({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});case"ml-tensor":return new Xe({location:"ml-tensor",mlTensor:e.mlTensor,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}}),Xe,$e=y(()=>{ue(),ut(),De(),ne(),Xe=class{constructor(e,t,s){be();let n,o;if(typeof e=="object"&&"location"in e)switch(this.dataLocation=e.location,n=e.type,o=e.dims,e.location){case"cpu-pinned":{let a=de.get(n);if(!a)throw new TypeError(`unsupported type "${n}" to create tensor from pinned buffer`);if(!(e.data instanceof a))throw new TypeError(`buffer should be of type ${a.name}`);this.cpuData=e.data;break}case"texture":{if(n!=="float32")throw new TypeError(`unsupported type "${n}" to create tensor from texture`);this.gpuTextureData=e.texture,this.downloader=e.download,this.disposer=e.dispose;break}case"gpu-buffer":{if(n!=="float32"&&n!=="float16"&&n!=="int32"&&n!=="int64"&&n!=="uint32"&&n!=="uint8"&&n!=="bool"&&n!=="uint4"&&n!=="int4")throw new TypeError(`unsupported type "${n}" to create tensor from gpu buffer`);this.gpuBufferData=e.gpuBuffer,this.downloader=e.download,this.disposer=e.dispose;break}case"ml-tensor":{if(n!=="float32"&&n!=="float16"&&n!=="int32"&&n!=="int64"&&n!=="uint32"&&n!=="uint64"&&n!=="int8"&&n!=="uint8"&&n!=="bool"&&n!=="uint4"&&n!=="int4")throw new TypeError(`unsupported type "${n}" to create tensor from MLTensor`);this.mlTensorData=e.mlTensor,this.downloader=e.download,this.disposer=e.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let a,c;if(typeof e=="string")if(n=e,c=s,e==="string"){if(!Array.isArray(t))throw new TypeError("A string tensor's data must be a string array.");a=t}else{let p=de.get(e);if(p===void 0)throw new TypeError(`Unsupported tensor type: ${e}.`);if(Array.isArray(t)){if(e==="float16"&&p===Uint16Array||e==="uint4"||e==="int4")throw new TypeError(`Creating a ${e} tensor from number array is not supported. Please use ${p.name} as data.`);e==="uint64"||e==="int64"?a=p.from(t,BigInt):a=p.from(t)}else if(t instanceof p)a=t;else if(t instanceof Uint8ClampedArray)if(e==="uint8")a=Uint8Array.from(t);else throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");else throw new TypeError(`A ${n} tensor's data must be type of ${p}`)}else if(c=t,Array.isArray(e)){if(e.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let p=typeof e[0];if(p==="string")n="string",a=e;else if(p==="boolean")n="bool",a=Uint8Array.from(e);else throw new TypeError(`Invalid element type of data array: ${p}.`)}else if(e instanceof Uint8ClampedArray)n="uint8",a=Uint8Array.from(e);else{let p=Z.get(e.constructor);if(p===void 0)throw new TypeError(`Unsupported type for tensor data: ${e.constructor}.`);n=p,a=e}if(c===void 0)c=[a.length];else if(!Array.isArray(c))throw new TypeError("A tensor's dims must be a number array");o=c,this.cpuData=a,this.dataLocation="cpu"}let i=Ze(o);if(this.cpuData&&i!==this.cpuData.length&&!((n==="uint4"||n==="int4")&&Math.ceil(i/2)===this.cpuData.length))throw new Error(`Tensor's size(${i}) does not match data length(${this.cpuData.length}).`);this.type=n,this.dims=o,this.size=i}static async fromImage(e,t){return Pe(e,t)}static fromTexture(e,t){return ve(e,t)}static fromGpuBuffer(e,t){return Fe(e,t)}static fromMLTensor(e,t){return Ge(e,t)}static fromPinnedBuffer(e,t,s){return Re(e,t,s)}toDataURL(e){return Q(this,e)}toImageData(e){return le(this,e)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}get mlTensor(){if(this.ensureValid(),!this.mlTensorData)throw new Error("The data is not stored as a WebNN MLTensor.");return this.mlTensorData}async getData(e){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":case"ml-tensor":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let t=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=t,e&&this.disposer&&(this.disposer(),this.disposer=void 0),t}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.mlTensorData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(e){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return Ke(this,e)}}}),ie,Me=y(()=>{$e(),ie=Xe}),je,Ne,Ve,Be,Qe=y(()=>{C(),je=(e,t)=>{(typeof g.trace>"u"?!g.wasm.trace:!g.trace)||console.timeStamp(`${e}::ORT::${t}`)},Ne=(e,t)=>{let s=new Error().stack?.split(/\r\n|\r|\n/g)||[],n=!1;for(let o=0;o<s.length;o++){if(n&&!s[o].includes("TRACE_FUNC")){let i=`FUNC_${e}::${s[o].trim().split(" ")[1]}`;t&&(i+=`::${t}`),je("CPU",i);return}s[o].includes("TRACE_FUNC")&&(n=!0)}},Ve=e=>{(typeof g.trace>"u"?!g.wasm.trace:!g.trace)||Ne("BEGIN",e)},Be=e=>{(typeof g.trace>"u"?!g.wasm.trace:!g.trace)||Ne("END",e)}}),ot,gt=y(()=>{B(),Me(),Qe(),ot=class Xm{constructor(t){this.handler=t}async run(t,s,n){Ve();let o={},i={};if(typeof t!="object"||t===null||t instanceof ie||Array.isArray(t))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let a=!0;if(typeof s=="object"){if(s===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(s instanceof ie)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(s)){if(s.length===0)throw new TypeError("'fetches' cannot be an empty array.");a=!1;for(let h of s){if(typeof h!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(h)===-1)throw new RangeError(`'fetches' contains invalid output name: ${h}.`);o[h]=null}if(typeof n=="object"&&n!==null)i=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else{let h=!1,k=Object.getOwnPropertyNames(s);for(let u of this.outputNames)if(k.indexOf(u)!==-1){let S=s[u];(S===null||S instanceof ie)&&(h=!0,a=!1,o[u]=S)}if(h){if(typeof n=="object"&&n!==null)i=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else i=s}}else if(typeof s<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let h of this.inputNames)if(typeof t[h]>"u")throw new Error(`input '${h}' is missing in 'feeds'.`);if(a)for(let h of this.outputNames)o[h]=null;let c=await this.handler.run(t,o,i),p={};for(let h in c)if(Object.hasOwnProperty.call(c,h)){let k=c[h];k instanceof ie?p[h]=k:p[h]=new ie(k.type,k.data,k.dims)}return Be(),p}async release(){return this.handler.dispose()}static async create(t,s,n,o){Ve();let i,a={};if(typeof t=="string"){if(i=t,typeof s=="object"&&s!==null)a=s;else if(typeof s<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof Uint8Array){if(i=t,typeof s=="object"&&s!==null)a=s;else if(typeof s<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&t instanceof SharedArrayBuffer){let k=t,u=0,S=t.byteLength;if(typeof s=="object"&&s!==null)a=s;else if(typeof s=="number"){if(u=s,!Number.isSafeInteger(u))throw new RangeError("'byteOffset' must be an integer.");if(u<0||u>=k.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${k.byteLength}).`);if(S=t.byteLength-u,typeof n=="number"){if(S=n,!Number.isSafeInteger(S))throw new RangeError("'byteLength' must be an integer.");if(S<=0||u+S>k.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${k.byteLength-u}].`);if(typeof o=="object"&&o!==null)a=o;else if(typeof o<"u")throw new TypeError("'options' must be an object.")}else if(typeof n<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof s<"u")throw new TypeError("'options' must be an object.");i=new Uint8Array(k,u,S)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");let[c,p]=await ae(a),h=await c.createInferenceSessionHandler(i,p);return Be(),new Xm(h)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}}),lt,dt=y(()=>{gt(),lt=ot}),A=y(()=>{}),oe=y(()=>{}),q=y(()=>{}),_e=y(()=>{}),Se={};P(Se,{InferenceSession:()=>lt,TRACE:()=>je,TRACE_FUNC_BEGIN:()=>Ve,TRACE_FUNC_END:()=>Be,Tensor:()=>ie,env:()=>x,registerBackend:()=>K});var He=y(()=>{G(),J(),dt(),Me(),A(),oe(),Qe(),q(),_e()}),et=y(()=>{}),it={};P(it,{default:()=>Yt});var ct,vt,Yt,ts=y(()=>{ph(),St(),xr(),ct="ort-wasm-proxy-worker",vt=globalThis.self?.name===ct,vt&&(self.onmessage=e=>{let{type:t,in:s}=e.data;try{switch(t){case"init-wasm":nt(s.wasm).then(()=>{Vn(s).then(()=>{postMessage({type:t})},n=>{postMessage({type:t,err:n})})},n=>{postMessage({type:t,err:n})});break;case"init-ep":{let{epName:n,env:o}=s;qd(o,n).then(()=>{postMessage({type:t})},i=>{postMessage({type:t,err:i})});break}case"copy-from":{let{buffer:n}=s,o=$r(n);postMessage({type:t,out:o});break}case"create":{let{model:n,options:o}=s;dr(n,o).then(i=>{postMessage({type:t,out:i})},i=>{postMessage({type:t,err:i})});break}case"release":Op(s),postMessage({type:t});break;case"run":{let{sessionId:n,inputIndices:o,inputs:i,outputIndices:a,options:c}=s;Lp(n,o,i,a,new Array(a.length).fill(null),c).then(p=>{p.some(h=>h[3]!=="cpu")?postMessage({type:t,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:t,out:p},Bp([...i,...p]))},p=>{postMessage({type:t,err:p})});break}case"end-profiling":zp(s),postMessage({type:t});break;default:}}catch(n){postMessage({type:t,err:n})}}),Yt=vt?null:e=>new Worker(e??sr,{type:"module",name:ct})}),xs={};P(xs,{default:()=>Ss});var ms,Ps,Ss,Hs=y(()=>{Ps=(ms=import.meta.url,async function(e={}){function t(){return jt.buffer!=Jt.buffer&&Js(),Jt}function s(){return jt.buffer!=Jt.buffer&&Js(),qt}function n(){return jt.buffer!=Jt.buffer&&Js(),Ys}function o(){return jt.buffer!=Jt.buffer&&Js(),at}function i(){return jt.buffer!=Jt.buffer&&Js(),Pt}function a(){return jt.buffer!=Jt.buffer&&Js(),hs}function c(){return jt.buffer!=Jt.buffer&&Js(),vs}function p(){return jt.buffer!=Jt.buffer&&Js(),Ks}var h,k,u=Object.assign({},e),S=new Promise((l,m)=>{h=l,k=m}),R=typeof window=="object",N=typeof importScripts=="function",L=N&&self.name=="em-pthread";u.mountExternalData=(l,m)=>{l.startsWith("./")&&(l=l.substring(2)),(u.Fb||(u.Fb=new Map)).set(l,m)},u.unmountExternalData=()=>{delete u.Fb};var se=globalThis.SharedArrayBuffer??new WebAssembly.Memory({initial:0,maximum:0,shared:!0}).buffer.constructor;let ee=()=>{let l=(E,O,V)=>(...we)=>{let Ue=an,Je=O?.();we=E(...we);let xt=O?.();return Je!==xt&&(E=xt,V(Je),O=V=null),an!=Ue?new Promise((Et,Rt)=>{rh={resolve:Et,reject:Rt}}):we},m=E=>async(...O)=>{try{if(u.Gb)throw Error("Session already started");let V=u.Gb={hc:O[0],errors:[]},we=await E(...O);if(u.Gb!==V)throw Error("Session mismatch");u.Hb?.flush();let Ue=V.errors;if(0<Ue.length){let Je=await Promise.all(Ue);if(Je=Je.filter(xt=>xt),0<Je.length)throw Error(Je.join(`
`))}return we}finally{u.Gb=null}};u._OrtCreateSession=l(u._OrtCreateSession,()=>u._OrtCreateSession,E=>u._OrtCreateSession=E),u._OrtRun=m(l(u._OrtRun,()=>u._OrtRun,E=>u._OrtRun=E)),u._OrtRunWithBinding=m(l(u._OrtRunWithBinding,()=>u._OrtRunWithBinding,E=>u._OrtRunWithBinding=E)),u._OrtBindInput=l(u._OrtBindInput,()=>u._OrtBindInput,E=>u._OrtBindInput=E),ee=void 0};u.jsepInit=(l,m)=>{if(ee?.(),l==="webgpu"){[u.Hb,u.Vb,u.Zb,u.Ob,u.Yb,u.kb,u.$b,u.cc,u.Wb,u.Xb,u.ac]=m;let E=u.Hb;u.jsepRegisterBuffer=(O,V,we,Ue)=>E.registerBuffer(O,V,we,Ue),u.jsepGetBuffer=O=>E.getBuffer(O),u.jsepCreateDownloader=(O,V,we)=>E.createDownloader(O,V,we),u.jsepOnCreateSession=O=>{E.onCreateSession(O)},u.jsepOnReleaseSession=O=>{E.onReleaseSession(O)},u.jsepOnRunStart=O=>E.onRunStart(O),u.dc=(O,V)=>{E.upload(O,V)}}else if(l==="webnn"){[u.Hb,u.bc,u.Pb,u.jsepEnsureTensor,u.ec,u.jsepDownloadTensor]=m,u.jsepReleaseTensorId=u.Pb;let E=u.Hb;u.jsepOnRunStart=O=>E.onRunStart(O),u.jsepRegisterMLContext=(O,V)=>{E.registerMLContext(O,V)},u.jsepOnReleaseSession=O=>{E.onReleaseSession(O)},u.jsepCreateMLTensorDownloader=(O,V)=>E.createMLTensorDownloader(O,V),u.jsepRegisterMLTensor=(O,V,we)=>E.registerMLTensor(O,V,we),u.jsepCreateMLContext=O=>E.createMLContext(O),u.jsepRegisterMLConstant=(O,V,we,Ue,Je)=>E.registerMLConstant(O,V,we,Ue,Je,u.Fb)}};var U,ce,me=Object.assign({},u),ye="./this.program",ze=(l,m)=>{throw m},Ee="";(R||N)&&(N?Ee=self.location.href:typeof document<"u"&&document.currentScript&&(Ee=document.currentScript.src),ms&&(Ee=ms),Ee=Ee.startsWith("blob:")?"":Ee.substr(0,Ee.replace(/[?#].*/,"").lastIndexOf("/")+1),N&&(ce=l=>{var m=new XMLHttpRequest;return m.open("GET",l,!1),m.responseType="arraybuffer",m.send(null),new Uint8Array(m.response)}),U=(l,m,E)=>{var O=new XMLHttpRequest;O.open("GET",l,!0),O.responseType="arraybuffer",O.onload=()=>{O.status==200||O.status==0&&O.response?m(O.response):E()},O.onerror=E,O.send(null)});var tt,mt=console.log.bind(console),Ct=console.error.bind(console),Ft=mt,$t=Ct;if(Object.assign(u,me),me=null,L){let l=function(m){try{var E=m.data,O=E.cmd;if(O==="load"){let V=[];self.onmessage=we=>V.push(we),self.startWorker=()=>{postMessage({cmd:"loaded"});for(let we of V)l(we);self.onmessage=l};for(let we of E.handlers)u[we]&&!u[we].proxy||(u[we]=(...Ue)=>{postMessage({Nb:"callHandler",pc:we,args:Ue})},we=="print"&&(Ft=u[we]),we=="printErr"&&($t=u[we]));jt=E.wasmMemory,Js(),bt(E.wasmModule)}else if(O==="run"){ah(E.pthread_ptr,0,0,1,0,0),th(E.pthread_ptr),o_(),Lh(),Kt||(Fm(),Kt=!0);try{i_(E.start_routine,E.arg)}catch(V){if(V!="unwind")throw V}}else O==="cancel"?pa()&&Ep(-1):E.target!=="setimmediate"&&(O==="checkMailbox"?Kt&&fp():O&&($t(`worker: received unknown command ${O}`),$t(E)))}catch(V){throw Om(),V}};var bt,Kt=!1;$t=function(...m){m=m.join(" "),console.error(m)},self.alert=function(...m){postMessage({Nb:"alert",text:m.join(" "),rc:pa()})},u.instantiateWasm=(m,E)=>new Promise(O=>{bt=V=>{V=new WebAssembly.Instance(V,Ah()),E(V),O()}}),self.onunhandledrejection=m=>{throw m.reason||m},self.onmessage=l}u.wasmBinary&&(tt=u.wasmBinary);var jt,Ot,ss,Jt,qt,Ys,at,Pt,hs,vs,Ts,Mn,Ks,Cs=!1;function Js(){var l=jt.buffer;u.HEAP8=Jt=new Int8Array(l),u.HEAP16=Ys=new Int16Array(l),u.HEAPU8=qt=new Uint8Array(l),u.HEAPU16=at=new Uint16Array(l),u.HEAP32=Pt=new Int32Array(l),u.HEAPU32=hs=new Uint32Array(l),u.HEAPF32=vs=new Float32Array(l),u.HEAPF64=Ks=new Float64Array(l),u.HEAP64=Ts=new BigInt64Array(l),u.HEAPU64=Mn=new BigUint64Array(l)}if(!L){if(!((jt=new WebAssembly.Memory({initial:256,maximum:65536,shared:!0})).buffer instanceof se))throw $t("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),Error("bad memory");Js()}var mp=[],Yd=[],s_=[],Jd=0,Zd=null;function Eh(){if(--Jd==0&&Zd){var l=Zd;Zd=null,l()}}function Kn(l){throw $t(l="Aborted("+l+")"),Cs=!0,ss=1,l=new WebAssembly.RuntimeError(l+". Build with -sASSERTIONS for more info."),k(l),l}var Up,Ch=l=>l.startsWith("data:application/octet-stream;base64,"),kh=l=>l.startsWith("file://");function Sh(l){if(l==Up&&tt)return new Uint8Array(tt);if(ce)return ce(l);throw"both async and sync fetching of the wasm failed"}function $h(l,m,E){return function(O){if(!tt&&(R||N)){if(typeof fetch=="function"&&!kh(O))return fetch(O,{credentials:"same-origin"}).then(V=>{if(!V.ok)throw`failed to load wasm binary file at '${O}'`;return V.arrayBuffer()}).catch(()=>Sh(O));if(U)return new Promise((V,we)=>{U(O,Ue=>V(new Uint8Array(Ue)),we)})}return Promise.resolve().then(()=>Sh(O))}(l).then(O=>WebAssembly.instantiate(O,m)).then(E,O=>{$t(`failed to asynchronously prepare wasm: ${O}`),Kn(O)})}function Ah(){return{a:{O:n_,Aa:r_,b:l_,aa:Nh,B:Uh,qa:Vh,Y:Kh,_:Hh,ra:qh,oa:Xh,ha:Qh,na:Yh,L:Jh,Z:Zh,W:em,pa:tm,X:sm,va:u_,F:d_,Q:c_,P:h_,E:__,u:f_,q:g_,G:w_,A:P_,R:E_,ua:C_,ka:k_,U:S_,ba:$_,H:A_,ja:th,ta:I_,t:F_,Ba:O_,x:z_,n:B_,l:N_,c:Zp,o:j_,j:V_,w:G_,p:K_,f:H_,s:q_,m:X_,e:Q_,k:Y_,i:J_,h:Z_,d:ef,ea:tf,fa:sf,ga:rf,ca:fm,da:gm,T:nf,g:of,D:af,I:lf,M:uf,y:df,sa:cf,V:pf,v:ym,z:hf,N:mf,S:_f,za:ff,ya:gf,la:vm,ma:Tm,$:qp,C:xm,K:Pm,ia:Em,J:Cm,a:jt,xa:Hp,wa:$m,r:Mf}}}var Vp={874308:(l,m,E,O,V)=>{if(u===void 0||!u.Fb)return 1;if((l=Os(Number(l>>>0))).startsWith("./")&&(l=l.substring(2)),!(l=u.Fb.get(l)))return 2;if(m=Number(m>>>0),E=Number(E>>>0),O=Number(O>>>0),m+E>l.byteLength)return 3;try{let we=l.subarray(m,m+E);switch(V){case 0:s().set(we,O>>>0);break;case 1:u.dc(O,we);break;default:return 4}return 0}catch{return 4}},875023:(l,m,E)=>{u.ec(l,s().subarray(m>>>0,m+E>>>0))},875086:()=>u.bc(),875127:l=>{u.Pb(l)},875163:()=>{u.Wb()},875194:()=>{u.Xb()},875223:()=>{u.ac()},875248:l=>u.Vb(l),875281:l=>u.Zb(l),875313:(l,m,E)=>{u.Ob(Number(l),Number(m),Number(E),!0)},875376:(l,m,E)=>{u.Ob(Number(l),Number(m),Number(E))},875433:()=>typeof wasmOffsetConverter<"u",875490:l=>{u.kb("Abs",l,void 0)},875541:l=>{u.kb("Neg",l,void 0)},875592:l=>{u.kb("Floor",l,void 0)},875645:l=>{u.kb("Ceil",l,void 0)},875697:l=>{u.kb("Reciprocal",l,void 0)},875755:l=>{u.kb("Sqrt",l,void 0)},875807:l=>{u.kb("Exp",l,void 0)},875858:l=>{u.kb("Erf",l,void 0)},875909:l=>{u.kb("Sigmoid",l,void 0)},875964:(l,m,E)=>{u.kb("HardSigmoid",l,{alpha:m,beta:E})},876043:l=>{u.kb("Log",l,void 0)},876094:l=>{u.kb("Sin",l,void 0)},876145:l=>{u.kb("Cos",l,void 0)},876196:l=>{u.kb("Tan",l,void 0)},876247:l=>{u.kb("Asin",l,void 0)},876299:l=>{u.kb("Acos",l,void 0)},876351:l=>{u.kb("Atan",l,void 0)},876403:l=>{u.kb("Sinh",l,void 0)},876455:l=>{u.kb("Cosh",l,void 0)},876507:l=>{u.kb("Asinh",l,void 0)},876560:l=>{u.kb("Acosh",l,void 0)},876613:l=>{u.kb("Atanh",l,void 0)},876666:l=>{u.kb("Tanh",l,void 0)},876718:l=>{u.kb("Not",l,void 0)},876769:(l,m,E)=>{u.kb("Clip",l,{min:m,max:E})},876838:l=>{u.kb("Clip",l,void 0)},876890:(l,m)=>{u.kb("Elu",l,{alpha:m})},876948:l=>{u.kb("Gelu",l,void 0)},877e3:l=>{u.kb("Relu",l,void 0)},877052:(l,m)=>{u.kb("LeakyRelu",l,{alpha:m})},877116:(l,m)=>{u.kb("ThresholdedRelu",l,{alpha:m})},877186:(l,m)=>{u.kb("Cast",l,{to:m})},877244:l=>{u.kb("Add",l,void 0)},877295:l=>{u.kb("Sub",l,void 0)},877346:l=>{u.kb("Mul",l,void 0)},877397:l=>{u.kb("Div",l,void 0)},877448:l=>{u.kb("Pow",l,void 0)},877499:l=>{u.kb("Equal",l,void 0)},877552:l=>{u.kb("Greater",l,void 0)},877607:l=>{u.kb("GreaterOrEqual",l,void 0)},877669:l=>{u.kb("Less",l,void 0)},877721:l=>{u.kb("LessOrEqual",l,void 0)},877780:(l,m,E,O,V)=>{u.kb("ReduceMean",l,{keepDims:!!m,noopWithEmptyAxes:!!E,axes:O?Array.from(i().subarray(Number(O)>>>0,Number(V)>>>0)):[]})},877955:(l,m,E,O,V)=>{u.kb("ReduceMax",l,{keepDims:!!m,noopWithEmptyAxes:!!E,axes:O?Array.from(i().subarray(Number(O)>>>0,Number(V)>>>0)):[]})},878129:(l,m,E,O,V)=>{u.kb("ReduceMin",l,{keepDims:!!m,noopWithEmptyAxes:!!E,axes:O?Array.from(i().subarray(Number(O)>>>0,Number(V)>>>0)):[]})},878303:(l,m,E,O,V)=>{u.kb("ReduceProd",l,{keepDims:!!m,noopWithEmptyAxes:!!E,axes:O?Array.from(i().subarray(Number(O)>>>0,Number(V)>>>0)):[]})},878478:(l,m,E,O,V)=>{u.kb("ReduceSum",l,{keepDims:!!m,noopWithEmptyAxes:!!E,axes:O?Array.from(i().subarray(Number(O)>>>0,Number(V)>>>0)):[]})},878652:(l,m,E,O,V)=>{u.kb("ReduceL1",l,{keepDims:!!m,noopWithEmptyAxes:!!E,axes:O?Array.from(i().subarray(Number(O)>>>0,Number(V)>>>0)):[]})},878825:(l,m,E,O,V)=>{u.kb("ReduceL2",l,{keepDims:!!m,noopWithEmptyAxes:!!E,axes:O?Array.from(i().subarray(Number(O)>>>0,Number(V)>>>0)):[]})},878998:(l,m,E,O,V)=>{u.kb("ReduceLogSum",l,{keepDims:!!m,noopWithEmptyAxes:!!E,axes:O?Array.from(i().subarray(Number(O)>>>0,Number(V)>>>0)):[]})},879175:(l,m,E,O,V)=>{u.kb("ReduceSumSquare",l,{keepDims:!!m,noopWithEmptyAxes:!!E,axes:O?Array.from(i().subarray(Number(O)>>>0,Number(V)>>>0)):[]})},879355:(l,m,E,O,V)=>{u.kb("ReduceLogSumExp",l,{keepDims:!!m,noopWithEmptyAxes:!!E,axes:O?Array.from(i().subarray(Number(O)>>>0,Number(V)>>>0)):[]})},879535:l=>{u.kb("Where",l,void 0)},879588:(l,m,E)=>{u.kb("Transpose",l,{perm:m?Array.from(i().subarray(Number(m)>>>0,Number(E)>>>0)):[]})},879712:(l,m,E,O)=>{u.kb("DepthToSpace",l,{blocksize:m,mode:Os(E),format:O?"NHWC":"NCHW"})},879845:(l,m,E,O)=>{u.kb("DepthToSpace",l,{blocksize:m,mode:Os(E),format:O?"NHWC":"NCHW"})},879978:(l,m,E,O,V,we,Ue,Je,xt,Et,Rt,as,gs,We,os)=>{u.kb("ConvTranspose",l,{format:xt?"NHWC":"NCHW",autoPad:m,dilations:[E],group:O,kernelShape:[V],pads:[we,Ue],strides:[Je],wIsConst:()=>!!t()[Et>>>0],outputPadding:Rt?Array.from(i().subarray(Number(Rt)>>>0,Number(as)>>>0)):[],outputShape:gs?Array.from(i().subarray(Number(gs)>>>0,Number(We)>>>0)):[],activation:Os(os)})},880411:(l,m,E,O,V,we,Ue,Je,xt,Et,Rt,as,gs,We)=>{u.kb("ConvTranspose",l,{format:Je?"NHWC":"NCHW",autoPad:m,dilations:Array.from(i().subarray(Number(E)>>>0,2+(Number(E)>>>0)>>>0)),group:O,kernelShape:Array.from(i().subarray(Number(V)>>>0,2+(Number(V)>>>0)>>>0)),pads:Array.from(i().subarray(Number(we)>>>0,4+(Number(we)>>>0)>>>0)),strides:Array.from(i().subarray(Number(Ue)>>>0,2+(Number(Ue)>>>0)>>>0)),wIsConst:()=>!!t()[xt>>>0],outputPadding:Et?Array.from(i().subarray(Number(Et)>>>0,Number(Rt)>>>0)):[],outputShape:as?Array.from(i().subarray(Number(as)>>>0,Number(gs)>>>0)):[],activation:Os(We)})},881072:(l,m,E,O,V,we,Ue,Je,xt,Et,Rt,as,gs,We,os)=>{u.kb("ConvTranspose",l,{format:xt?"NHWC":"NCHW",autoPad:m,dilations:[E],group:O,kernelShape:[V],pads:[we,Ue],strides:[Je],wIsConst:()=>!!t()[Et>>>0],outputPadding:Rt?Array.from(i().subarray(Number(Rt)>>>0,Number(as)>>>0)):[],outputShape:gs?Array.from(i().subarray(Number(gs)>>>0,Number(We)>>>0)):[],activation:Os(os)})},881505:(l,m,E,O,V,we,Ue,Je,xt,Et,Rt,as,gs,We)=>{u.kb("ConvTranspose",l,{format:Je?"NHWC":"NCHW",autoPad:m,dilations:Array.from(i().subarray(Number(E)>>>0,2+(Number(E)>>>0)>>>0)),group:O,kernelShape:Array.from(i().subarray(Number(V)>>>0,2+(Number(V)>>>0)>>>0)),pads:Array.from(i().subarray(Number(we)>>>0,4+(Number(we)>>>0)>>>0)),strides:Array.from(i().subarray(Number(Ue)>>>0,2+(Number(Ue)>>>0)>>>0)),wIsConst:()=>!!t()[xt>>>0],outputPadding:Et?Array.from(i().subarray(Number(Et)>>>0,Number(Rt)>>>0)):[],outputShape:as?Array.from(i().subarray(Number(as)>>>0,Number(gs)>>>0)):[],activation:Os(We)})},882166:(l,m)=>{u.kb("GlobalAveragePool",l,{format:m?"NHWC":"NCHW"})},882257:(l,m,E,O,V,we,Ue,Je,xt,Et,Rt,as,gs,We)=>{u.kb("AveragePool",l,{format:We?"NHWC":"NCHW",auto_pad:m,ceil_mode:E,count_include_pad:O,storage_order:V,dilations:we?Array.from(i().subarray(Number(we)>>>0,Number(Ue)>>>0)):[],kernel_shape:Je?Array.from(i().subarray(Number(Je)>>>0,Number(xt)>>>0)):[],pads:Et?Array.from(i().subarray(Number(Et)>>>0,Number(Rt)>>>0)):[],strides:as?Array.from(i().subarray(Number(as)>>>0,Number(gs)>>>0)):[]})},882736:(l,m)=>{u.kb("GlobalAveragePool",l,{format:m?"NHWC":"NCHW"})},882827:(l,m,E,O,V,we,Ue,Je,xt,Et,Rt,as,gs,We)=>{u.kb("AveragePool",l,{format:We?"NHWC":"NCHW",auto_pad:m,ceil_mode:E,count_include_pad:O,storage_order:V,dilations:we?Array.from(i().subarray(Number(we)>>>0,Number(Ue)>>>0)):[],kernel_shape:Je?Array.from(i().subarray(Number(Je)>>>0,Number(xt)>>>0)):[],pads:Et?Array.from(i().subarray(Number(Et)>>>0,Number(Rt)>>>0)):[],strides:as?Array.from(i().subarray(Number(as)>>>0,Number(gs)>>>0)):[]})},883306:(l,m)=>{u.kb("GlobalMaxPool",l,{format:m?"NHWC":"NCHW"})},883393:(l,m,E,O,V,we,Ue,Je,xt,Et,Rt,as,gs,We)=>{u.kb("MaxPool",l,{format:We?"NHWC":"NCHW",auto_pad:m,ceil_mode:E,count_include_pad:O,storage_order:V,dilations:we?Array.from(i().subarray(Number(we)>>>0,Number(Ue)>>>0)):[],kernel_shape:Je?Array.from(i().subarray(Number(Je)>>>0,Number(xt)>>>0)):[],pads:Et?Array.from(i().subarray(Number(Et)>>>0,Number(Rt)>>>0)):[],strides:as?Array.from(i().subarray(Number(as)>>>0,Number(gs)>>>0)):[]})},883868:(l,m)=>{u.kb("GlobalMaxPool",l,{format:m?"NHWC":"NCHW"})},883955:(l,m,E,O,V,we,Ue,Je,xt,Et,Rt,as,gs,We)=>{u.kb("MaxPool",l,{format:We?"NHWC":"NCHW",auto_pad:m,ceil_mode:E,count_include_pad:O,storage_order:V,dilations:we?Array.from(i().subarray(Number(we)>>>0,Number(Ue)>>>0)):[],kernel_shape:Je?Array.from(i().subarray(Number(Je)>>>0,Number(xt)>>>0)):[],pads:Et?Array.from(i().subarray(Number(Et)>>>0,Number(Rt)>>>0)):[],strides:as?Array.from(i().subarray(Number(as)>>>0,Number(gs)>>>0)):[]})},884430:(l,m,E,O,V)=>{u.kb("Gemm",l,{alpha:m,beta:E,transA:O,transB:V})},884534:l=>{u.kb("MatMul",l,void 0)},884588:(l,m,E,O)=>{u.kb("ArgMax",l,{keepDims:!!m,selectLastIndex:!!E,axis:O})},884696:(l,m,E,O)=>{u.kb("ArgMin",l,{keepDims:!!m,selectLastIndex:!!E,axis:O})},884804:(l,m)=>{u.kb("Softmax",l,{axis:m})},884867:(l,m)=>{u.kb("Concat",l,{axis:m})},884927:(l,m,E,O,V)=>{u.kb("Split",l,{axis:m,numOutputs:E,splitSizes:O?Array.from(i().subarray(Number(O)>>>0,Number(V)>>>0)):[]})},885083:l=>{u.kb("Expand",l,void 0)},885137:(l,m)=>{u.kb("Gather",l,{axis:Number(m)})},885208:(l,m)=>{u.kb("GatherElements",l,{axis:Number(m)})},885287:(l,m)=>{u.kb("GatherND",l,{batch_dims:Number(m)})},885366:(l,m,E,O,V,we,Ue,Je,xt,Et,Rt)=>{u.kb("Resize",l,{antialias:m,axes:E?Array.from(i().subarray(Number(E)>>>0,Number(O)>>>0)):[],coordinateTransformMode:Os(V),cubicCoeffA:we,excludeOutside:Ue,extrapolationValue:Je,keepAspectRatioPolicy:Os(xt),mode:Os(Et),nearestMode:Os(Rt)})},885728:(l,m,E,O,V,we,Ue)=>{u.kb("Slice",l,{starts:m?Array.from(i().subarray(Number(m)>>>0,Number(E)>>>0)):[],ends:O?Array.from(i().subarray(Number(O)>>>0,Number(V)>>>0)):[],axes:we?Array.from(i().subarray(Number(we)>>>0,Number(Ue)>>>0)):[]})},885992:l=>{u.kb("Tile",l,void 0)},886044:(l,m,E)=>{u.kb("InstanceNormalization",l,{epsilon:m,format:E?"NHWC":"NCHW"})},886158:(l,m,E)=>{u.kb("InstanceNormalization",l,{epsilon:m,format:E?"NHWC":"NCHW"})},886272:l=>{u.kb("Range",l,void 0)},886325:(l,m)=>{u.kb("Einsum",l,{equation:Os(m)})},886406:(l,m,E,O,V)=>{u.kb("Pad",l,{mode:m,value:E,pads:O?Array.from(i().subarray(Number(O)>>>0,Number(V)>>>0)):[]})},886549:(l,m,E,O,V,we)=>{u.kb("BatchNormalization",l,{epsilon:m,momentum:E,spatial:!!V,trainingMode:!!O,format:we?"NHWC":"NCHW"})},886718:(l,m,E,O,V,we)=>{u.kb("BatchNormalization",l,{epsilon:m,momentum:E,spatial:!!V,trainingMode:!!O,format:we?"NHWC":"NCHW"})},886887:(l,m,E)=>{u.kb("CumSum",l,{exclusive:Number(m),reverse:Number(E)})},886984:(l,m,E)=>{u.kb("DequantizeLinear",l,{axis:m,blockSize:E})},887074:(l,m,E,O,V)=>{u.kb("GridSample",l,{align_corners:m,mode:Os(E),padding_mode:Os(O),format:V?"NHWC":"NCHW"})},887244:(l,m,E,O,V)=>{u.kb("GridSample",l,{align_corners:m,mode:Os(E),padding_mode:Os(O),format:V?"NHWC":"NCHW"})},887414:(l,m)=>{u.kb("ScatterND",l,{reduction:Os(m)})},887499:(l,m,E,O,V,we,Ue,Je,xt)=>{u.kb("Attention",l,{numHeads:m,isUnidirectional:E,maskFilterValue:O,scale:V,doRotary:we,qkvHiddenSizes:Ue?Array.from(i().subarray(Number(Je)>>>0,Number(Je)+Ue>>>0)):[],pastPresentShareBuffer:!!xt})},887771:l=>{u.kb("BiasAdd",l,void 0)},887826:l=>{u.kb("BiasSplitGelu",l,void 0)},887887:l=>{u.kb("FastGelu",l,void 0)},887943:(l,m,E,O,V,we,Ue,Je,xt,Et,Rt,as,gs,We,os,Ds)=>{u.kb("Conv",l,{format:as?"NHWC":"NCHW",auto_pad:m,dilations:E?Array.from(i().subarray(Number(E)>>>0,Number(O)>>>0)):[],group:V,kernel_shape:we?Array.from(i().subarray(Number(we)>>>0,Number(Ue)>>>0)):[],pads:Je?Array.from(i().subarray(Number(Je)>>>0,Number(xt)>>>0)):[],strides:Et?Array.from(i().subarray(Number(Et)>>>0,Number(Rt)>>>0)):[],w_is_const:()=>!!t()[Number(gs)>>>0],activation:Os(We),activation_params:os?Array.from(c().subarray(Number(os)>>>0,Number(Ds)>>>0)):[]})},888527:l=>{u.kb("Gelu",l,void 0)},888579:(l,m,E,O,V,we,Ue,Je,xt)=>{u.kb("GroupQueryAttention",l,{numHeads:m,kvNumHeads:E,scale:O,softcap:V,doRotary:we,rotaryInterleaved:Ue,smoothSoftmax:Je,localWindowSize:xt})},888796:(l,m,E,O)=>{u.kb("LayerNormalization",l,{axis:m,epsilon:E,simplified:!!O})},888907:(l,m,E,O)=>{u.kb("LayerNormalization",l,{axis:m,epsilon:E,simplified:!!O})},889018:(l,m,E,O,V,we)=>{u.kb("MatMulNBits",l,{k:m,n:E,accuracyLevel:O,bits:V,blockSize:we})},889145:(l,m,E,O,V,we)=>{u.kb("MultiHeadAttention",l,{numHeads:m,isUnidirectional:E,maskFilterValue:O,scale:V,doRotary:we})},889304:(l,m)=>{u.kb("QuickGelu",l,{alpha:m})},889368:(l,m,E,O,V)=>{u.kb("RotaryEmbedding",l,{interleaved:!!m,numHeads:E,rotaryEmbeddingDim:O,scale:V})},889507:(l,m,E)=>{u.kb("SkipLayerNormalization",l,{epsilon:m,simplified:!!E})},889609:(l,m,E)=>{u.kb("SkipLayerNormalization",l,{epsilon:m,simplified:!!E})},889711:(l,m,E,O)=>{u.kb("GatherBlockQuantized",l,{gatherAxis:m,quantizeAxis:E,blockSize:O})},889832:l=>{u.$b(l)},889866:(l,m)=>u.cc(Number(l),Number(m),u.Gb.hc,u.Gb.errors)};function r_(l,m,E){return cm(async()=>{await u.Yb(Number(l),Number(m),Number(E))})}function n_(){return typeof wasmOffsetConverter<"u"}function Gp(l){this.name="ExitStatus",this.message=`Program terminated with exit(${l})`,this.status=l}var Kp=l=>{l.terminate(),l.onmessage=()=>{}},Ih=l=>{Hn.length==0&&(Bh(),zh(Hn[0]));var m=Hn.pop();if(!m)return 6;Fo.push(m),nn[l.Bb]=m,m.Bb=l.Bb;var E={cmd:"run",start_routine:l.ic,arg:l.Rb,pthread_ptr:l.Bb};return m.postMessage(E,l.nc),0},Io=0,As=(l,m,...E)=>{for(var O=2*E.length,V=dh(),we=uh(8*O),Ue=we>>>3,Je=0;Je<E.length;Je++){var xt=E[Je];typeof xt=="bigint"?(Ts[Ue+2*Je]=1n,Ts[Ue+2*Je+1]=xt):(Ts[Ue+2*Je]=0n,p()[Ue+2*Je+1>>>0]=xt)}return l=Dm(l,0,O,we,m),Cp(V),l};function Hp(l){if(L)return As(0,1,l);if(ss=l,!(0<Io)){for(var m of Fo)Kp(m);for(m of Hn)Kp(m);Hn=[],Fo=[],nn=[],Cs=!0}ze(l,new Gp(l))}function Fh(l){if(L)return As(1,0,l);qp(l)}var qp=l=>{if(ss=l,L)throw Fh(l),"unwind";Hp(l)},Hn=[],Fo=[],Oh=[],nn={},Dh=l=>{var m=l.Bb;delete nn[m],Hn.push(l),Fo.splice(Fo.indexOf(l),1),l.Bb=0,lh(m)};function Lh(){Oh.forEach(l=>l())}var zh=l=>new Promise(m=>{l.onmessage=V=>{var we=(V=V.data).cmd;if(V.targetThread&&V.targetThread!=pa()){var Ue=nn[V.targetThread];Ue?Ue.postMessage(V,V.transferList):$t(`Internal error! Worker sent a message "${we}" to target pthread ${V.targetThread}, but that thread no longer exists!`)}else we==="checkMailbox"?fp():we==="spawnThread"?Ih(V):we==="cleanupThread"?Dh(nn[V.thread]):we==="killThread"?(V=V.thread,we=nn[V],delete nn[V],Kp(we),lh(V),Fo.splice(Fo.indexOf(we),1),we.Bb=0):we==="cancelThread"?nn[V.thread].postMessage({cmd:"cancel"}):we==="loaded"?(l.loaded=!0,m(l)):we==="alert"?alert(`Thread ${V.threadId}: ${V.text}`):V.target==="setimmediate"?l.postMessage(V):we==="callHandler"?u[V.handler](...V.args):we&&$t(`worker sent an unknown command ${we}`)},l.onerror=V=>{throw $t(`worker sent an error! ${V.filename}:${V.lineno}: ${V.message}`),V};var E,O=[];for(E of[])u.hasOwnProperty(E)&&O.push(E);l.postMessage({cmd:"load",handlers:O,wasmMemory:jt,wasmModule:Ot})});function Bh(){var l=new Worker(new URL(import.meta.url),{type:"module",workerData:"em-pthread",name:"em-pthread"});Hn.push(l)}var _p=l=>{for(;0<l.length;)l.shift()(u)},o_=()=>{var l=pa(),m=a()[l+52>>>2>>>0];l=a()[l+56>>>2>>>0],zm(m,m-l),Cp(m)},i_=(l,m)=>{Io=0,l=Bm(l,m),0<Io?ss=l:Ep(l)};class a_{constructor(m){this.Kb=m-24}}function l_(l,m,E){var O=new a_(l>>>=0);throw m>>>=0,E>>>=0,a()[O.Kb+16>>>2>>>0]=0,a()[O.Kb+4>>>2>>>0]=m,a()[O.Kb+8>>>2>>>0]=E,l}function Rh(l,m,E,O){return L?As(2,1,l,m,E,O):Nh(l,m,E,O)}function Nh(l,m,E,O){if(l>>>=0,m>>>=0,E>>>=0,O>>>=0,se===void 0)return $t("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var V=[];return L&&V.length===0?Rh(l,m,E,O):(l={ic:E,Bb:l,Rb:O,nc:V},L?(l.Nb="spawnThread",postMessage(l,V),0):Ih(l))}var jh=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Wh=(l,m,E)=>{var O=(m>>>=0)+E;for(E=m;l[E]&&!(E>=O);)++E;if(16<E-m&&l.buffer&&jh)return jh.decode(l.buffer instanceof se?l.slice(m,E):l.subarray(m,E));for(O="";m<E;){var V=l[m++];if(128&V){var we=63&l[m++];if((224&V)==192)O+=String.fromCharCode((31&V)<<6|we);else{var Ue=63&l[m++];65536>(V=(240&V)==224?(15&V)<<12|we<<6|Ue:(7&V)<<18|we<<12|Ue<<6|63&l[m++])?O+=String.fromCharCode(V):(V-=65536,O+=String.fromCharCode(55296|V>>10,56320|1023&V))}}else O+=String.fromCharCode(V)}return O},Os=(l,m)=>(l>>>=0)?Wh(s(),l,m):"";function Uh(l,m,E){return L?As(3,1,l,m,E):0}function Vh(l,m){if(L)return As(4,1,l,m)}var Xp=l=>{for(var m=0,E=0;E<l.length;++E){var O=l.charCodeAt(E);127>=O?m++:2047>=O?m+=2:55296<=O&&57343>=O?(m+=4,++E):m+=3}return m},Gh=(l,m,E,O)=>{if(!(0<O))return 0;var V=E>>>=0;O=E+O-1;for(var we=0;we<l.length;++we){var Ue=l.charCodeAt(we);if(55296<=Ue&&57343>=Ue&&(Ue=65536+((1023&Ue)<<10)|1023&l.charCodeAt(++we)),127>=Ue){if(E>=O)break;m[E++>>>0]=Ue}else{if(2047>=Ue){if(E+1>=O)break;m[E++>>>0]=192|Ue>>6}else{if(65535>=Ue){if(E+2>=O)break;m[E++>>>0]=224|Ue>>12}else{if(E+3>=O)break;m[E++>>>0]=240|Ue>>18,m[E++>>>0]=128|Ue>>12&63}m[E++>>>0]=128|Ue>>6&63}m[E++>>>0]=128|63&Ue}}return m[E>>>0]=0,E-V},da=(l,m,E)=>Gh(l,s(),m,E);function Kh(l,m){if(L)return As(5,1,l,m)}function Hh(l,m,E){if(L)return As(6,1,l,m,E)}function qh(l,m,E){return L?As(7,1,l,m,E):0}function Xh(l,m){if(L)return As(8,1,l,m)}function Qh(l,m,E){if(L)return As(9,1,l,m,E)}function Yh(l,m,E,O){if(L)return As(10,1,l,m,E,O)}function Jh(l,m,E,O){if(L)return As(11,1,l,m,E,O)}function Zh(l,m,E,O){if(L)return As(12,1,l,m,E,O)}function em(l){if(L)return As(13,1,l)}function tm(l,m){if(L)return As(14,1,l,m)}function sm(l,m,E){if(L)return As(15,1,l,m,E)}var rm,qn,u_=()=>{Kn("")},on=l=>{for(var m="";s()[l>>>0];)m+=rm[s()[l++>>>0]];return m},Qp={},Yp={};function bn(l,m,E={}){if(!("argPackAdvance"in m))throw new TypeError("registerType registeredInstance requires argPackAdvance");return function(O,V,we={}){var Ue=V.name;if(!O)throw new qn(`type "${Ue}" must have a positive integer typeid pointer`);if(Yp.hasOwnProperty(O)){if(we.Tb)return;throw new qn(`Cannot register type '${Ue}' twice`)}Yp[O]=V,Qp.hasOwnProperty(O)&&(V=Qp[O],delete Qp[O],V.forEach(Je=>Je()))}(l,m,E)}var nm=(l,m,E)=>{switch(m){case 1:return E?O=>t()[O>>>0]:O=>s()[O>>>0];case 2:return E?O=>n()[O>>>1>>>0]:O=>o()[O>>>1>>>0];case 4:return E?O=>i()[O>>>2>>>0]:O=>a()[O>>>2>>>0];case 8:return E?O=>Ts[O>>>3]:O=>Mn[O>>>3];default:throw new TypeError(`invalid integer width (${m}): ${l}`)}};function d_(l,m,E){E>>>=0,bn(l>>>=0,{name:m=on(m>>>0),fromWireType:O=>O,toWireType:function(O,V){if(typeof V!="bigint"&&typeof V!="number")throw V=V===null?"null":(O=typeof V)=="object"||O==="array"||O==="function"?V.toString():""+V,new TypeError(`Cannot convert "${V}" to ${this.name}`);return typeof V=="number"&&(V=BigInt(V)),V},argPackAdvance:Xn,readValueFromPointer:nm(m,E,m.indexOf("u")==-1),Eb:null})}var Xn=8;function c_(l,m,E,O){bn(l>>>=0,{name:m=on(m>>>0),fromWireType:function(V){return!!V},toWireType:function(V,we){return we?E:O},argPackAdvance:Xn,readValueFromPointer:function(V){return this.fromWireType(s()[V>>>0])},Eb:null})}var Jp=[],vn=[];function Zp(l){9<(l>>>=0)&&--vn[l+1]==0&&(vn[l]=void 0,Jp.push(l))}var vr=l=>{if(!l)throw new qn("Cannot use deleted val. handle = "+l);return vn[l]},Ir=l=>{switch(l){case void 0:return 2;case null:return 4;case!0:return 6;case!1:return 8;default:let m=Jp.pop()||vn.length;return vn[m]=l,vn[m+1]=1,m}};function eh(l){return this.fromWireType(a()[l>>>2>>>0])}var p_={name:"emscripten::val",fromWireType:l=>{var m=vr(l);return Zp(l),m},toWireType:(l,m)=>Ir(m),argPackAdvance:Xn,readValueFromPointer:eh,Eb:null};function h_(l){return bn(l>>>0,p_)}var m_=(l,m)=>{switch(m){case 4:return function(E){return this.fromWireType(c()[E>>>2>>>0])};case 8:return function(E){return this.fromWireType(p()[E>>>3>>>0])};default:throw new TypeError(`invalid float width (${m}): ${l}`)}};function __(l,m,E){E>>>=0,bn(l>>>=0,{name:m=on(m>>>0),fromWireType:O=>O,toWireType:(O,V)=>V,argPackAdvance:Xn,readValueFromPointer:m_(m,E),Eb:null})}function f_(l,m,E,O,V){if(l>>>=0,E>>>=0,m=on(m>>>0),V===-1&&(V=4294967295),V=Je=>Je,O===0){var we=32-8*E;V=Je=>Je<<we>>>we}var Ue=m.includes("unsigned")?function(Je,xt){return xt>>>0}:function(Je,xt){return xt};bn(l,{name:m,fromWireType:V,toWireType:Ue,argPackAdvance:Xn,readValueFromPointer:nm(m,E,O!==0),Eb:null})}function g_(l,m,E){function O(we){var Ue=a()[we>>>2>>>0];return we=a()[we+4>>>2>>>0],new V(t().buffer,we,Ue)}var V=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][m];bn(l>>>=0,{name:E=on(E>>>0),fromWireType:O,argPackAdvance:Xn,readValueFromPointer:O},{Tb:!0})}function w_(l,m){l>>>=0;var E=(m=on(m>>>0))==="std::string";bn(l,{name:m,fromWireType:function(O){var V=a()[O>>>2>>>0],we=O+4;if(E)for(var Ue=we,Je=0;Je<=V;++Je){var xt=we+Je;if(Je==V||s()[xt>>>0]==0){if(Ue=Os(Ue,xt-Ue),Et===void 0)var Et=Ue;else Et+="\0",Et+=Ue;Ue=xt+1}}else{for(Et=Array(V),Je=0;Je<V;++Je)Et[Je]=String.fromCharCode(s()[we+Je>>>0]);Et=Et.join("")}return ln(O),Et},toWireType:function(O,V){V instanceof ArrayBuffer&&(V=new Uint8Array(V));var we=typeof V=="string";if(!(we||V instanceof Uint8Array||V instanceof Uint8ClampedArray||V instanceof Int8Array))throw new qn("Cannot pass non-string to std::string");var Ue=E&&we?Xp(V):V.length,Je=Pp(4+Ue+1),xt=Je+4;if(a()[Je>>>2>>>0]=Ue,E&&we)da(V,xt,Ue+1);else if(we)for(we=0;we<Ue;++we){var Et=V.charCodeAt(we);if(255<Et)throw ln(xt),new qn("String has UTF-16 code units that do not fit in 8 bits");s()[xt+we>>>0]=Et}else for(we=0;we<Ue;++we)s()[xt+we>>>0]=V[we];return O!==null&&O.push(ln,Je),Je},argPackAdvance:Xn,readValueFromPointer:eh,Eb(O){ln(O)}})}var om=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,y_=(l,m)=>{for(var E=l>>1,O=E+m/2;!(E>=O)&&o()[E>>>0];)++E;if(32<(E<<=1)-l&&om)return om.decode(s().slice(l,E));for(E="",O=0;!(O>=m/2);++O){var V=n()[l+2*O>>>1>>>0];if(V==0)break;E+=String.fromCharCode(V)}return E},M_=(l,m,E)=>{if(E??=2147483647,2>E)return 0;var O=m;E=(E-=2)<2*l.length?E/2:l.length;for(var V=0;V<E;++V){var we=l.charCodeAt(V);n()[m>>>1>>>0]=we,m+=2}return n()[m>>>1>>>0]=0,m-O},b_=l=>2*l.length,v_=(l,m)=>{for(var E=0,O="";!(E>=m/4);){var V=i()[l+4*E>>>2>>>0];if(V==0)break;++E,65536<=V?(V-=65536,O+=String.fromCharCode(55296|V>>10,56320|1023&V)):O+=String.fromCharCode(V)}return O},T_=(l,m,E)=>{if(m>>>=0,E??=2147483647,4>E)return 0;var O=m;E=O+E-4;for(var V=0;V<l.length;++V){var we=l.charCodeAt(V);if(55296<=we&&57343>=we&&(we=65536+((1023&we)<<10)|1023&l.charCodeAt(++V)),i()[m>>>2>>>0]=we,(m+=4)+4>E)break}return i()[m>>>2>>>0]=0,m-O},x_=l=>{for(var m=0,E=0;E<l.length;++E){var O=l.charCodeAt(E);55296<=O&&57343>=O&&++E,m+=4}return m};function P_(l,m,E){if(l>>>=0,m>>>=0,E=on(E>>>=0),m===2)var O=y_,V=M_,we=b_,Ue=Je=>o()[Je>>>1>>>0];else m===4&&(O=v_,V=T_,we=x_,Ue=Je=>a()[Je>>>2>>>0]);bn(l,{name:E,fromWireType:Je=>{for(var xt,Et=a()[Je>>>2>>>0],Rt=Je+4,as=0;as<=Et;++as){var gs=Je+4+as*m;as!=Et&&Ue(gs)!=0||(Rt=O(Rt,gs-Rt),xt===void 0?xt=Rt:(xt+="\0",xt+=Rt),Rt=gs+m)}return ln(Je),xt},toWireType:(Je,xt)=>{if(typeof xt!="string")throw new qn(`Cannot pass non-string to C++ string type ${E}`);var Et=we(xt),Rt=Pp(4+Et+m);return a()[Rt>>>2>>>0]=Et/m,V(xt,Rt+4,Et+m),Je!==null&&Je.push(ln,Rt),Rt},argPackAdvance:Xn,readValueFromPointer:eh,Eb(Je){ln(Je)}})}function E_(l,m){bn(l>>>=0,{Ub:!0,name:m=on(m>>>0),argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})}var C_=()=>1;function k_(l){ah(l>>>0,!N,1,!R,131072,!1),Lh()}var im=l=>{if(!Cs)try{if(l(),!(0<Io))try{L?Ep(ss):qp(ss)}catch(m){m instanceof Gp||m=="unwind"||ze(1,m)}}catch(m){m instanceof Gp||m=="unwind"||ze(1,m)}};function th(l){l>>>=0,typeof Atomics.oc=="function"&&(Atomics.oc(i(),l>>>2,l).value.then(fp),l+=128,Atomics.store(i(),l>>>2,1))}var fp=()=>{var l=pa();l&&(th(l),im(Lm))};function S_(l,m){(l>>>=0)==m>>>0?setTimeout(fp):L?postMessage({targetThread:l,cmd:"checkMailbox"}):(l=nn[l])&&l.postMessage({cmd:"checkMailbox"})}var sh=[];function $_(l,m,E,O,V){for(m>>>=0,O/=2,sh.length=O,E=V>>>0>>>3,V=0;V<O;V++)sh[V]=Ts[E+2*V]?Ts[E+2*V+1]:p()[E+2*V+1>>>0];return(m?Vp[m]:bf[l])(...sh)}function A_(l){l>>>=0,L?postMessage({cmd:"cleanupThread",thread:l}):Dh(nn[l])}function I_(l){}var gp=(l,m)=>{var E=Yp[l];if(E===void 0)throw l=Im(l),E=on(l),ln(l),new qn(`${m} has unknown type ${E}`);return E},am=(l,m,E)=>{var O=[];return l=l.toWireType(O,E),O.length&&(a()[m>>>2>>>0]=Ir(O)),l};function F_(l,m,E){return m>>>=0,E>>>=0,l=vr(l>>>0),m=gp(m,"emval::as"),am(m,E,l)}function O_(l,m){return m>>>=0,l=vr(l>>>0),(m=gp(m,"emval::as")).toWireType(null,l)}var wp=l=>{try{l()}catch(m){Kn(m)}},Qn=0,an=null,lm=0,yp=[],um={},dm={},D_=0,rh=null,L_=[];function cm(l){return function(m){if(!Cs){if(Qn===0){var E=!1,O=!1;m((V=0)=>{if(!Cs&&(lm=V,E=!0,O)){Qn=2,wp(()=>jm(an)),typeof Browser<"u"&&Browser.Lb.Sb&&Browser.Lb.resume(),V=!1;try{var we=function(){var xt=i()[an+8>>>2>>>0];return xt=zt[dm[xt]],--Io,xt()}()}catch(xt){we=xt,V=!0}var Ue=!1;if(!an){var Je=rh;Je&&(rh=null,(V?Je.reject:Je.resolve)(we),Ue=!0)}if(V&&!Ue)throw we}}),O=!0,E||(Qn=1,an=function(){var V=Pp(65548),we=V+12;a()[V>>>2>>>0]=we,a()[V+4>>>2>>>0]=we+65536,we=yp[0];var Ue=um[we];return Ue===void 0&&(Ue=D_++,um[we]=Ue,dm[Ue]=we),we=Ue,i()[V+8>>>2>>>0]=we,V}(),typeof Browser<"u"&&Browser.Lb.Sb&&Browser.Lb.pause(),wp(()=>Rm(an)))}else Qn===2?(Qn=0,wp(Wm),ln(an),an=null,L_.forEach(im)):Kn(`invalid state: ${Qn}`);return lm}}(m=>{l().then(m)})}function z_(l){return l>>>=0,cm(()=>(l=vr(l)).then(Ir))}var Mp=[];function B_(l,m,E,O){return E>>>=0,O>>>=0,(l=Mp[l>>>0])(null,m=vr(m>>>0),E,O)}var R_={},bp=l=>{var m=R_[l];return m===void 0?on(l):m};function N_(l,m,E,O,V){return E>>>=0,O>>>=0,V>>>=0,(l=Mp[l>>>0])(m=vr(m>>>0),m[E=bp(E)],O,V)}var pm=()=>typeof globalThis=="object"?globalThis:Function("return this")();function j_(l){return(l>>>=0)==0?Ir(pm()):(l=bp(l),Ir(pm()[l]))}var W_=l=>{var m=Mp.length;return Mp.push(l),m},U_=(l,m)=>{for(var E=Array(l),O=0;O<l;++O)E[O]=gp(a()[m+4*O>>>2>>>0],"parameter "+O);return E},hm=(l,m)=>Object.defineProperty(m,"name",{value:l});function V_(l,m,E){var O=(m=U_(l,m>>>0)).shift();l--;var V=`return function (obj, func, destructorsRef, args) {
`,we=0,Ue=[];E===0&&Ue.push("obj");for(var Je=["retType"],xt=[O],Et=0;Et<l;++Et)Ue.push("arg"+Et),Je.push("argType"+Et),xt.push(m[Et]),V+=`  var arg${Et} = argType${Et}.readValueFromPointer(args${we?"+"+we:""});
`,we+=m[Et].argPackAdvance;return V+=`  var rv = ${E===1?"new func":"func.call"}(${Ue.join(", ")});
`,O.Ub||(Je.push("emval_returnValue"),xt.push(am),V+=`  return emval_returnValue(retType, destructorsRef, rv);
`),Je.push(V+`};
`),l=function(Rt){var as=Function;if(!(as instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof as} which is not a function`);var gs=hm(as.name||"unknownFunctionName",function(){});return gs.prototype=as.prototype,gs=new gs,(Rt=as.apply(gs,Rt))instanceof Object?Rt:gs}(Je)(...xt),E=`methodCaller<(${m.map(Rt=>Rt.name).join(", ")}) => ${O.name}>`,W_(hm(E,l))}function G_(l){return l=bp(l>>>0),Ir(u[l])}function K_(l,m){return m>>>=0,l=vr(l>>>0),m=vr(m),Ir(l[m])}function H_(l){9<(l>>>=0)&&(vn[l+1]+=1)}function q_(){return Ir([])}function X_(l){l=vr(l>>>0);for(var m=Array(l.length),E=0;E<l.length;E++)m[E]=l[E];return Ir(m)}function Q_(l){return Ir(bp(l>>>0))}function Y_(){return Ir({})}function J_(l){for(var m=vr(l>>>=0);m.length;){var E=m.pop();m.pop()(E)}Zp(l)}function Z_(l,m,E){m>>>=0,E>>>=0,l=vr(l>>>0),m=vr(m),E=vr(E),l[m]=E}function ef(l,m){return m>>>=0,l=(l=gp(l>>>0,"_emval_take_value")).readValueFromPointer(m),Ir(l)}function tf(l,m){l=-9007199254740992>l||9007199254740992<l?NaN:Number(l),m>>>=0,l=new Date(1e3*l),i()[m>>>2>>>0]=l.getUTCSeconds(),i()[m+4>>>2>>>0]=l.getUTCMinutes(),i()[m+8>>>2>>>0]=l.getUTCHours(),i()[m+12>>>2>>>0]=l.getUTCDate(),i()[m+16>>>2>>>0]=l.getUTCMonth(),i()[m+20>>>2>>>0]=l.getUTCFullYear()-1900,i()[m+24>>>2>>>0]=l.getUTCDay(),l=(l.getTime()-Date.UTC(l.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,i()[m+28>>>2>>>0]=l}var ca=l=>l%4==0&&(l%100!=0||l%400==0),mm=[0,31,60,91,121,152,182,213,244,274,305,335],_m=[0,31,59,90,120,151,181,212,243,273,304,334];function sf(l,m){l=-9007199254740992>l||9007199254740992<l?NaN:Number(l),m>>>=0,l=new Date(1e3*l),i()[m>>>2>>>0]=l.getSeconds(),i()[m+4>>>2>>>0]=l.getMinutes(),i()[m+8>>>2>>>0]=l.getHours(),i()[m+12>>>2>>>0]=l.getDate(),i()[m+16>>>2>>>0]=l.getMonth(),i()[m+20>>>2>>>0]=l.getFullYear()-1900,i()[m+24>>>2>>>0]=l.getDay();var E=(ca(l.getFullYear())?mm:_m)[l.getMonth()]+l.getDate()-1|0;i()[m+28>>>2>>>0]=E,i()[m+36>>>2>>>0]=-60*l.getTimezoneOffset(),E=new Date(l.getFullYear(),6,1).getTimezoneOffset();var O=new Date(l.getFullYear(),0,1).getTimezoneOffset();l=0|(E!=O&&l.getTimezoneOffset()==Math.min(O,E)),i()[m+32>>>2>>>0]=l}function rf(l){l>>>=0;var m=new Date(i()[l+20>>>2>>>0]+1900,i()[l+16>>>2>>>0],i()[l+12>>>2>>>0],i()[l+8>>>2>>>0],i()[l+4>>>2>>>0],i()[l>>>2>>>0],0),E=i()[l+32>>>2>>>0],O=m.getTimezoneOffset(),V=new Date(m.getFullYear(),6,1).getTimezoneOffset(),we=new Date(m.getFullYear(),0,1).getTimezoneOffset(),Ue=Math.min(we,V);return 0>E?i()[l+32>>>2>>>0]=+(V!=we&&Ue==O):0<E!=(Ue==O)&&(V=Math.max(we,V),m.setTime(m.getTime()+6e4*((0<E?Ue:V)-O))),i()[l+24>>>2>>>0]=m.getDay(),E=(ca(m.getFullYear())?mm:_m)[m.getMonth()]+m.getDate()-1|0,i()[l+28>>>2>>>0]=E,i()[l>>>2>>>0]=m.getSeconds(),i()[l+4>>>2>>>0]=m.getMinutes(),i()[l+8>>>2>>>0]=m.getHours(),i()[l+12>>>2>>>0]=m.getDate(),i()[l+16>>>2>>>0]=m.getMonth(),i()[l+20>>>2>>>0]=m.getYear(),l=m.getTime(),BigInt(isNaN(l)?-1:l/1e3)}function fm(l,m,E,O,V,we,Ue){return L?As(16,1,l,m,E,O,V,we,Ue):-52}function gm(l,m,E,O,V,we){if(L)return As(17,1,l,m,E,O,V,we)}function nf(l,m,E,O){l>>>=0,m>>>=0,E>>>=0,O>>>=0;var V=new Date().getFullYear(),we=new Date(V,0,1),Ue=new Date(V,6,1);V=we.getTimezoneOffset();var Je=Ue.getTimezoneOffset(),xt=Math.max(V,Je);a()[l>>>2>>>0]=60*xt,i()[m>>>2>>>0]=+(V!=Je),we=(l=Et=>Et.toLocaleTimeString(void 0,{hour12:!1,timeZoneName:"short"}).split(" ")[1])(we),Ue=l(Ue),Je<V?(da(we,E,17),da(Ue,O,17)):(da(we,O,17),da(Ue,E,17))}var nh=[],wm=(l,m)=>{nh.length=0;for(var E;E=s()[l++>>>0];){var O=E!=105;m+=(O&=E!=112)&&m%8?4:0,nh.push(E==112?a()[m>>>2>>>0]:E==106?Ts[m>>>3]:E==105?i()[m>>>2>>>0]:p()[m>>>3>>>0]),m+=O?8:4}return nh};function of(l,m,E){return l>>>=0,m=wm(m>>>0,E>>>0),Vp[l](...m)}function af(l,m,E){return l>>>=0,m=wm(m>>>0,E>>>0),Vp[l](...m)}var lf=()=>{},uf=()=>Date.now();function df(l,m){return $t(Os(l>>>0,m>>>0))}var ym,cf=()=>{throw Io+=1,"unwind"};function pf(){return 4294901760}ym=()=>performance.timeOrigin+performance.now();var hf=()=>navigator.hardwareConcurrency;function mf(){return Kn("Cannot use emscripten_pc_get_function without -sUSE_OFFSET_CONVERTER"),0}function _f(l){l>>>=0;var m=s().length;if(l<=m||4294901760<l)return!1;for(var E=1;4>=E;E*=2){var O=m*(1+.2/E);O=Math.min(O,l+100663296);var V=Math;O=Math.max(l,O);e:{V=(V.min.call(V,4294901760,O+(65536-O%65536)%65536)-jt.buffer.byteLength+65535)/65536;try{jt.grow(V),Js();var we=1;break e}catch{}we=void 0}if(we)return!0}return!1}var vp=()=>(Kn("Cannot use convertFrameToPC (needed by __builtin_return_address) without -sUSE_OFFSET_CONVERTER"),0),ec={},Mm=l=>{l.forEach(m=>{vp()})};function ff(){var l=Error().stack.toString().split(`
`);return l[0]=="Error"&&l.shift(),Mm(l),ec.Qb=vp(),ec.fc=l,ec.Qb}function gf(l,m,E){if(l>>>=0,m>>>=0,ec.Qb==l)var O=ec.fc;else(O=Error().stack.toString().split(`
`))[0]=="Error"&&O.shift(),Mm(O);for(var V=3;O[V]&&vp()!=l;)++V;for(l=0;l<E&&O[l+V];++l)i()[m+4*l>>>2>>>0]=vp();return l}var oh,ih={},bm=()=>{if(!oh){var l,m={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:ye};for(l in ih)ih[l]===void 0?delete m[l]:m[l]=ih[l];var E=[];for(l in m)E.push(`${l}=${m[l]}`);oh=E}return oh};function vm(l,m){if(L)return As(18,1,l,m);l>>>=0,m>>>=0;var E=0;return bm().forEach((O,V)=>{var we=m+E;for(V=a()[l+4*V>>>2>>>0]=we,we=0;we<O.length;++we)t()[V++>>>0]=O.charCodeAt(we);t()[V>>>0]=0,E+=O.length+1}),0}function Tm(l,m){if(L)return As(19,1,l,m);l>>>=0,m>>>=0;var E=bm();a()[l>>>2>>>0]=E.length;var O=0;return E.forEach(V=>O+=V.length+1),a()[m>>>2>>>0]=O,0}function xm(l){return L?As(20,1,l):52}function Pm(l,m,E,O){return L?As(21,1,l,m,E,O):52}function Em(l,m,E,O){return L?As(22,1,l,m,E,O):70}var wf=[null,[],[]];function Cm(l,m,E,O){if(L)return As(23,1,l,m,E,O);m>>>=0,E>>>=0,O>>>=0;for(var V=0,we=0;we<E;we++){var Ue=a()[m>>>2>>>0],Je=a()[m+4>>>2>>>0];m+=8;for(var xt=0;xt<Je;xt++){var Et=s()[Ue+xt>>>0],Rt=wf[l];Et===0||Et===10?((l===1?Ft:$t)(Wh(Rt,0)),Rt.length=0):Rt.push(Et)}V+=Je}return a()[O>>>2>>>0]=V,0}var km=[31,29,31,30,31,30,31,31,30,31,30,31],Sm=[31,28,31,30,31,30,31,31,30,31,30,31],yf=(l,m)=>{t().set(l,m>>>0)};function $m(l,m,E,O){function V(We,os,Ds){for(We=typeof We=="number"?We.toString():We||"";We.length<os;)We=Ds[0]+We;return We}function we(We,os){return V(We,os,"0")}function Ue(We,os){function Ds(Vm){return 0>Vm?-1:0<Vm?1:0}var Oo;return(Oo=Ds(We.getFullYear()-os.getFullYear()))===0&&(Oo=Ds(We.getMonth()-os.getMonth()))===0&&(Oo=Ds(We.getDate()-os.getDate())),Oo}function Je(We){switch(We.getDay()){case 0:return new Date(We.getFullYear()-1,11,29);case 1:return We;case 2:return new Date(We.getFullYear(),0,3);case 3:return new Date(We.getFullYear(),0,2);case 4:return new Date(We.getFullYear(),0,1);case 5:return new Date(We.getFullYear()-1,11,31);case 6:return new Date(We.getFullYear()-1,11,30)}}function xt(We){var os=We.Cb;for(We=new Date(new Date(We.Db+1900,0,1).getTime());0<os;){var Ds=We.getMonth(),Oo=(ca(We.getFullYear())?km:Sm)[Ds];if(!(os>Oo-We.getDate())){We.setDate(We.getDate()+os);break}os-=Oo-We.getDate()+1,We.setDate(1),11>Ds?We.setMonth(Ds+1):(We.setMonth(0),We.setFullYear(We.getFullYear()+1))}return Ds=new Date(We.getFullYear()+1,0,4),os=Je(new Date(We.getFullYear(),0,4)),Ds=Je(Ds),0>=Ue(os,We)?0>=Ue(Ds,We)?We.getFullYear()+1:We.getFullYear():We.getFullYear()-1}l>>>=0,m>>>=0,E>>>=0,O>>>=0;var Et=a()[O+40>>>2>>>0];for(var Rt in O={lc:i()[O>>>2>>>0],kc:i()[O+4>>>2>>>0],Ib:i()[O+8>>>2>>>0],Mb:i()[O+12>>>2>>>0],Jb:i()[O+16>>>2>>>0],Db:i()[O+20>>>2>>>0],vb:i()[O+24>>>2>>>0],Cb:i()[O+28>>>2>>>0],sc:i()[O+32>>>2>>>0],jc:i()[O+36>>>2>>>0],mc:Et?Os(Et):""},E=Os(E),Et={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})E=E.replace(new RegExp(Rt,"g"),Et[Rt]);var as="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),gs="January February March April May June July August September October November December".split(" ");for(Rt in Et={"%a":We=>as[We.vb].substring(0,3),"%A":We=>as[We.vb],"%b":We=>gs[We.Jb].substring(0,3),"%B":We=>gs[We.Jb],"%C":We=>we((We.Db+1900)/100|0,2),"%d":We=>we(We.Mb,2),"%e":We=>V(We.Mb,2," "),"%g":We=>xt(We).toString().substring(2),"%G":xt,"%H":We=>we(We.Ib,2),"%I":We=>((We=We.Ib)==0?We=12:12<We&&(We-=12),we(We,2)),"%j":We=>{for(var os=0,Ds=0;Ds<=We.Jb-1;os+=(ca(We.Db+1900)?km:Sm)[Ds++]);return we(We.Mb+os,3)},"%m":We=>we(We.Jb+1,2),"%M":We=>we(We.kc,2),"%n":()=>`
`,"%p":We=>0<=We.Ib&&12>We.Ib?"AM":"PM","%S":We=>we(We.lc,2),"%t":()=>"	","%u":We=>We.vb||7,"%U":We=>we(Math.floor((We.Cb+7-We.vb)/7),2),"%V":We=>{var os=Math.floor((We.Cb+7-(We.vb+6)%7)/7);if(2>=(We.vb+371-We.Cb-2)%7&&os++,os)os==53&&((Ds=(We.vb+371-We.Cb)%7)==4||Ds==3&&ca(We.Db)||(os=1));else{os=52;var Ds=(We.vb+7-We.Cb-1)%7;(Ds==4||Ds==5&&ca(We.Db%400-1))&&os++}return we(os,2)},"%w":We=>We.vb,"%W":We=>we(Math.floor((We.Cb+7-(We.vb+6)%7)/7),2),"%y":We=>(We.Db+1900).toString().substring(2),"%Y":We=>We.Db+1900,"%z":We=>{var os=0<=(We=We.jc);return We=Math.abs(We)/60,(os?"+":"-")+("0000"+(We/60*100+We%60)).slice(-4)},"%Z":We=>We.mc,"%%":()=>"%"},E=E.replace(/%%/g,"\0\0"),Et)E.includes(Rt)&&(E=E.replace(new RegExp(Rt,"g"),Et[Rt](O)));return Rt=function(We){var os=Array(Xp(We)+1);return Gh(We,os,0,os.length),os}(E=E.replace(/\0\0/g,"%")),Rt.length>m?0:(yf(Rt,l),Rt.length-1)}function Mf(l,m,E,O){return $m(l>>>0,m>>>0,E>>>0,O>>>0)}L||function(){for(var l=u.numThreads-1;l--;)Bh();mp.unshift(()=>{Jd++,function(m){L?m():Promise.all(Hn.map(zh)).then(m)}(()=>Eh())})}();for(var Am=Array(256),Tp=0;256>Tp;++Tp)Am[Tp]=String.fromCharCode(Tp);rm=Am,qn=u.BindingError=class extends Error{constructor(l){super(l),this.name="BindingError"}},u.InternalError=class extends Error{constructor(l){super(l),this.name="InternalError"}},vn.push(0,1,void 0,1,null,1,!0,1,!1,1),u.count_emval_handles=()=>vn.length/2-5-Jp.length;var bf=[Hp,Fh,Rh,Uh,Vh,Kh,Hh,qh,Xh,Qh,Yh,Jh,Zh,em,tm,sm,fm,gm,vm,Tm,xm,Pm,Em,Cm],zt=function(){function l(E,O){return zt=E.exports,zt=function(){var V=zt,we={};for(let[Ue,Je]of Object.entries(V))we[Ue]=typeof Je=="function"?(...xt)=>{yp.push(Ue);try{return Je(...xt)}finally{Cs||(yp.pop(),an&&Qn===1&&yp.length===0&&(Qn=0,Io+=1,wp(Nm),typeof Fibers<"u"&&Fibers.tc()))}}:Je;return we}(),zt=function(){var V=zt,we=Je=>xt=>Je(xt)>>>0,Ue=Je=>()=>Je()>>>0;return(V=Object.assign({},V)).Da=we(V.Da),V.gb=Ue(V.gb),V.ib=we(V.ib),V.emscripten_main_runtime_thread_id=Ue(V.emscripten_main_runtime_thread_id),V.tb=we(V.tb),V.ub=Ue(V.ub),V}(),Oh.push(zt.jb),Yd.unshift(zt.Ca),Ot=O,Eh(),zt}var m=Ah();if(Jd++,u.instantiateWasm)try{return u.instantiateWasm(m,l)}catch(E){$t(`Module.instantiateWasm callback failed with error: ${E}`),k(E)}return Up||=u.locateFile?Ch("ort-wasm-simd-threaded.jsep.wasm")?"ort-wasm-simd-threaded.jsep.wasm":u.locateFile?u.locateFile("ort-wasm-simd-threaded.jsep.wasm",Ee):Ee+"ort-wasm-simd-threaded.jsep.wasm":new URL(r("./node_modules/onnxruntime-web/dist/ort-wasm-simd-threaded.jsep.wasm"),r.b).href,function(E,O){var V=Up;return tt||typeof WebAssembly.instantiateStreaming!="function"||Ch(V)||kh(V)||typeof fetch!="function"?$h(V,E,O):fetch(V,{credentials:"same-origin"}).then(we=>WebAssembly.instantiateStreaming(we,E).then(O,function(Ue){return $t(`wasm streaming compile failed: ${Ue}`),$t("falling back to ArrayBuffer instantiation"),$h(V,E,O)}))}(m,function(E){l(E.instance,E.module)}).catch(k),{}}(),Im=l=>(Im=zt.Da)(l),Fm=()=>(Fm=zt.Ea)();u._OrtInit=(l,m)=>(u._OrtInit=zt.Fa)(l,m),u._OrtGetLastError=(l,m)=>(u._OrtGetLastError=zt.Ga)(l,m),u._OrtCreateSessionOptions=(l,m,E,O,V,we,Ue,Je,xt,Et)=>(u._OrtCreateSessionOptions=zt.Ha)(l,m,E,O,V,we,Ue,Je,xt,Et),u._OrtAppendExecutionProvider=(l,m)=>(u._OrtAppendExecutionProvider=zt.Ia)(l,m),u._OrtAddFreeDimensionOverride=(l,m,E)=>(u._OrtAddFreeDimensionOverride=zt.Ja)(l,m,E),u._OrtAddSessionConfigEntry=(l,m,E)=>(u._OrtAddSessionConfigEntry=zt.Ka)(l,m,E),u._OrtReleaseSessionOptions=l=>(u._OrtReleaseSessionOptions=zt.La)(l),u._OrtCreateSession=(l,m,E)=>(u._OrtCreateSession=zt.Ma)(l,m,E),u._OrtReleaseSession=l=>(u._OrtReleaseSession=zt.Na)(l),u._OrtGetInputOutputCount=(l,m,E)=>(u._OrtGetInputOutputCount=zt.Oa)(l,m,E),u._OrtGetInputName=(l,m)=>(u._OrtGetInputName=zt.Pa)(l,m),u._OrtGetOutputName=(l,m)=>(u._OrtGetOutputName=zt.Qa)(l,m),u._OrtFree=l=>(u._OrtFree=zt.Ra)(l),u._OrtCreateTensor=(l,m,E,O,V,we)=>(u._OrtCreateTensor=zt.Sa)(l,m,E,O,V,we),u._OrtGetTensorData=(l,m,E,O,V)=>(u._OrtGetTensorData=zt.Ta)(l,m,E,O,V),u._OrtReleaseTensor=l=>(u._OrtReleaseTensor=zt.Ua)(l),u._OrtCreateRunOptions=(l,m,E,O)=>(u._OrtCreateRunOptions=zt.Va)(l,m,E,O),u._OrtAddRunConfigEntry=(l,m,E)=>(u._OrtAddRunConfigEntry=zt.Wa)(l,m,E),u._OrtReleaseRunOptions=l=>(u._OrtReleaseRunOptions=zt.Xa)(l),u._OrtCreateBinding=l=>(u._OrtCreateBinding=zt.Ya)(l),u._OrtBindInput=(l,m,E)=>(u._OrtBindInput=zt.Za)(l,m,E),u._OrtBindOutput=(l,m,E,O)=>(u._OrtBindOutput=zt._a)(l,m,E,O),u._OrtClearBoundOutputs=l=>(u._OrtClearBoundOutputs=zt.$a)(l),u._OrtReleaseBinding=l=>(u._OrtReleaseBinding=zt.ab)(l),u._OrtRunWithBinding=(l,m,E,O,V)=>(u._OrtRunWithBinding=zt.bb)(l,m,E,O,V),u._OrtRun=(l,m,E,O,V,we,Ue,Je)=>(u._OrtRun=zt.cb)(l,m,E,O,V,we,Ue,Je),u._OrtEndProfiling=l=>(u._OrtEndProfiling=zt.db)(l),u._JsepOutput=(l,m,E)=>(u._JsepOutput=zt.eb)(l,m,E),u._JsepGetNodeName=l=>(u._JsepGetNodeName=zt.fb)(l);var xp,pa=()=>(pa=zt.gb)(),ln=u._free=l=>(ln=u._free=zt.hb)(l),Pp=u._malloc=l=>(Pp=u._malloc=zt.ib)(l),ah=(l,m,E,O,V,we)=>(ah=zt.lb)(l,m,E,O,V,we),Om=()=>(Om=zt.mb)(),Dm=(l,m,E,O,V)=>(Dm=zt.nb)(l,m,E,O,V),lh=l=>(lh=zt.ob)(l),Ep=l=>(Ep=zt.pb)(l),Lm=()=>(Lm=zt.qb)(),zm=(l,m)=>(zm=zt.rb)(l,m),Cp=l=>(Cp=zt.sb)(l),uh=l=>(uh=zt.tb)(l),dh=()=>(dh=zt.ub)(),Bm=u.dynCall_ii=(l,m)=>(Bm=u.dynCall_ii=zt.wb)(l,m),Rm=l=>(Rm=zt.xb)(l),Nm=()=>(Nm=zt.yb)(),jm=l=>(jm=zt.zb)(l),Wm=()=>(Wm=zt.Ab)();function Um(){0<Jd||(L?(h(u),L||_p(Yd),startWorker(u)):(_p(mp),0<Jd||xp||(xp=!0,u.calledRun=!0,Cs||(L||_p(Yd),h(u),L||_p(s_)))))}return u.___start_em_js=889994,u.___stop_em_js=890240,u.stackSave=()=>dh(),u.stackRestore=l=>Cp(l),u.stackAlloc=l=>uh(l),u.setValue=function(l,m,E="i8"){switch(E.endsWith("*")&&(E="*"),E){case"i1":case"i8":t()[l>>>0]=m;break;case"i16":n()[l>>>1>>>0]=m;break;case"i32":i()[l>>>2>>>0]=m;break;case"i64":Ts[l>>>3]=BigInt(m);break;case"float":c()[l>>>2>>>0]=m;break;case"double":p()[l>>>3>>>0]=m;break;case"*":a()[l>>>2>>>0]=m;break;default:Kn(`invalid type for setValue: ${E}`)}},u.getValue=function(l,m="i8"){switch(m.endsWith("*")&&(m="*"),m){case"i1":case"i8":return t()[l>>>0];case"i16":return n()[l>>>1>>>0];case"i32":return i()[l>>>2>>>0];case"i64":return Ts[l>>>3];case"float":return c()[l>>>2>>>0];case"double":return p()[l>>>3>>>0];case"*":return a()[l>>>2>>>0];default:Kn(`invalid type for getValue: ${m}`)}},u.UTF8ToString=Os,u.stringToUTF8=da,u.lengthBytesUTF8=Xp,Zd=function l(){xp||Um(),xp||(Zd=l)},Um(),u.PTR_SIZE=4,S}),Ss=Ps,globalThis.self?.name==="em-pthread"&&Ps()}),sr,Ur,Fr,wr,Bt,Vr,Tr,Or,xr=y(()=>{et(),sr=import.meta.url??(typeof document<"u"?document.currentScript?.src:typeof self<"u"?self.location?.href:void 0),Ur=typeof location>"u"?void 0:location.origin,Fr=(e,t)=>{try{let s=t??sr;return(s?new URL(e,s):new URL(e)).origin===Ur}catch{return!1}},wr=async e=>{let t=await(await fetch(e,{credentials:"same-origin"})).blob();return URL.createObjectURL(t)},Bt=(ts(),T(it)).default,Vr=async()=>{if(!sr)throw new Error("Failed to load proxy worker: cannot determine the script source URL.");if(Fr(sr))return[void 0,Bt()];let e=await wr(sr);return[e,Bt(e)]},Tr=(Hs(),T(xs)).default,Or=async(e,t,s)=>[void 0,Tr]}),rr,Pr,cr,Er,Gr,nr,nt,pt,St=y(()=>{xr(),Pr=!1,cr=!1,Er=!1,Gr=()=>{if(typeof SharedArrayBuffer>"u")return!1;try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},nr=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},nt=async e=>{if(Pr)return Promise.resolve();if(cr)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(Er)throw new Error("previous call to 'initializeWebAssembly()' failed.");cr=!0;let t=e.initTimeout,s=e.numThreads;if(!nr())throw new Error("WebAssembly SIMD is not supported in the current environment.");let n=Gr();s>1&&!n&&(typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+s+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),console.warn("WebAssembly multi-threading is not supported in the current environment. Falling back to single-threading."),e.numThreads=s=1);let o=e.wasmPaths,i=typeof o=="string"?o:void 0,a=o?.mjs,c=a?.href??a,p=o?.wasm,h=p?.href??p,k=e.wasmBinary,[u,S]=await Or(c,i,s>1),R=!1,N=[];if(t>0&&N.push(new Promise(L=>{setTimeout(()=>{R=!0,L()},t)})),N.push(new Promise((L,se)=>{let ee={numThreads:s};k?ee.wasmBinary=k:(h||i)&&(ee.locateFile=(U,ce)=>h??(i??ce)+U),S(ee).then(U=>{cr=!1,Pr=!0,rr=U,L(),u&&URL.revokeObjectURL(u)},U=>{cr=!1,Er=!0,se(U)})})),await Promise.race(N),R)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},pt=()=>{if(Pr&&rr)return rr;throw new Error("WebAssembly is not initialized yet.")}}),ds,Kr,rs,pr=y(()=>{St(),ds=(e,t)=>{let s=pt(),n=s.lengthBytesUTF8(e)+1,o=s._malloc(n);return s.stringToUTF8(e,o,n),t.push(o),o},Kr=(e,t,s,n)=>{if(typeof e=="object"&&e!==null){if(s.has(e))throw new Error("Circular reference in options");s.add(e)}Object.entries(e).forEach(([o,i])=>{let a=t?t+o:o;if(typeof i=="object")Kr(i,a+".",s,n);else if(typeof i=="string"||typeof i=="number")n(a,i.toString());else if(typeof i=="boolean")n(a,i?"1":"0");else throw new Error(`Can't handle extra config type: ${typeof i}`)})},rs=e=>{let t=pt(),s=t.stackSave();try{let n=t.PTR_SIZE,o=t.stackAlloc(2*n);t._OrtGetLastError(o,o+n);let i=Number(t.getValue(o,n===4?"i32":"i64")),a=t.getValue(o+n,"*"),c=a?t.UTF8ToString(a):"";throw new Error(`${e} ERROR_CODE: ${i}, ERROR_MESSAGE: ${c}`)}finally{t.stackRestore(s)}}}),Tn,Yn=y(()=>{St(),pr(),Tn=e=>{let t=pt(),s=0,n=[],o=e||{};try{if(e?.logSeverityLevel===void 0)o.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)o.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(o.terminate=!1);let i=0;return e?.tag!==void 0&&(i=ds(e.tag,n)),s=t._OrtCreateRunOptions(o.logSeverityLevel,o.logVerbosityLevel,!!o.terminate,i),s===0&&rs("Can't create run options."),e?.extra!==void 0&&Kr(e.extra,"",new WeakSet,(a,c)=>{let p=ds(a,n),h=ds(c,n);t._OrtAddRunConfigEntry(s,p,h)!==0&&rs(`Can't set a run config entry: ${a} - ${c}.`)}),[s,n]}catch(i){throw s!==0&&t._OrtReleaseRunOptions(s),n.forEach(a=>t._free(a)),i}}}),xn,Hr,Pn,Dr,En,Jn=y(()=>{St(),pr(),xn=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},Hr=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},Pn=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(s=>(typeof s=="string"?s:s.name)==="webgpu")&&(e.enableMemPattern=!1)},Dr=(e,t,s)=>{for(let n of t){let o=typeof n=="string"?n:n.name;switch(o){case"webnn":if(o="WEBNN",typeof n!="string"){let a=n?.deviceType;if(a){let c=ds("deviceType",s),p=ds(a,s);pt()._OrtAddSessionConfigEntry(e,c,p)!==0&&rs(`Can't set a session config entry: 'deviceType' - ${a}.`)}}break;case"webgpu":if(o="JS",typeof n!="string"){let a=n;if(a?.preferredLayout){if(a.preferredLayout!=="NCHW"&&a.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${a.preferredLayout}`);let c=ds("preferredLayout",s),p=ds(a.preferredLayout,s);pt()._OrtAddSessionConfigEntry(e,c,p)!==0&&rs(`Can't set a session config entry: 'preferredLayout' - ${a.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${o}`)}let i=ds(o,s);pt()._OrtAppendExecutionProvider(e,i)!==0&&rs(`Can't append execution provider: ${o}.`)}},En=e=>{let t=pt(),s=0,n=[],o=e||{};Pn(o);try{let i=xn(o.graphOptimizationLevel??"all"),a=Hr(o.executionMode??"sequential"),c=typeof o.logId=="string"?ds(o.logId,n):0,p=o.logSeverityLevel??2;if(!Number.isInteger(p)||p<0||p>4)throw new Error(`log serverity level is not valid: ${p}`);let h=o.logVerbosityLevel??0;if(!Number.isInteger(h)||h<0||h>4)throw new Error(`log verbosity level is not valid: ${h}`);let k=typeof o.optimizedModelFilePath=="string"?ds(o.optimizedModelFilePath,n):0;if(s=t._OrtCreateSessionOptions(i,!!o.enableCpuMemArena,!!o.enableMemPattern,a,!!o.enableProfiling,0,c,p,h,k),s===0&&rs("Can't create session options."),o.executionProviders&&Dr(s,o.executionProviders,n),o.enableGraphCapture!==void 0){if(typeof o.enableGraphCapture!="boolean")throw new Error(`enableGraphCapture must be a boolean value: ${o.enableGraphCapture}`);let u=ds("enableGraphCapture",n),S=ds(o.enableGraphCapture.toString(),n);t._OrtAddSessionConfigEntry(s,u,S)!==0&&rs(`Can't set a session config entry: 'enableGraphCapture' - ${o.enableGraphCapture}.`)}if(o.freeDimensionOverrides)for(let[u,S]of Object.entries(o.freeDimensionOverrides)){if(typeof u!="string")throw new Error(`free dimension override name must be a string: ${u}`);if(typeof S!="number"||!Number.isInteger(S)||S<0)throw new Error(`free dimension override value must be a non-negative integer: ${S}`);let R=ds(u,n);t._OrtAddFreeDimensionOverride(s,R,S)!==0&&rs(`Can't set a free dimension override: ${u} - ${S}.`)}return o.extra!==void 0&&Kr(o.extra,"",new WeakSet,(u,S)=>{let R=ds(u,n),N=ds(S,n);t._OrtAddSessionConfigEntry(s,R,N)!==0&&rs(`Can't set a session config entry: ${u} - ${S}.`)}),[s,n]}catch(i){throw s!==0&&t._OrtReleaseSessionOptions(s)!==0&&rs("Can't release session options."),n.forEach(a=>t._free(a)),i}}}),Lr,yr,or,un,qr,dn,Xr,Mr,Lt=y(()=>{Lr=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;case"int4":return 22;case"uint4":return 21;default:throw new Error(`unsupported data type: ${e}`)}},yr=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";case 22:return"int4";case 21:return"uint4";default:throw new Error(`unsupported data type: ${e}`)}},or=(e,t)=>{let s=[-1,4,1,1,2,2,4,8,-1,1,2,8,4,8,-1,-1,-1,-1,-1,-1,-1,.5,.5][e],n=typeof t=="number"?t:t.reduce((o,i)=>o*i,1);return s>0?Math.ceil(n*s):void 0},un=e=>{switch(e){case"float16":return typeof Float16Array<"u"&&Float16Array.from?Float16Array:Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},qr=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},dn=e=>e==="float32"||e==="float16"||e==="int32"||e==="int64"||e==="uint32"||e==="uint8"||e==="bool"||e==="uint4"||e==="int4",Xr=e=>e==="float32"||e==="float16"||e==="int32"||e==="int64"||e==="uint32"||e==="uint64"||e==="int8"||e==="uint8"||e==="bool"||e==="uint4"||e==="int4",Mr=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;case"ml-tensor":return 5;default:throw new Error(`unsupported data location: ${e}`)}}}),cn,Cn=y(()=>{et(),cn=async e=>{if(typeof e=="string"){let t=await fetch(e);if(!t.ok)throw new Error(`failed to load external data file: ${e}`);let s=t.headers.get("Content-Length"),n=s?parseInt(s,10):0;if(n<1073741824)return new Uint8Array(await t.arrayBuffer());{if(!t.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let o=t.body.getReader(),i;try{i=new ArrayBuffer(n)}catch(c){if(c instanceof RangeError){let p=Math.ceil(n/65536);i=new WebAssembly.Memory({initial:p,maximum:p}).buffer}else throw c}let a=0;for(;;){let{done:c,value:p}=await o.read();if(c)break;let h=p.byteLength;new Uint8Array(i,a,h).set(p),a+=h}return new Uint8Array(i,0,n)}}else return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e)}}),kn,Sn,zr,$n,pn,An,ns,qs=y(()=>{Lt(),kn=["V","I","W","E","F"],Sn=(e,t)=>{console.log(`[${kn[e]},${new Date().toISOString()}]${t}`)},pn=(e,t)=>{zr=e,$n=t},An=(e,t)=>{let s=qr(e),n=qr(zr);s>=n&&Sn(s,typeof t=="function"?t():t)},ns=(...e)=>{$n&&An(...e)}}),hn,In=y(()=>{Lt(),hn=(e,t)=>new(un(t))(e)}),mn=y(()=>{}),Fn,xe,M,Y,pe,ge,Ie,qe,_t,wt=y(()=>{qs(),mn(),Fn=new Map([[64,250],[128,200],[256,200],[512,200],[2048,230],[4096,200],[8192,50],[16384,50],[32768,50],[65536,50],[131072,50],[262144,50],[524288,50],[1048576,50],[2097152,30],[4194304,20],[8388608,10],[12582912,10],[16777216,10],[26214400,15],[33554432,22],[44236800,2],[58982400,6],[67108864,6],[134217728,6],[167772160,6]]),xe=[],M=e=>Math.ceil(Number(e)/16)*16,Y=e=>{for(let t=0;t<xe.length;t++){let s=xe[t];if(e<=s)return s}return Math.ceil(e/16)*16},pe=1,ge=()=>pe++,Ie=async(e,t,s,n)=>{let o=M(s),i=e.device.createBuffer({size:o,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let a=e.getCommandEncoder();e.endComputePass(),a.copyBufferToBuffer(t,0,i,0,o),e.flush(),await i.mapAsync(GPUMapMode.READ);let c=i.getMappedRange();if(n){let p=n();return p.set(new Uint8Array(c,0,s)),p}else return new Uint8Array(c.slice(0,s))}finally{i.destroy()}},qe=class{constructor(e){this.backend=e,this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersPending=[],this.capturedPendingBuffers=new Map;for(let[t]of Fn)xe.push(t),this.freeBuffers.set(t,[]),this.freeUniformBuffers.set(t,[]);this.sessionCount=0}upload(e,t){let s=t.buffer,n=t.byteOffset,o=t.byteLength,i=M(o),a=this.storageCache.get(e);if(!a)throw new Error("gpu data for uploading does not exist");if(Number(a.originalSize)!==o)throw new Error(`inconsistent data size. gpu data size=${a.originalSize}, data size=${o}`);let c=this.backend.device.createBuffer({mappedAtCreation:!0,size:i,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),p=c.getMappedRange();new Uint8Array(p).set(new Uint8Array(s,n,o)),c.unmap();let h=this.backend.device.createCommandEncoder();h.copyBufferToBuffer(c,0,a.gpuData.buffer,0,i),this.backend.device.queue.submit([h.finish()]),c.destroy(),ns("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${e})`)}memcpy(e,t){let s=this.storageCache.get(e);if(!s)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(t);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(s.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let o=M(s.originalSize),i=this.backend.getCommandEncoder();this.backend.endComputePass(),i.copyBufferToBuffer(s.gpuData.buffer,0,n.gpuData.buffer,0,o)}registerExternalBuffer(e,t,s){let n;if(s){if(n=s[0],e===s[1])return ns("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${t}) => id=${n}, buffer is the same, skip.`),n;if(this.backend.capturedCommandList.has(this.backend.currentSessionId))throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.
             Please use the previous external buffer!`)}else n=ge();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:e},originalSize:t}),ns("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${t}) => id=${n}, registered.`),n}unregisterExternalBuffer(e){e!==void 0&&(this.storageCache.delete(e),ns("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${e}`))}create(e,t=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let s=Y(e),n,o=(t&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,i=(t&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(o||i){let c=(o?this.freeBuffers:this.freeUniformBuffers).get(s);c?c.length>0?n=c.pop():n=this.backend.device.createBuffer({size:s,usage:t}):n=this.backend.device.createBuffer({size:s,usage:t})}else n=this.backend.device.createBuffer({size:s,usage:t});let a={id:ge(),type:0,buffer:n};return this.storageCache.set(a.id,{gpuData:a,originalSize:Number(e)}),ns("verbose",()=>`[WebGPU] GpuDataManager.create(size=${e}) => id=${a.id}`),a}get(e){return this.storageCache.get(e)?.gpuData}release(e){let t=typeof e=="bigint"?Number(e):e,s=this.storageCache.get(t);if(!s){if(this.storageCache.size===0)return 0;throw new Error("releasing data does not exist")}return ns("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${s.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(s.gpuData.buffer),s.originalSize}async download(e,t){let s=this.storageCache.get(Number(e));if(!s)throw new Error("data does not exist");await Ie(this.backend,s.gpuData.buffer,s.originalSize,t)}refreshPendingBuffers(){if(this.buffersPending.length!==0)if(this.backend.sessionStatus==="default"){for(let e of this.buffersPending){let t=Fn.get(e.size);if((e.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE){let s=this.freeBuffers.get(e.size)||[];t===void 0||s.length>=t?e.destroy():s.push(e)}else if((e.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM){let s=this.freeUniformBuffers.get(e.size)||[];t===void 0||s.length>=t?e.destroy():s.push(e)}else e.destroy()}this.buffersPending=[]}else{let e=this.capturedPendingBuffers.get(this.backend.currentSessionId);e||(e=[],this.capturedPendingBuffers.set(this.backend.currentSessionId,e));for(let t of this.buffersPending)e.push(t);this.buffersPending=[]}}dispose(){this.freeBuffers.forEach(e=>{e.forEach(t=>{t.destroy()})}),this.freeUniformBuffers.forEach(e=>{e.forEach(t=>{t.destroy()})}),this.storageCache.forEach(e=>{e.gpuData.buffer.destroy()}),this.capturedPendingBuffers.forEach(e=>{e.forEach(t=>{t.destroy()})}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.capturedPendingBuffers=new Map}onCreateSession(){this.sessionCount+=1}onReleaseSession(e){let t=this.capturedPendingBuffers.get(e);t&&(t.forEach(s=>{s.destroy()}),this.capturedPendingBuffers.delete(e)),this.sessionCount-=1,this.sessionCount===0&&(ns("warning",()=>"[WebGPU] Clearing webgpu buffer cache"),this.storageCache.forEach(s=>{s.gpuData.buffer.destroy()}),this.storageCache=new Map)}},_t=(...e)=>new qe(...e)}),yt,Ye,It=y(()=>{yt=class{constructor(e){Object.assign(this,e)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(e=>`${this[e]}`).join(";")),this.key}},Ye=e=>new yt(e)}),Xt,_s,Ce,Es,Vs,Ns,ir,Nt=y(()=>{Xt=class{static calcMatMulShape(e,t){return e[1]!==t[0]?void 0:[e[0],t[1]]}},_s=class{static calcShape(e,t,s=!1){let n=e.length,o=t.length;if(n===0)return t;if(o===0)return e;let i=Math.max(e.length,t.length),a=new Array(i);if(s){if(n<2||o<2)return;let c=Xt.calcMatMulShape([e[n-2],e[n-1]],[t[o-2],t[o-1]]);if(c===void 0)return;[a[i-2],a[i-1]]=c}for(let c=s?3:1;c<=i;c++){let p=n-c<0?1:e[n-c],h=o-c<0?1:t[o-c];if(p!==h&&p>1&&h>1)return;let k=Math.max(p,h);if(p&&h)a[i-c]=Math.max(p,h);else{if(k>1)return;a[i-c]=0}}return a}static isValidBroadcast(e,t){let s=e.length,n=t.length;if(s>n)return!1;for(let o=1;o<=s;o++)if(e[s-o]!==1&&e[s-o]!==t[n-o])return!1;return!0}},Ce=class kp{static size(t){return kp.getSizeFromDimensionRange(t,0,t.length)}static convertShape(t,s=4){let n=t.length;if(n===0)return[];let o=new Array(n),i=n-1;for(;i>=0;){if(t[i]%s===0){o[i]=t[i]/s;break}if(s%t[i]!==0)throw new Error("cannot convert shape");o[i]=1,s/=t[i],i--}for(i--;i>=0;i--)o[i]=t[i];return o}static sizeFromDimension(t,s){if(s<0||s>t.length)throw new Error(`invalid dimension of ${s} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return kp.getSizeFromDimensionRange(t,s,t.length)}static sizeToDimension(t,s){if(s<0||s>t.length)throw new Error(`invalid dimension of ${s} for sizeToDimension as Tensor has ${t.length} dimensions.`);return kp.getSizeFromDimensionRange(t,0,s)}static getSizeFromDimensionRange(t,s,n){let o=1;for(let i=s;i<n;i++){if(t[i]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");o*=Number(t[i])}return o}static computeStrides(t){let s=t.length;if(s===0)return[];if(s===1)return[1];let n=new Array(s);n[s-1]=1,n[s-2]=t[s-1];for(let o=s-3;o>=0;--o)n[o]=n[o+1]*t[o+1];return n}static normalizeAxis(t,s){if(t<-s&&t>=s)throw new Error("unsupported axis for this operation.");return t<0?t+s:t}static normalizeAxes(t,s){return t.map(n=>this.normalizeAxis(n,s??t.length))}static sortBasedOnPerm(t,s){return s?s.map(n=>t[n]):t.slice().reverse()}static padShape(t,s){let n=t.length;return t.map((o,i)=>o+s[i]+s[i+n])}static areEqual(t,s){return t.length!==s.length?!1:t.every((n,o)=>n===s[o])}},Es=class sc{static adjustPoolAttributes(t,s,n,o,i,a){if(!t&&n.length!==s.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let c=0;c<s.length-2;c++)c>=n.length?n.push(s[c+2]):n[c]=s[c+2];for(let c=0;c<n.length;c++)if(c<o.length){if(o[c]<0)throw new Error("strides should be greater than or equal to 1")}else o.push(1);for(let c=0;c<n.length;c++)if(c<i.length){if(i[c]<0)throw new Error("dilations should be greater than or equal to 1")}else i.push(1);for(let c=0;c<n.length*2;c++)if(c<a.length){if(a[c]<0)throw new Error("pad should be greater than or equal to 1")}else a.push(0);for(let c=0;c<n.length;c++){if(n[c]<=0)throw new Error("kernel shapes need to be greater than 0");if(a[c]>=n[c]||a[c+n.length]>=n[c])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,s,n,o,i,a,c){if(c){if(i.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(s.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(o.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let p=0;p<t.length-2;p++)sc.adjustPadAndReturnShape(t[p+(a?1:2)],s[p],n[p],o[p],i,p,p+t.length-2,c)}}static computePoolOutputShape(t,s,n,o,i,a,c){if(s.length<=0)throw new Error("input shape must be of size greater than 0");let p=[s[0],s[1]];return sc.computeShapeHelper(t,s,p,n,o,i,a,c),p}static computeConvOutputShape(t,s,n,o,i,a,c){if(t.length<=0||s.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let p=[t[0],s[0]];return sc.computeShapeHelper(!1,t,p,n,o,i,a,c),p}static computeShapeHelper(t,s,n,o,i,a,c,p){if(t)for(let h=0;h<s.length-2;h++)n.push(1);else for(let h=0;h<s.length-2;h++)n.push(sc.adjustPadAndReturnShape(s[h+2],o[h],i[h],a[h],c,h,h+s.length-2,p))}static adjustPadAndReturnShape(t,s,n,o,i,a,c,p){let h=n*(o-1)+1;if(p&&p!=="NOTSET")switch(p){case"VALID":return i[a]=0,i[c]=0,Math.floor((t-h)/s+1);case"SAME_LOWER":case"SAME_UPPER":if(n!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let k=((t+s-1)/s-1)*s+o-t;return i[a]=Math.floor(p==="SAME_LOWER"?(k+1)/2:k/2),i[c]=k-i[a],Math.floor((t+k-o)/s+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+i[a]+i[c]-h)/s+1)}},Vs=class{static getShapeOfGemmResult(e,t,s,n,o){if(e.length!==2||s.length!==2)throw new Error("shape need to be of size 2");let i,a,c;t?(i=e[1],a=e[0]):(i=e[0],a=e[1]);let p=-1;if(n?(c=s[0],p=1):(c=s[1],p=0),s[p]!==a)throw new Error("dimension mismatch");if(i<=0||c<=0||a<=0)throw new Error("invalid shape specified");if(o&&!_s.isValidBroadcast(o,[i,c]))throw new Error("gemm: invalid bias shape for broadcast");return[i,c,a]}},Ns=-34028234663852886e22,ir=34028234663852886e22}),Ls,hr,Zt,ls,Tt,cs,br,Is,Gs,Mt,ws,Le,ft,Zs,Qr,Zn,_n,Ht=y(()=>{Lt(),Nt(),Ls=64,hr=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(Number(e)){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];case 22:return"i32";case 21:return"u32";default:throw new Error(`Unknown data type: ${e}`)}},Zt=(e,t=1)=>{let s=hr(e,t);return typeof s=="string"?s:s[0]},ls=(e,t=1)=>{let s=hr(e,t);return typeof s=="string"?s:s[1]},Tt=(...e)=>{let t=[];return e.forEach(s=>{s.length!==0&&t.push({type:12,data:s},{type:12,data:Ce.computeStrides(s)})}),t},cs=e=>e%4===0?4:e%2===0?2:1,br=(e="f32",t,s="0")=>!t||t===1?`${e}(${s})`:`vec${t}<${e}>(${s})`,Is=(e,t,s)=>e==="f32"?s:t===1?`f32(${s})`:`vec${t}<f32>(${s})`,Gs=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,Mt=(e,t,s,n)=>e.startsWith("uniforms.")&&s>4?typeof t=="string"?n==="f16"?`${e}[(${t}) / 8][(${t}) % 8 / 4][(${t}) % 8 % 4]`:`${e}[(${t}) / 4][(${t}) % 4]`:n==="f16"?`${e}[${Math.floor(t/8)}][${Math.floor(t%8/4)}][${t%8%4}]`:`${e}[${Math.floor(t/4)}][${t%4}]`:s>1?`${e}[${t}]`:e,ws=(e,t,s,n,o)=>{let i=typeof s=="number",a=i?s:s.length,c=[...new Array(a).keys()],p=a<2?"u32":a<=4?`vec${a}<u32>`:`array<u32, ${a}>`,h=hr(t,o),k=typeof h=="string"?h:h[1],u=typeof h=="string"?h:h[0],S={indices:p,value:k,storage:u,tensor:t},R=at=>typeof at=="string"?at:`${at}u`,N={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},L=i?"uniforms.":"",se=`${L}${e}_shape`,ee=`${L}${e}_strides`,U="";for(let at=0;at<a-1;at++)U+=`
    let dim${at} = current / ${Mt(ee,at,a)};
    let rest${at} = current % ${Mt(ee,at,a)};
    indices[${at}] = dim${at};
    current = rest${at};
    `;U+=`indices[${a-1}] = current;`;let ce=a<2?"":`
  fn o2i_${e}(offset: u32) -> ${S.indices} {
    var indices: ${S.indices};
    var current = offset;
    ${U}
    return indices;
  }`,me=at=>(N.offsetToIndices=!0,a<2?at:`o2i_${e}(${at})`),ye=[];if(a>=2)for(let at=a-1;at>=0;at--)ye.push(`${Mt(ee,at,a)} * (indices[${at}])`);let ze=a<2?"":`
  fn i2o_${e}(indices: ${S.indices}) -> u32 {
    return ${ye.join("+")};
  }`,Ee=at=>(N.indicesToOffset=!0,a<2?at:`i2o_${e}(${at})`),tt=(...at)=>a===0?"0u":`${S.indices}(${at.map(R).join(",")})`,mt=(at,Pt)=>a<2?`${at}`:`${Mt(at,Pt,a)}`,Ct=(at,Pt,hs)=>a<2?`${at}=${hs};`:`${Mt(at,Pt,a)}=${hs};`,Ft={},$t=(at,Pt)=>{N.broadcastedIndicesToOffset=!0;let hs=`${Pt.name}broadcastedIndicesTo${e}Offset`;if(hs in Ft)return`${hs}(${at})`;let vs=[];for(let Ts=a-1;Ts>=0;Ts--){let Mn=Pt.indicesGet("outputIndices",Ts+Pt.rank-a);vs.push(`${mt(ee,Ts)} * (${Mn} % ${mt(se,Ts)})`)}return Ft[hs]=`fn ${hs}(outputIndices: ${Pt.type.indices}) -> u32 {
             return ${vs.length>0?vs.join("+"):"0u"};
           }`,`${hs}(${at})`},bt=(at,Pt)=>(()=>{if(S.storage===S.value)return`${e}[${at}]=${Pt};`;if(S.storage==="vec2<u32>"&&S.value==="i32")return`${e}[${at}]=vec2<u32>(u32(${Pt}), select(0u, 0xFFFFFFFFu, ${Pt} < 0));`;if(S.storage==="vec2<u32>"&&S.value==="u32")return`${e}[${at}]=vec2<u32>(u32(${Pt}), 0u);`;if(S.storage==="u32"&&S.value==="vec4<bool>")return`${e}[${at}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${Pt}));`;throw new Error(`not supported combination of storage type ${S.storage} and value type ${S.value} yet`)})(),Kt=at=>(()=>{if(S.storage===S.value)return`${e}[${at}]`;if(S.storage==="vec2<u32>"&&S.value==="i32")return`i32(${e}[${at}].x)`;if(S.storage==="vec2<u32>"&&S.value==="u32")return`u32(${e}[${at}].x)`;if(S.storage==="u32"&&S.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${at}] & 0xFFu), bool(${e}[${at}] & 0xFF00u), bool(${e}[${at}] & 0xFF0000u), bool(${e}[${at}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${S.storage} and value type ${S.value} yet`)})(),jt=a<2?"":`
  fn get_${e}ByIndices(indices: ${S.indices}) -> ${k} {
    return ${Kt(`i2o_${e}(indices)`)};
  }`,Ot=a<2?"":(()=>{let at=c.map(hs=>`d${hs}: u32`).join(", "),Pt=c.map(hs=>`d${hs}`).join(", ");return`
  fn get_${e}(${at}) -> ${k} {
    return get_${e}ByIndices(${tt(Pt)});
  }`})(),ss=(...at)=>{if(at.length!==a)throw new Error(`indices length must be ${a}`);let Pt=at.map(R).join(",");return a===0?Kt("0u"):a===1?Kt(Pt[0]):(N.get=!0,N.getByIndices=!0,N.indicesToOffset=!0,`get_${e}(${Pt})`)},Jt=at=>a<2?Kt(at):(N.getByIndices=!0,N.indicesToOffset=!0,`get_${e}ByIndices(${at})`),qt=a<2?"":`
  fn set_${e}ByIndices(indices: ${S.indices}, value: ${k}) {
    ${bt(`i2o_${e}(indices)`,"value")}
  }`,Ys=a<2?"":(()=>{let at=c.map(hs=>`d${hs}: u32`).join(", "),Pt=c.map(hs=>`d${hs}`).join(", ");return`
  fn set_${e}(${at}, value: ${k}) {
    set_${e}ByIndices(${tt(Pt)}, value);
  }`})();return{impl:()=>{let at=[],Pt=!1;return N.offsetToIndices&&(at.push(ce),Pt=!0),N.indicesToOffset&&(at.push(ze),Pt=!0),N.broadcastedIndicesToOffset&&(Object.values(Ft).forEach(hs=>at.push(hs)),Pt=!0),N.set&&(at.push(Ys),Pt=!0),N.setByIndices&&(at.push(qt),Pt=!0),N.get&&(at.push(Ot),Pt=!0),N.getByIndices&&(at.push(jt),Pt=!0),!i&&Pt&&at.unshift(`const ${se} = ${S.indices}(${s.join(",")});`,`const ${ee} = ${S.indices}(${Ce.computeStrides(s).join(",")});`),at.join(`
`)},type:S,offsetToIndices:me,indicesToOffset:Ee,broadcastedIndicesToOffset:$t,indices:tt,indicesGet:mt,indicesSet:Ct,set:(...at)=>{if(at.length!==a+1)throw new Error(`indices length must be ${a}`);let Pt=at[a];if(typeof Pt!="string")throw new Error("value must be string");let hs=at.slice(0,a).map(R).join(",");return a===0?bt("0u",Pt):a===1?bt(hs[0],Pt):(N.set=!0,N.setByIndices=!0,N.indicesToOffset=!0,`set_${e}(${hs}, ${Pt})`)},setByOffset:bt,setByIndices:(at,Pt)=>a<2?bt(at,Pt):(N.setByIndices=!0,N.indicesToOffset=!0,`set_${e}ByIndices(${at}, ${Pt});`),get:ss,getByOffset:Kt,getByIndices:Jt,usage:n,name:e,strides:ee,shape:se,rank:a}},Le=(e,t,s,n=1)=>ws(e,t,s,"input",n),ft=(e,t,s,n=1)=>ws(e,t,s,"output",n),Zs=(e,t,s)=>ws(e,t,s,"atomicOutput",1),Qr=(e,t,s,n=1)=>ws(e,t,s,"internal",n),Zn=class{constructor(e,t){this.normalizedDispatchGroup=e,this.limits=t,this.internalVariables=[],this.variables=[],this.uniforms=[],this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(e){return`if (global_idx >= ${typeof e=="number"?`${e}u`:e}) { return; }`}mainStart(e=Ls){let t=typeof e=="number"?e:e[0],s=typeof e=="number"?1:e[1],n=typeof e=="number"?1:e[2];if(t>this.limits.maxComputeWorkgroupSizeX||s>this.limits.maxComputeWorkgroupSizeY||n>this.limits.maxComputeWorkgroupSizeZ)throw new Error(`workgroup size [${t}, ${s}, ${n}] exceeds the maximum workgroup size [${this.limits.maxComputeWorkgroupSizeX}, ${this.limits.maxComputeWorkgroupSizeY}, ${this.limits.maxComputeWorkgroupSizeZ}].`);if(t*s*n>this.limits.maxComputeInvocationsPerWorkgroup)throw new Error(`workgroup size [${t}, ${s}, ${n}] exceeds the maximum workgroup invocations ${this.limits.maxComputeInvocationsPerWorkgroup}.`);let o=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,i=o?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(global_invocation_id) global_id : vec3<u32>,
                                             @builtin(local_invocation_id) local_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`,a=o?`let global_idx = global_id.x;
         let workgroup_index = workgroup_id.x;`:`let workgroup_index = workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
             workgroup_id.y * num_workgroups[0] + workgroup_id.x;
         let global_idx = workgroup_index * ${t*s*n}u + local_idx;`;return`@compute @workgroup_size(${t}, ${s}, ${n})
  fn main(${i}) {
    ${a}
  `}appendVariableUniforms(e){e.rank!==0&&(e.shape.startsWith("uniforms.")&&this.uniforms.push({name:e.shape.replace("uniforms.",""),type:"u32",length:e.rank}),e.strides.startsWith("uniforms.")&&this.uniforms.push({name:e.strides.replace("uniforms.",""),type:"u32",length:e.rank}))}declareVariable(e,t){if(e.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(e),this.appendVariableUniforms(e);let s=e.usage==="input"?"read":"read_write",n=e.usage==="atomicOutput"?"atomic<i32>":e.type.storage;return`@group(0) @binding(${t}) var<storage, ${s}> ${e.name}: array<${n}>;`}declareVariables(...e){return e.map(t=>this.declareVariable(t,this.variableIndex++)).join(`
`)}registerInternalVariable(e){if(e.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(e),this.appendVariableUniforms(e)}registerInternalVariables(...e){return e.forEach(t=>this.registerInternalVariable(t)),this}registerUniform(e,t,s=1){return this.uniforms.push({name:e,type:t,length:s}),this}registerUniforms(e){return this.uniforms=this.uniforms.concat(e),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let e=[];for(let{name:t,type:s,length:n}of this.uniforms)if(n&&n>4)s==="f16"?e.push(`@align(16) ${t}:array<mat2x4<${s}>, ${Math.ceil(n/8)}>`):e.push(`${t}:array<vec4<${s}>, ${Math.ceil(n/4)}>`);else{let o=n==null||n===1?s:`vec${n}<${s}>`;e.push(`${t}:${o}`)}return`
      struct Uniforms { ${e.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(e=>e.impl()).join(`
`)+this.internalVariables.map(e=>e.impl()).join(`
`)}get variablesInfo(){if(this.uniforms.length===0)return;let e=t=>[12,10,1,6][["u32","f16","f32","i32"].indexOf(t)];return this.uniforms.map(t=>[e(t.type),t.length??1])}},_n=(e,t)=>new Zn(e,t)}),ma,Do,_a,fa,Lo,ga,er,zo,wa,Br=y(()=>{Lt(),Nt(),It(),Ht(),ma=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},Do=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,_a=(e,t)=>Ce.sortBasedOnPerm(e,Do(e.length,t)),fa=(e,t,s,n)=>{let o=`fn perm(i: ${n.type.indices}) -> ${s.type.indices} {
    var a: ${s.type.indices};`;for(let i=0;i<t;++i)o+=`a[${e[i]}]=i[${i}];`;return o+="return a;}"},Lo=(e,t)=>{let s=[],n=[];for(let o=0;o<e.length;++o)e[o]!==1&&s.push(e[o]),e[t[o]]!==1&&n.push(t[o]);return{newShape:s,newPerm:n}},ga=(e,t)=>{let s=0;for(let n=0;n<e.length;++n)if(t[e[n]]!==1){if(e[n]<s)return!1;s=e[n]}return!0},er=(e,t)=>{let s=e.dataType,n=e.dims.length,o=Do(n,t),i=_a(e.dims,o),a=e.dims,c=i,p=n<2||ga(o,e.dims),h;if(p)return h=N=>{let L=Le("input",s,a,4),se=ft("output",s,c,4);return`
  ${N.registerUniform("output_size","u32").declareVariables(L,se)}
  ${N.mainStart()}
    ${N.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    output[global_idx] = input[global_idx];
  }`},{name:"TransposeCopy",shaderCache:{inputDependencies:["type"]},getRunData:()=>{let N=Ce.size(i);return{outputs:[{dims:i,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(N/64/4)},programUniforms:[{type:12,data:Math.ceil(N/4)}]}},getShaderSource:h};let{newShape:k,newPerm:u}=Lo(e.dims,o),S=Ce.areEqual(u,[2,3,1]),R=Ce.areEqual(u,[3,1,2]);if(k.length===2||S||R){a=S?[k[0],k[1]*k[2]]:R?[k[0]*k[1],k[2]]:k,c=[a[1],a[0]];let N=16;return h=L=>{let se=Le("a",s,a.length),ee=ft("output",s,c.length);return`
  ${L.registerUniform("output_size","u32").declareVariables(se,ee)}
  var<workgroup> tile : array<array<${ee.type.value}, ${N+1}>, ${N}>;
  ${L.mainStart([N,N,1])}
    let stride = (uniforms.output_shape[1] - 1) / ${N} + 1;
    let workgroup_id_x = workgroup_index % stride;
    let workgroup_id_y = workgroup_index / stride;
    let input_col = workgroup_id_y * ${N}u + local_id.x;
    let input_row = workgroup_id_x * ${N}u + local_id.y;
    if (input_row < uniforms.a_shape[0] && input_col < uniforms.a_shape[1]) {
      tile[local_id.y][local_id.x] = ${se.getByIndices(`${se.type.indices}(input_row, input_col)`)};
    }
    workgroupBarrier();

    let output_col = workgroup_id_x * ${N}u + local_id.x;
    let output_row = workgroup_id_y * ${N}u + local_id.y;
    if (output_row < uniforms.output_shape[0] && output_col < uniforms.output_shape[1]) {
      ${ee.setByIndices(`${ee.type.indices}(output_row, output_col)`,"tile[local_id.x][local_id.y]")}
    }
  }`},{name:"TransposeShared",shaderCache:{inputDependencies:["type"]},getRunData:()=>{let L=Ce.size(i);return{outputs:[{dims:i,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(c[1]/N),y:Math.ceil(c[0]/N)},programUniforms:[{type:12,data:L},...Tt(a,c)]}},getShaderSource:h}}return h=N=>{let L=Le("a",s,a.length),se=ft("output",s,c.length);return`
  ${N.registerUniform("output_size","u32").declareVariables(L,se)}

  ${fa(o,n,L,se)}

  ${N.mainStart()}
    ${N.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${se.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${se.setByOffset("global_idx",L.getByIndices("aIndices"))}
  }`},{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:["rank"]},getRunData:()=>{let N=Ce.size(i);return{outputs:[{dims:i,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(N/64)},programUniforms:[{type:12,data:N},...Tt(a,c)]}},getShaderSource:h}},zo=(e,t)=>{ma(e.inputs),e.compute(er(e.inputs[0],t.perm))},wa=e=>Ye({perm:e.perm})}),Bo,rc,ya,Ro,Ma,eo,ba,va,Ta,xa,mr,Pa,Ea,No,Ca,jo,Yr,ka,nc,Sa,oc,ic=y(()=>{Lt(),Nt(),Ht(),Xo(),Br(),Bo={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},rc={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},ya={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},Ro={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},Ma=(e,t)=>{let s=[];for(let n=t-e;n<t;++n)s.push(n);return s},eo=(e,t)=>{let s=[],n=e.length;for(let i=0;i<n;i++)t.indexOf(i)===-1&&s.push(e[i]);let o=t.map(i=>e[i]);return[s,o]},ba=(e,t)=>{let s=e.length+t.length,n=[],o=0;for(let i=0;i<s;i++)t.indexOf(i)===-1?n.push(e[o++]):n.push(1);return n},va=(e,t)=>{for(let s=0;s<e.length;++s)if(e[e.length-s-1]!==t-1-s)return!1;return!0},Ta=(e,t)=>{let s=[];if(!va(e,t)){for(let n=0;n<t;++n)e.indexOf(n)===-1&&s.push(n);e.forEach(n=>s.push(n))}return s},xa=(e,t,s,n,o,i,a)=>{let c=s[0].dims,p=Ce.size(i),h=Ce.size(a),k=Le("_A",s[0].dataType,c),u=ft("output",o,i),S=64;p===1&&(S=256);let R=`
          var<workgroup> aBestValues : array<f32, ${S}>;
       `,N=L=>`
        ${L.registerUniform("reduceSize","u32").declareVariables(k,u)}
        ${R}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${L.mainStart(S)}

          let outputIndex = global_idx / ${S};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = f32(${ya[n]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${S}) {
           let candidate = f32(${k.getByOffset("offset + k")});
           bestValue = ${Bo[n]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${S}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${rc[n]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${u.setByOffset("outputIndex",`${n==="mean"?`${u.type.storage}(bestValue / f32(uniforms.reduceSize))`:`${u.type.storage}(${Ro[n]})`}`)};
         }
        }`;return{name:e,shaderCache:{hint:`${t};${S}`,inputDependencies:["type"]},getShaderSource:N,getRunData:()=>({outputs:[{dims:i,dataType:o}],dispatchGroup:{x:p},programUniforms:[{type:12,data:h}]})}},mr=(e,t,s,n)=>{let o=e.inputs.length===1?s:Wo(e.inputs,s),i=o.axes;i.length===0&&!o.noopWithEmptyAxes&&(i=e.inputs[0].dims.map((R,N)=>N));let a=Ce.normalizeAxes(i,e.inputs[0].dims.length),c=a,p=e.inputs[0],h=Ta(c,e.inputs[0].dims.length);h.length>0&&(p=e.compute(er(e.inputs[0],h),{inputs:[0],outputs:[-1]})[0],c=Ma(c.length,p.dims.length));let[k,u]=eo(p.dims,c),S=k;o.keepDims&&(S=ba(k,a)),e.compute(xa(t,o.cacheKey,[p],n,e.inputs[0].dataType,S,u),{inputs:[p]})},Pa=(e,t)=>{mr(e,"ReduceMeanShared",t,"mean")},Ea=(e,t)=>{mr(e,"ReduceL1Shared",t,"l1")},No=(e,t)=>{mr(e,"ReduceL2Shared",t,"l2")},Ca=(e,t)=>{mr(e,"ReduceLogSumExpShared",t,"logSumExp")},jo=(e,t)=>{mr(e,"ReduceMaxShared",t,"max")},Yr=(e,t)=>{mr(e,"ReduceMinShared",t,"min")},ka=(e,t)=>{mr(e,"ReduceProdShared",t,"prod")},nc=(e,t)=>{mr(e,"ReduceSumShared",t,"sum")},Sa=(e,t)=>{mr(e,"ReduceSumSquareShared",t,"sumSquare")},oc=(e,t)=>{mr(e,"ReduceLogSumShared",t,"logSum")}}),ar,$a,to,Wo,_r,Aa,so,Ia,Fa,Oa,Uo,Da,La,Vo,za,fr,Go,Ba,Ra,Ko,Na,ja,Ho,Wa,Ua,qo,Xo=y(()=>{Lt(),Nt(),It(),Ht(),ic(),ar=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},$a=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],to=(e,t,s,n,o,i,a=!1,c=!1)=>{let p=[],h=s[0].dims,k=h.length,u=Ce.normalizeAxes(o,k),S=!c&&u.length===0;h.forEach((L,se)=>{S||u.indexOf(se)>=0?a&&p.push(1):p.push(L)});let R=p.length,N=Ce.size(p);return{name:e,shaderCache:t,getShaderSource:L=>{let se=[],ee=Le("_A",s[0].dataType,k),U=ft("output",i,R),ce=n(ee,U,u),me=ce[2];for(let ye=0,ze=0;ye<k;ye++)S||u.indexOf(ye)>=0?(a&&ze++,me=`for(var j${ye}: u32 = 0; j${ye} < ${h[ye]}; j${ye}++) {
                  ${ce[2].includes("last_index")?`let last_index = j${ye};`:""}
                  ${ee.indicesSet("input_indices",ye,`j${ye}`)}
                  ${me}
                }`):(se.push(`${ee.indicesSet("input_indices",ye,U.indicesGet("output_indices",ze))};`),ze++);return`

        ${L.registerUniform("output_size","u32").declareVariables(ee,U)}

        ${L.mainStart()}
          ${L.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var input_indices: ${ee.type.indices};
          let output_indices = ${U.offsetToIndices("global_idx")};

          ${se.join(`
`)}
          ${ce[0]}       // init ops for reduce max/min
          ${ce[1]}
          ${me}
          ${ce[3]}
          ${ce.length===4?U.setByOffset("global_idx","value"):ce.slice(4).join(`
`)}
        }`},getRunData:()=>({outputs:[{dims:p,dataType:i}],dispatchGroup:{x:Math.ceil(N/64)},programUniforms:[{type:12,data:N},...Tt(h,p)]})}},Wo=(e,t)=>{let s=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(n=>s.push(Number(n))),Ye({axes:s,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},_r=(e,t,s,n)=>{let o=e.inputs,i=o.length===1?s:Wo(o,s);e.compute(to(t,{hint:i.cacheKey,inputDependencies:["rank"]},[o[0]],i.noopWithEmptyAxes&&i.axes.length===0?$a:n,i.axes,o[0].dataType,i.keepDims,i.noopWithEmptyAxes),{inputs:[0]})},Aa=(e,t)=>{ar(e.inputs),_r(e,"ReduceLogSum",t,(s,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${s.getByIndices("input_indices")};`,"value = log(value);"])},so=(e,t)=>{ar(e.inputs),_r(e,"ReduceL1",t,(s,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${s.getByIndices("input_indices")});`,""])},Ia=(e,t)=>{ar(e.inputs),_r(e,"ReduceL2",t,(s,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${s.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},Fa=(e,t)=>{ar(e.inputs),_r(e,"ReduceLogSumExp",t,(s,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${s.getByIndices("input_indices")});`,"value = log(value);"])},Oa=(e,t)=>{ar(e.inputs),_r(e,"ReduceMax",t,(s,n,o)=>{let i=[];for(let a=0;a<s.rank;a++)(o.indexOf(a)>=0||o.length===0)&&i.push(s.indicesSet("input_indices",a,0));return[`${i.join(`
`)}`,`var value = ${s.getByIndices("input_indices")};`,`value = max(value, ${s.getByIndices("input_indices")});`,""]})},Uo=(e,t)=>{ar(e.inputs),_r(e,"ReduceMean",t,(s,n,o)=>{let i=1;for(let a=0;a<s.rank;a++)(o.indexOf(a)>=0||o.length===0)&&(i*=e.inputs[0].dims[a]);return["var sum = f32(0);","",`sum += f32(${s.getByIndices("input_indices")});`,`let value = ${n.type.value}(sum / ${i});`]})},Da=(e,t)=>{ar(e.inputs),_r(e,"ReduceMin",t,(s,n,o)=>{let i=[];for(let a=0;a<s.rank;a++)(o.indexOf(a)>=0||o.length===0)&&i.push(`input_indices[${a}] = 0;`);return[`${i.join(`
`)}`,`var value = ${s.getByIndices("input_indices")};`,`value = min(value, ${s.getByIndices("input_indices")});`,""]})},La=(e,t)=>{ar(e.inputs),_r(e,"ReduceProd",t,(s,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${s.getByIndices("input_indices")};`,""])},Vo=(e,t)=>{ar(e.inputs),_r(e,"ReduceSum",t,(s,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${s.getByIndices("input_indices")};`,""])},za=(e,t)=>{ar(e.inputs),_r(e,"ReduceSumSquare",t,(s,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${s.getByIndices("input_indices")}; value += t * t;`,""])},fr=(e,t,s)=>{if(t.length===0)return s;let n=1,o=1;for(let i=0;i<t.length;i++)t.indexOf(i)===-1?n*=e[i]:o*=e[i];return o<32&&n>1024},Go=(e,t)=>{fr(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Uo(e,t):Pa(e,t)},Ba=(e,t)=>{fr(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?so(e,t):Ea(e,t)},Ra=(e,t)=>{fr(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ia(e,t):No(e,t)},Ko=(e,t)=>{fr(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Fa(e,t):Ca(e,t)},Na=(e,t)=>{fr(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Oa(e,t):jo(e,t)},ja=(e,t)=>{fr(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Da(e,t):Yr(e,t)},Ho=(e,t)=>{fr(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?La(e,t):ka(e,t)},Wa=(e,t)=>{fr(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Vo(e,t):nc(e,t)},Ua=(e,t)=>{fr(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?za(e,t):Sa(e,t)},qo=(e,t)=>{fr(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Aa(e,t):oc(e,t)}}),Qo,Yo,Va,Jo,Ga=y(()=>{Lt(),It(),Xo(),Qo=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},Yo=(e,t)=>{Qo(e.inputs);let s=(n,o,i)=>{let a=[];for(let c=0;c<n.rank;c++)(i.indexOf(c)>=0||i.length===0)&&a.push(`input_indices[${c}] = 0;`);return[`${a.join(`
`)}`,`var value = ${n.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${n.getByIndices("input_indices")} ${t.selectLastIndex>0?"<=":"<"} value) {
         value = ${n.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",o.setByOffset("global_idx","best_index")]};e.compute(to("ArgMin",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],s,[t.axis],7,t.keepDims),{inputs:[0]})},Va=(e,t)=>{Qo(e.inputs);let s=(n,o,i)=>{let a=[];for(let c=0;c<n.rank;c++)(i.indexOf(c)>=0||i.length===0)&&a.push(`input_indices[${c}] = 0;`);return[`${a.join(`
`)}`,`var value = ${n.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${n.getByIndices("input_indices")} ${t.selectLastIndex>0?">=":">"} value) {
         value = ${n.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",o.setByOffset("global_idx","best_index")]};e.compute(to("argMax",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],s,[t.axis],7,t.keepDims),{inputs:[0]})},Jo=e=>Ye(e)}),Ka,ro,Zo,Ha,qa,fn,Xa,Qa,no=y(()=>{Lt(),Nt(),mn(),Ht(),Ka=(e,t)=>{let s=e[0],n=e[1],o=e[2],i=e[3],a=e[4],c=e[5];if(a&&c)throw new Error("Attention cannot have both past and attention_bias");if(s.dims.length!==3)throw new Error('Input "input" must have 3 dimensions');let p=s.dims[0],h=s.dims[1],k=s.dims[2];if(o.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimensions');if(n.dims.length!==2)throw new Error('Input "weights" is expected to have 2 dimensions');if(n.dims[0]!==k)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(o.dims[0]!==n.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let u=o.dims[0]/3,S=u,R=S;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let ce of t.qkvHiddenSizes)if(ce%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");u=t.qkvHiddenSizes[0],S=t.qkvHiddenSizes[1],R=t.qkvHiddenSizes[2]}let N=h;if(u!==S)throw new Error("qkv_hidden_sizes first element should be same as the second");if(o.dims[0]!==u+S+R)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let L=0;if(a){if(S!==R)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(a.dims.length!==5)throw new Error('Input "past" must have 5 dimensions');if(a.dims[0]!==2)throw new Error('Input "past" first dimension must be 2');if(a.dims[1]!==p)throw new Error('Input "past" second dimension must be batch_size');if(a.dims[2]!==t.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(a.dims[4]!==S/t.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');t.pastPresentShareBuffer||(L=a.dims[3])}let se=N+L,ee=-1,U=0;if(i)throw new Error("Mask not supported");if(a)throw new Error("past is not supported");if(c){if(c.dims.length!==4)throw new Error('Input "attention_bias" must have 4 dimensions');if(c.dims[0]!==p||c.dims[1]!==t.numHeads||c.dims[2]!==h||c.dims[3]!==se)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:p,sequenceLength:h,pastSequenceLength:L,kvSequenceLength:N,totalSequenceLength:se,maxSequenceLength:ee,inputHiddenSize:k,hiddenSize:u,vHiddenSize:R,headSize:Math.floor(u/t.numHeads),vHeadSize:Math.floor(R/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:U,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},ro=(e,t,s)=>t&&e?`
      let total_sequence_length_input = u32(${t.getByOffset("0")});
      let present_sequence_length = max(total_sequence_length_input, uniforms.past_sequence_length);
      let is_subsequent_prompt: bool = sequence_length > 1 && sequence_length != total_sequence_length_input;
      let is_first_prompt: bool = is_subsequent_prompt == false && sequence_length == total_sequence_length_input;
      total_sequence_length = u32(${e?.getByOffset("batchIdx")}) + 1;
      var past_sequence_length: u32 = 0;
      if (is_first_prompt == false) {
        past_sequence_length = total_sequence_length - sequence_length;
      }
       `:`
    ${s?"let past_sequence_length = uniforms.past_sequence_length":""};
    let present_sequence_length = total_sequence_length;
    `,Zo=(e,t,s,n,o,i,a,c)=>{let p=cs(a?1:i),h=64,k=i/p;k<h&&(h=32);let u=Math.ceil(i/p/h),S=[{type:12,data:t},{type:12,data:s},{type:12,data:n},{type:12,data:o},{type:12,data:k},{type:12,data:u}],R=Zt(e.dataType,p),N=ls(1,p),L=["type"];a&&L.push("type"),c&&L.push("type");let se=ee=>{let U=ft("x",e.dataType,e.dims,p),ce=[U],me=a?Le("seq_lens",a.dataType,a.dims):void 0;me&&ce.push(me);let ye=c?Le("total_sequence_length_input",c.dataType,c.dims):void 0;ye&&ce.push(ye);let ze=ls(e.dataType),Ee=[{name:"batch_size",type:"u32"},{name:"num_heads",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"sequence_length",type:"u32"},{name:"total_sequence_length",type:"u32"},{name:"elements_per_thread",type:"u32"}];return`
  var<workgroup> thread_max: array<f32, ${h}>;
  var<workgroup> thread_sum: array<f32, ${h}>;
  ${ee.registerUniforms(Ee).declareVariables(...ce)}
  ${ee.mainStart([h,1,1])}
    let batchIdx = workgroup_id.z / uniforms.num_heads;
    let headIdx = workgroup_id.z % uniforms.num_heads;
    let sequence_length = uniforms.sequence_length;
    var total_sequence_length = uniforms.total_sequence_length;
    ${ro(me,ye,!1)}
    let local_offset = local_idx * uniforms.elements_per_thread;
    let offset = (global_idx / ${h}) * uniforms.total_sequence_length + local_offset;
    let seq_causal_length = ${a?"u32(past_sequence_length + workgroup_id.y + 1)":"total_sequence_length"};
    var thread_max_vector = ${N}(-3.402823e+38f);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
      thread_max_vector = max(${N}(x[offset + i]), thread_max_vector);
    }
    thread_max[local_idx] = ${(()=>{switch(p){case 1:return"thread_max_vector";case 2:return"max(thread_max_vector.x, thread_max_vector.y)";case 4:return"max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))";default:throw new Error(`Unsupported components: ${p}`)}})()};
    workgroupBarrier();

    var max_value =  f32(-3.402823e+38f);
    for (var i = 0u; i < ${h}; i++) {
      max_value = max(thread_max[i], max_value);
    }

    var sum_vector = ${N}(0);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
      sum_vector += exp(${N}(x[offset + i]) - max_value);
    }
    thread_sum[local_idx] = ${(()=>{switch(p){case 1:return"sum_vector";case 2:return"sum_vector.x + sum_vector.y";case 4:return"sum_vector.x + sum_vector.y + sum_vector.z + sum_vector.w";default:throw new Error(`Unsupported components: ${p}`)}})()};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${h}; i++) {
      sum += thread_sum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
        x[offset + i] = ${U.type.value}(${ze}(1.0) / ${ze}(seq_causal_length));
      }
    } else {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
        var f32input = ${N}(x[offset + i]);
        x[offset + i] = ${U.type.value}(exp(f32input - max_value) / sum);
      }
    }
      ${a?`
        for (var total_seq_id: u32 = seq_causal_length; total_seq_id + local_offset < uniforms.total_sequence_length; total_seq_id++) {
          x[offset + total_seq_id] = ${U.type.value}(${ze}(0));
        }`:""};
  }`};return{name:"AttentionProbsSoftmax",shaderCache:{hint:`${h};${R};${p}`,inputDependencies:L},getShaderSource:se,getRunData:()=>({outputs:[],dispatchGroup:{x:Math.ceil(i/h),y:o,z:t*s},programUniforms:S})}},Ha=(e,t,s,n,o,i,a,c,p)=>{let h=a+i.kvSequenceLength,k=[i.batchSize,i.numHeads,i.sequenceLength,h],u=e>1&&n,S=i.kvNumHeads?i.kvNumHeads:i.numHeads,R=u?[i.batchSize,S,h,i.headSize]:void 0,N=i.nReps?i.nReps:1,L=i.scale===0?1/Math.sqrt(i.headSize):i.scale,se=cs(i.headSize),ee=i.headSize/se,U=12,ce={x:Math.ceil(h/U),y:Math.ceil(i.sequenceLength/U),z:i.batchSize*i.numHeads},me=[{type:12,data:i.sequenceLength},{type:12,data:ee},{type:12,data:h},{type:12,data:i.numHeads},{type:12,data:i.headSize},{type:1,data:L},{type:12,data:a},{type:12,data:i.kvSequenceLength},{type:12,data:N}],ye=u&&n&&Ce.size(n.dims)>0,ze=["type","type"];ye&&ze.push("type"),o&&ze.push("type"),c&&ze.push("type"),p&&ze.push("type");let Ee=[{dims:k,dataType:t.dataType,gpuDataType:0}];u&&Ee.push({dims:R,dataType:t.dataType,gpuDataType:0});let tt=mt=>{let Ct=Le("q",t.dataType,t.dims,se),Ft=Le("key",s.dataType,s.dims,se),$t=[Ct,Ft];if(ye){let qt=Le("past_key",n.dataType,n.dims,se);$t.push(qt)}o&&$t.push(Le("attention_bias",o.dataType,o.dims));let bt=c?Le("seq_lens",c.dataType,c.dims):void 0;bt&&$t.push(bt);let Kt=p?Le("total_sequence_length_input",p.dataType,p.dims):void 0;Kt&&$t.push(Kt);let jt=ft("output",t.dataType,k),Ot=[jt];u&&Ot.push(ft("present_key",t.dataType,R,se));let ss=ls(1,se),Jt=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"alpha",type:"f32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"n_reps",type:"u32"}];return`
  const TILE_SIZE = ${U}u;

  var<workgroup> tileQ: array<${Ct.type.storage}, ${U*U}>;
  var<workgroup> tileK: array<${Ct.type.storage}, ${U*U}>;
  ${mt.registerUniforms(Jt).declareVariables(...$t,...Ot)}
  ${mt.mainStart([U,U,1])}
    // x holds the N and y holds the M
    let headIdx = workgroup_id.z % uniforms.num_heads;
    let kvHeadIdx = ${N===1?"headIdx":"headIdx / uniforms.n_reps"};
    let kv_num_heads = ${N===1?"uniforms.num_heads":"uniforms.num_heads / uniforms.n_reps"};
    let batchIdx = workgroup_id.z / uniforms.num_heads;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let sequence_length = uniforms.M;
    var total_sequence_length = uniforms.N;
    ${ro(bt,Kt,!0)}
    let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx;
    let qOffset = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;
    ${ye&&u?"let pastKeyOffset = absKvHeadIdx * uniforms.past_sequence_length * uniforms.K;":""};
    let kOffset = absKvHeadIdx * uniforms.kv_sequence_length * uniforms.K;
    ${u?"let presentKeyOffset = absKvHeadIdx * uniforms.N * uniforms.K;":""}
    var value = ${ss}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
      ${ye&&u?`
              if (n + local_id.y < past_sequence_length) {
                tileK[idx] = past_key[pastKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
              } else if (n + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {
                tileK[idx] = key[kOffset + (n + local_id.y - past_sequence_length) * uniforms.K + w + local_id.x];
              }`:`
          if (n + local_id.y < uniforms.kv_sequence_length) {
            tileK[idx] = key[kOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
          }`}
      ${u?`if (n + local_id.y < present_sequence_length) {
        present_key[presentKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x] = tileK[idx];
      }`:""}
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {
          value += ${ss}(tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k]);
      }

      workgroupBarrier();
    }

    if (global_id.y < uniforms.M && global_id.x < total_sequence_length) {
      let headOffset = workgroup_id.z * uniforms.M * uniforms.N;
      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;
      var sum: f32 = ${(()=>{switch(se){case 1:return"value";case 2:return"value.x + value.y";case 4:return"value.x + value.y + value.z + value.w";default:throw new Error(`Unsupported components: ${se}`)}})()};
        output[outputIdx] = ${jt.type.value} (sum * uniforms.alpha) + ${o?"attention_bias[outputIdx]":"0.0"};
    }
  }`};return{name:"AttentionProbs",shaderCache:{hint:`${se};${o!==void 0};${n!==void 0};${e}`,inputDependencies:ze},getRunData:()=>({outputs:Ee,dispatchGroup:ce,programUniforms:me}),getShaderSource:tt}},qa=(e,t,s,n,o,i,a=void 0,c=void 0)=>{let p=i+o.kvSequenceLength,h=o.nReps?o.nReps:1,k=o.vHiddenSize*h,u=e>1&&n,S=o.kvNumHeads?o.kvNumHeads:o.numHeads,R=u?[o.batchSize,S,p,o.headSize]:void 0,N=[o.batchSize,o.sequenceLength,k],L=12,se={x:Math.ceil(o.vHeadSize/L),y:Math.ceil(o.sequenceLength/L),z:o.batchSize*o.numHeads},ee=[{type:12,data:o.sequenceLength},{type:12,data:p},{type:12,data:o.vHeadSize},{type:12,data:o.numHeads},{type:12,data:o.headSize},{type:12,data:k},{type:12,data:i},{type:12,data:o.kvSequenceLength},{type:12,data:h}],U=u&&n&&Ce.size(n.dims)>0,ce=["type","type"];U&&ce.push("type"),a&&ce.push("type"),c&&ce.push("type");let me=[{dims:N,dataType:t.dataType,gpuDataType:0}];u&&me.push({dims:R,dataType:t.dataType,gpuDataType:0});let ye=ze=>{let Ee=Le("probs",t.dataType,t.dims),tt=Le("v",s.dataType,s.dims),mt=[Ee,tt];U&&mt.push(Le("past_value",n.dataType,n.dims));let Ct=a?Le("seq_lens",a.dataType,a.dims):void 0;a&&mt.push(Ct);let Ft=c?Le("total_sequence_length_input",c.dataType,c.dims):void 0;c&&mt.push(Ft);let $t=[ft("output",t.dataType,N)];u&&$t.push(ft("present_value",t.dataType,R));let bt=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"v_hidden_size",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"n_reps",type:"u32"}];return`
  const TILE_SIZE = ${L}u;
  var<workgroup> tileQ: array<${Ee.type.value}, ${L*L}>;
  var<workgroup> tileV: array<${Ee.type.value}, ${L*L}>;
  ${ze.registerUniforms(bt).declareVariables(...mt,...$t)}
  ${ze.mainStart([L,L,1])}
   let headIdx = workgroup_id.z % uniforms.num_heads;
   let batchIdx = workgroup_id.z / uniforms.num_heads;
   let kvHeadIdx = ${h===1?"headIdx":"headIdx / uniforms.n_reps"};
   let kv_num_heads = ${h===1?"uniforms.num_heads":"uniforms.num_heads / uniforms.n_reps"};
   let m = global_id.y;
   let n = global_id.x;
   let sequence_length = uniforms.M;
   var total_sequence_length = uniforms.K;
   ${ro(Ct,Ft,!0)}
   let offsetA = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;
   let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx; // kvHeadIdx is relative to the batch
   ${U&&u?"let pastValueOffset = absKvHeadIdx * uniforms.N * uniforms.past_sequence_length + n;":""};
   let vOffset = absKvHeadIdx * uniforms.N * uniforms.kv_sequence_length + n;
   ${u?"let presentValueOffset = absKvHeadIdx * uniforms.N * uniforms.K + n;":""}
   var value = ${Ee.type.storage}(0);
   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
        ${U&&u?`
        if (w + local_id.y < past_sequence_length) {
          tileV[idx] = past_value[pastValueOffset + (w + local_id.y) * uniforms.N];
        } else if (w + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {
          tileV[idx] = v[vOffset + (w + local_id.y - past_sequence_length) * uniforms.N];
        }
      `:`
            if (w + local_id.y < uniforms.kv_sequence_length) {
              tileV[idx] = v[vOffset + (w + local_id.y) * uniforms.N];
            }`}
        ${u?`
            if (w + local_id.y < present_sequence_length) {
          present_value[presentValueOffset + (w + local_id.y) * uniforms.N] = tileV[idx];
        }`:""}
      }
     workgroupBarrier();
     for (var k: u32 = 0u; k < TILE_SIZE && w+k < total_sequence_length; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileV[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   if (m < uniforms.M && n < uniforms.N) {
     let outputIdx = batchIdx * uniforms.M * uniforms.v_hidden_size + m * uniforms.v_hidden_size
       + headIdx * uniforms.N + n;
     output[outputIdx] = value;
   }
  }`};return{name:"AttentionScore",shaderCache:{hint:`${n!==void 0};${e}`,inputDependencies:ce},getRunData:()=>({outputs:me,dispatchGroup:se,programUniforms:ee}),getShaderSource:ye}},fn=(e,t,s,n,o,i,a,c,p,h,k=void 0,u=void 0)=>{let S=Math.min(e.outputCount,1+(a?1:0)+(c?1:0)),R=S>1?h.pastSequenceLength:0,N=R+h.kvSequenceLength,L=p&&Ce.size(p.dims)>0?p:void 0,se=[t,s];S>1&&a&&Ce.size(a.dims)>0&&se.push(a),L&&se.push(L),k&&se.push(k),u&&se.push(u);let ee=e.compute(Ha(S,t,s,a,L,h,R,k,u),{inputs:se,outputs:S>1?[-1,1]:[-1]})[0];e.compute(Zo(ee,h.batchSize,h.numHeads,R,h.sequenceLength,N,k,u),{inputs:k&&u?[ee,k,u]:[ee],outputs:[]});let U=[ee,n];S>1&&c&&Ce.size(c.dims)>0&&U.push(c),k&&U.push(k),u&&U.push(u),e.compute(qa(S,ee,n,c,h,R,k,u),{inputs:U,outputs:S>1?[0,2]:[0]})},Xa=(e,t)=>{let s=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],n=t.sequenceLength,o=t.inputHiddenSize,i=t.headSize,a=12,c={x:Math.ceil(t.headSize/a),y:Math.ceil(t.sequenceLength/a),z:t.batchSize*t.numHeads},p=[e.inputs[0],e.inputs[1],e.inputs[2]],h=[{type:12,data:n},{type:12,data:o},{type:12,data:i},{type:12,data:t.numHeads},{type:12,data:t.headSize},{type:12,data:t.hiddenSize},{type:12,data:t.hiddenSize+t.hiddenSize+t.vHiddenSize}],k=u=>{let S=ft("output_q",p[0].dataType,s),R=ft("output_k",p[0].dataType,s),N=ft("output_v",p[0].dataType,s),L=Le("input",p[0].dataType,p[0].dims),se=Le("weight",p[1].dataType,p[1].dims),ee=Le("bias",p[2].dataType,p[2].dims),U=L.type.storage,ce=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`
  const TILE_SIZE = ${a}u;
  var<workgroup> tileInput: array<${U}, ${a*a}>;
  var<workgroup> tileWeightQ: array<${U}, ${a*a}>;
  var<workgroup> tileWeightK: array<${U}, ${a*a}>;
  var<workgroup> tileWeightV: array<${U}, ${a*a}>;
  ${u.registerUniforms(ce).declareVariables(L,se,ee,S,R,N)}
  ${u.mainStart([a,a,1])}
    let batchIndex = workgroup_id.z / uniforms.num_heads;
    let headNumber = workgroup_id.z % uniforms.num_heads;
    let m = global_id.y;
    let n = global_id.x;

    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;
    let biasOffsetQ = headNumber * uniforms.head_size;
    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;
    let biasOffsetV = uniforms.hidden_size + biasOffsetK;

    var valueQ = ${U}(0);
    var valueK = ${U}(0);
    var valueV = ${U}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        let offset = n + (w + local_id.y) * uniforms.ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * uniforms.N + n) % uniforms.head_size;
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * uniforms.M * uniforms.N;
    if (m < uniforms.M && n < uniforms.N) {
      let outputIdx = offset + m * uniforms.N + n;
      output_q[outputIdx] = valueQ;
      output_k[outputIdx] = valueK;
      output_v[outputIdx] = valueV;
    }
  }`};return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:s,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:s,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:s,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:c,programUniforms:h}),getShaderSource:k},{inputs:p,outputs:[-1,-1,-1]})},Qa=(e,t)=>{let s=Ka(e.inputs,t),[n,o,i]=Xa(e,s);return fn(e,n,o,i,e.inputs[4],void 0,void 0,void 0,e.inputs[5],s)}}),Ya,Ja,ei,Za,ac=y(()=>{He(),Lt(),Nt(),It(),Ht(),Ya=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let s=(n,o,i)=>{let a=o.length;if(a!==n.length)throw new Error(`${i}: num dimensions != ${a}`);o.forEach((c,p)=>{if(c!==n[p])throw new Error(`${i}: dim[${p}] do not match`)})};if(e[0].dims.length>1){let n=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);s(e[1].dims,n,"Invalid input scale"),s(e[2].dims,n,"Invalid input B"),s(e[3].dims,n,"Invalid input mean"),s(e[4].dims,n,"Invalid input var")}else s(e[1].dims,[1],"Invalid input scale"),s(e[2].dims,[1],"Invalid input B"),s(e[3].dims,[1],"Invalid input mean"),s(e[4].dims,[1],"Invalid input var")},Ja=(e,t)=>{let{epsilon:s,spatial:n,format:o}=t,i=e[0].dims,a=n?cs(i[i.length-1]):1,c=o==="NHWC"&&i.length>1?a:1,p=Ce.size(i)/a,h=n,k=h?i.length:i,u=Le("x",e[0].dataType,e[0].dims,a),S=Le("scale",e[1].dataType,e[1].dims,c),R=Le("bias",e[2].dataType,e[2].dims,c),N=Le("inputMean",e[3].dataType,e[3].dims,c),L=Le("inputVar",e[4].dataType,e[4].dims,c),se=ft("y",e[0].dataType,k,a),ee=()=>{let ce="";if(n)ce=`let cOffset = ${i.length===1?"0u":o==="NHWC"?`outputIndices[${i.length-1}] / ${a}`:"outputIndices[1]"};`;else if(o==="NCHW")ce=`
            ${se.indicesSet("outputIndices","0","0")}
            let cOffset = ${se.indicesToOffset("outputIndices")};`;else{ce=`var cIndices = ${S.type.indices}(0);
                       cIndices[0] = outputIndices[${i.length-1}];`;for(let me=1;me<S.rank;me++)ce+=`cIndices[${me}] = outputIndices[${me}];`;ce+=`let cOffset = ${S.indicesToOffset("cIndices")};`}return ce},U=ce=>`
  const epsilon = ${s};
  ${ce.registerUniform("outputSize","u32").declareVariables(u,S,R,N,L,se)}
  ${ce.mainStart()}
  ${ce.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${se.offsetToIndices(`global_idx * ${a}`)};
    ${ee()}
    let scale = ${S.getByOffset("cOffset")};
    let bias = ${R.getByOffset("cOffset")};
    let inputMean = ${N.getByOffset("cOffset")};
    let inputVar = ${L.getByOffset("cOffset")};
    let x = ${u.getByOffset("global_idx")};
    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;
    ${se.setByOffset("global_idx","value")}
  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${n}_${a}`,inputDependencies:h?["rank","type","type","type","type"]:void 0},getShaderSource:U,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:h?[{type:12,data:p},...Tt(i)]:[{type:12,data:p}]})}},ei=e=>Ye(e),Za=(e,t)=>{let{inputs:s,outputCount:n}=e,o=ei({...t,outputCount:n});if(x.webgpu.validateInputContent&&Ya(s,o),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(Ja(s,o))}}),ti,el,tl,sl=y(()=>{Nt(),Ht(),ti=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},el=e=>{let t=e[0].dims,s=e[0].dims[2],n=Ce.size(t)/4,o=e[0].dataType,i=Le("input",o,t,4),a=Le("bias",o,[s],4),c=Le("residual",o,t,4),p=ft("output",o,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)}}),getShaderSource:h=>`
  const channels = ${s}u / 4;
  ${h.declareVariables(i,a,c,p)}

  ${h.mainStart()}
    ${h.guardAgainstOutOfBoundsWorkgroupSizes(n)}
    let value = ${i.getByOffset("global_idx")}
      + ${a.getByOffset("global_idx % channels")} + ${c.getByOffset("global_idx")};
    ${p.setByOffset("global_idx","value")}
  }`}},tl=e=>{ti(e.inputs),e.compute(el(e.inputs))}}),rl,is,si,nl,ol,ri,il,al,ni,ll,ul,oi,dl,cl,ii,pl,On,hl,oo,ai,ml,_l,li,fl,gl,ui,wl,yl,di,Ml,bl,ci,vl,Tl,pi,hi,xl,io,mi,Pl,El,Cl,_i,kl,Sl,fi=y(()=>{Lt(),Nt(),It(),Ht(),rl=(e,t,s,n,o,i,a)=>{let c=Math.ceil(t/4),p="";typeof o=="string"?p=`${o}(a)`:p=o("a");let h=Le("inputData",s,[c],4),k=ft("outputData",n,[c],4),u=[{name:"vec_size",type:"u32"}];return a&&u.push(...a),`
      ${e.registerUniforms(u).declareVariables(h,k)}

  ${i??""}

  ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${h.getByOffset("global_idx")};
    ${k.setByOffset("global_idx",p)}
  }`},is=(e,t,s,n,o,i=e.dataType,a,c)=>{let p=[{type:12,data:Math.ceil(Ce.size(e.dims)/4)}];return a&&p.push(...a),{name:t,shaderCache:{hint:o,inputDependencies:["type"]},getShaderSource:h=>rl(h,Ce.size(e.dims),e.dataType,i,s,n,c),getRunData:h=>({outputs:[{dims:e.dims,dataType:i}],dispatchGroup:{x:Math.ceil(Ce.size(h[0].dims)/64/4)},programUniforms:p})}},si=e=>{e.compute(is(e.inputs[0],"Abs","abs"))},nl=e=>{e.compute(is(e.inputs[0],"Acos","acos"))},ol=e=>{e.compute(is(e.inputs[0],"Acosh","acosh"))},ri=e=>{e.compute(is(e.inputs[0],"Asin","asin"))},il=e=>{e.compute(is(e.inputs[0],"Asinh","asinh"))},al=e=>{e.compute(is(e.inputs[0],"Atan","atan"))},ni=e=>{e.compute(is(e.inputs[0],"Atanh","atanh"))},ll=e=>Ye(e),ul=(e,t)=>{let s;switch(t.to){case 10:s="vec4<f16>";break;case 1:s="vec4<f32>";break;case 12:s="vec4<u32>";break;case 6:s="vec4<i32>";break;case 9:s="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${t.to}`)}e.compute(is(e.inputs[0],"Cast",s,void 0,t.cacheKey,t.to))},oi=e=>{let t,s,n=e.length>=2&&e[1].data!==0,o=e.length>=3&&e[2].data!==0;switch(e[0].dataType){case 1:t=n?e[1].getFloat32Array()[0]:-34028234663852886e22,s=o?e[2].getFloat32Array()[0]:34028234663852886e22;break;case 10:t=n?e[1].getUint16Array()[0]:64511,s=o?e[2].getUint16Array()[0]:31743;break;default:throw new Error("Unsupport data type")}return Ye({min:t,max:s})},dl=(e,t)=>{let s=t||oi(e.inputs),n=ls(e.inputs[0].dataType);e.compute(is(e.inputs[0],"Clip",o=>`clamp(${o}, vec4<${n}>(uniforms.min), vec4<${n}>(uniforms.max))`,void 0,s.cacheKey,void 0,[{type:e.inputs[0].dataType,data:s.min},{type:e.inputs[0].dataType,data:s.max}],[{name:"min",type:n},{name:"max",type:n}]),{inputs:[0]})},cl=e=>{e.compute(is(e.inputs[0],"Ceil","ceil"))},ii=e=>{e.compute(is(e.inputs[0],"Cos","cos"))},pl=e=>{e.compute(is(e.inputs[0],"Cosh","cosh"))},On=e=>Ye(e),hl=(e,t)=>{let s=ls(e.inputs[0].dataType);e.compute(is(e.inputs[0],"Elu",n=>`elu_vf32(${n})`,`
  const elu_alpha_ = ${s}(${t.alpha});

  fn elu_f32(a: ${s}) -> ${s} {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<${s}>) -> vec4<${s}> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,t.cacheKey))},oo=(e="f32")=>`
const r0: ${e} = 0.3275911;
const r1: ${e} = 0.254829592;
const r2: ${e} = -0.284496736;
const r3: ${e} = 1.421413741;
const r4: ${e} = -1.453152027;
const r5: ${e} = 1.061405429;

fn erf_vf32(v: vec4<${e}>) -> vec4<${e}> {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,ai=e=>{let t=ls(e.inputs[0].dataType);e.compute(is(e.inputs[0],"Erf",s=>`erf_vf32(${s})`,oo(t)))},ml=e=>{e.compute(is(e.inputs[0],"Exp","exp"))},_l=e=>{e.compute(is(e.inputs[0],"Floor","floor"))},li=e=>{let t=ls(e.inputs[0].dataType);e.compute(is(e.inputs[0],"Gelu",s=>`0.5 * ${s} * (1.0 + erf_vf32(${s} * 0.7071067811865475))`,oo(t)))},fl=(e,t)=>{let s=ls(e.inputs[0].dataType);e.compute(is(e.inputs[0],"LeakyRelu",n=>`select(leaky_relu_alpha_ * ${n}, ${n}, ${n} >= vec4<${s}>(0.0))`,`const leaky_relu_alpha_ = ${s}(${t.alpha});`,t.cacheKey))},gl=e=>{e.compute(is(e.inputs[0],"Not",t=>`!${t}`))},ui=e=>{e.compute(is(e.inputs[0],"Neg",t=>`-${t}`))},wl=e=>{e.compute(is(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},yl=e=>{let t=ls(e.inputs[0].dataType);e.compute(is(e.inputs[0],"Relu",s=>`select(vec4<${t}>(0.0), ${s}, ${s} > vec4<${t}>(0.0))`))},di=e=>{e.compute(is(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},Ml=e=>Ye(e),bl=(e,t)=>{let s=ls(e.inputs[0].dataType);e.compute(is(e.inputs[0],"HardSigmoid",n=>`max(vec4<${s}>(0.0), min(vec4<${s}>(1.0), ${t.alpha} * ${n} + vec4<${s}>(${t.beta})))`,void 0,t.cacheKey))},ci=e=>{e.compute(is(e.inputs[0],"Sin","sin"))},vl=e=>{e.compute(is(e.inputs[0],"Sinh","sinh"))},Tl=e=>{e.compute(is(e.inputs[0],"Sqrt","sqrt"))},pi=e=>{e.compute(is(e.inputs[0],"Tan","tan"))},hi=e=>`sign(${e}) * (1 - exp(-2 * abs(${e}))) / (1 + exp(-2 * abs(${e})))`,xl=e=>{e.compute(is(e.inputs[0],"Tanh",hi))},io=(e="f32")=>`
const fast_gelu_a: ${e} = 0.5;
const fast_gelu_b: ${e} = 0.7978845608028654;
const fast_gelu_c: ${e} = 0.035677408136300125;

fn tanh_v(v: vec4<${e}>) -> vec4<${e}> {
  return ${hi("v")};
}
`,mi=e=>`(fast_gelu_a + fast_gelu_a * tanh_v(${e} * (fast_gelu_c * ${e} * ${e} + fast_gelu_b))) * ${e}`,Pl=e=>{let t=ls(e.inputs[0].dataType);e.compute(is(e.inputs[0],"FastGelu",mi,io(t),void 0,e.inputs[0].dataType))},El=(e,t)=>{let s=ls(e.inputs[0].dataType);return e.compute(is(e.inputs[0],"ThresholdedRelu",n=>`select(vec4<${s}>(0.0), ${n}, ${n} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${s}>(${t.alpha});`,t.cacheKey)),0},Cl=e=>{e.compute(is(e.inputs[0],"Log","log"))},_i=(e,t)=>`
const alpha = vec4<${e}>(${t});
const one = ${e}(1.0);
const zero = ${e}(0.0);

fn quick_gelu_impl(x: vec4<${e}>) -> vec4<${e}> {
  let v = x *alpha;
  var x1 : vec4<${e}>;
  for (var i = 0; i < 4; i = i + 1) {
    if (v[i] >= zero) {
      x1[i] = one / (one + exp(-v[i]));
    } else {
      x1[i] = one - one / (one + exp(v[i]));
    }
  }
  return x * x1;
}
`,kl=e=>`quick_gelu_impl(${e})`,Sl=(e,t)=>{let s=ls(e.inputs[0].dataType);e.compute(is(e.inputs[0],"QuickGelu",kl,_i(s,t.alpha),t.cacheKey,e.inputs[0].dataType))}}),$l,gi,Al,lc=y(()=>{Nt(),Ht(),fi(),$l=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},gi=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let s=Le("input",e[0].dataType,e[0].dims,4),n=Le("bias",e[0].dataType,[e[0].dims[2]],4),o=ft("output",e[0].dataType,t,4),i=Ce.size(t)/4,a=Zt(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)}}),getShaderSource:c=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${e[0].dims[2]/4/2}u;

  ${c.declareVariables(s,n,o)}

  ${oo(a)}

  ${c.mainStart()}
    ${c.guardAgainstOutOfBoundsWorkgroupSizes(i)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${o.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},Al=e=>{$l(e.inputs),e.compute(gi(e.inputs))}}),Il,Fl,lr,Ol,Dl,Ll,zl,wi,Bl,Rl,yi,Nl,jl,Wl=y(()=>{Lt(),Nt(),Ht(),Il=(e,t,s,n,o,i,a,c,p,h,k,u)=>{let S,R;typeof c=="string"?S=R=(U,ce)=>`${c}((${U}),(${ce}))`:typeof c=="function"?S=R=c:(S=c.scalar,R=c.vector);let N=ft("outputData",k,n.length,4),L=Le("aData",p,t.length,4),se=Le("bData",h,s.length,4),ee;if(o)if(i){let U=Ce.size(t)===1,ce=Ce.size(s)===1,me=t.length>0&&t[t.length-1]%4===0,ye=s.length>0&&s[s.length-1]%4===0;U||ce?ee=N.setByOffset("global_idx",R(U?`${L.type.value}(${L.getByOffset("0")}.x)`:L.getByOffset("global_idx"),ce?`${se.type.value}(${se.getByOffset("0")}.x)`:se.getByOffset("global_idx"))):ee=`
            let outputIndices = ${N.offsetToIndices("global_idx * 4u")};
            let offsetA = ${L.broadcastedIndicesToOffset("outputIndices",N)};
            let offsetB = ${se.broadcastedIndicesToOffset("outputIndices",N)};
            ${N.setByOffset("global_idx",R(a||me?L.getByOffset("offsetA / 4u"):`${L.type.value}(${L.getByOffset("offsetA / 4u")}[offsetA % 4u])`,a||ye?se.getByOffset("offsetB / 4u"):`${se.type.value}(${se.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `}else ee=N.setByOffset("global_idx",R(L.getByOffset("global_idx"),se.getByOffset("global_idx")));else{if(!i)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let U=(ce,me,ye="")=>{let ze=`aData[indexA${me}][componentA${me}]`,Ee=`bData[indexB${me}][componentB${me}]`;return`
            let outputIndices${me} = ${N.offsetToIndices(`global_idx * 4u + ${me}u`)};
            let offsetA${me} = ${L.broadcastedIndicesToOffset(`outputIndices${me}`,N)};
            let offsetB${me} = ${se.broadcastedIndicesToOffset(`outputIndices${me}`,N)};
            let indexA${me} = offsetA${me} / 4u;
            let indexB${me} = offsetB${me} / 4u;
            let componentA${me} = offsetA${me} % 4u;
            let componentB${me} = offsetB${me} % 4u;
            ${ce}[${me}] = ${ye}(${S(ze,Ee)});
          `};k===9?ee=`
            var data = vec4<u32>(0);
            ${U("data",0,"u32")}
            ${U("data",1,"u32")}
            ${U("data",2,"u32")}
            ${U("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:ee=`
            ${U("outputData[global_idx]",0)}
            ${U("outputData[global_idx]",1)}
            ${U("outputData[global_idx]",2)}
            ${U("outputData[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(L,se,N)}

        ${u??""}

        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${ee}
      }`},Fl=(e,t,s,n,o,i,a=s.dataType)=>{let c=s.dims.map(L=>Number(L)??1),p=n.dims.map(L=>Number(L)??1),h=!Ce.areEqual(c,p),k=c,u=Ce.size(c),S=!1,R=!1,N=[h];if(h){let L=_s.calcShape(c,p,!1);if(!L)throw new Error("Can't perform binary op on the given tensors");k=L.slice(),u=Ce.size(k);let se=Ce.size(c)===1,ee=Ce.size(p)===1,U=c.length>0&&c[c.length-1]%4===0,ce=p.length>0&&p[p.length-1]%4===0;N.push(se),N.push(ee),N.push(U),N.push(ce);let me=1;for(let ye=1;ye<k.length;ye++){let ze=c[c.length-ye],Ee=p[p.length-ye];if(ze===Ee)me*=ze;else break}me%4===0?(R=!0,S=!0):(se||ee||U||ce)&&(S=!0)}else S=!0;return N.push(S),{name:e,shaderCache:{hint:t+N.map(L=>L.toString()).join("_"),inputDependencies:["rank","rank"]},getShaderSource:L=>Il(L,c,p,k,S,h,R,o,s.dataType,n.dataType,a,i),getRunData:()=>({outputs:[{dims:k,dataType:a}],dispatchGroup:{x:Math.ceil(u/64/4)},programUniforms:[{type:12,data:Math.ceil(Ce.size(k)/4)},...Tt(c,p,k)]})}},lr=(e,t,s,n,o,i)=>{e.compute(Fl(t,o??"",e.inputs[0],e.inputs[1],s,n,i))},Ol=e=>{lr(e,"Add",(t,s)=>`${t}+${s}`)},Dl=e=>{lr(e,"Div",(t,s)=>`${t}/${s}`)},Ll=e=>{lr(e,"Equal",{scalar:(t,s)=>`u32(${t}==${s})`,vector:(t,s)=>`vec4<u32>(${t}==${s})`},void 0,void 0,9)},zl=e=>{lr(e,"Mul",(t,s)=>`${t}*${s}`)},wi=e=>{let t=Le("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;lr(e,"Pow",{scalar:(s,n)=>`pow_custom(${s},${n})`,vector:(s,n)=>`pow_vector_custom(${s},${n})`},`
    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {
      if (b == ${t}(0.0)) {
        return ${t}(1.0);
      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {
        return ${t}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {
      // TODO: implement vectorized pow
      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},Bl=e=>{lr(e,"Sub",(t,s)=>`${t}-${s}`)},Rl=e=>{lr(e,"Greater",{scalar:(t,s)=>`u32(${t}>${s})`,vector:(t,s)=>`vec4<u32>(${t}>${s})`},void 0,void 0,9)},yi=e=>{lr(e,"Less",{scalar:(t,s)=>`u32(${t}<${s})`,vector:(t,s)=>`vec4<u32>(${t}<${s})`},void 0,void 0,9)},Nl=e=>{lr(e,"GreaterOrEqual",{scalar:(t,s)=>`u32(${t}>=${s})`,vector:(t,s)=>`vec4<u32>(${t}>=${s})`},void 0,void 0,9)},jl=e=>{lr(e,"LessOrEqual",{scalar:(t,s)=>`u32(${t}<=${s})`,vector:(t,s)=>`vec4<u32>(${t}<=${s})`},void 0,void 0,9)}}),Ul,Vl,Mi,Gl,Kl,bi,uc=y(()=>{Lt(),Nt(),It(),Ht(),Ul=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");let s=0,n=e[s],o=n.dataType,i=n.dims.length;e.forEach((a,c)=>{if(c!==s){if(a.dataType!==o)throw new Error("input tensors should be one type");if(a.dims.length!==i)throw new Error("input tensors should have the same shape");a.dims.forEach((p,h)=>{if(h!==t&&p!==n.dims[h])throw new Error("non concat dimensions must match")})}})},Vl=(e,t)=>`
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${e}u>(${t});
    for (var i: u32 = 0u; i < ${e}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${e}u;
  }`,Mi=(e,t)=>{let s=e.length,n=[];for(let o=0;o<s;++o){let i=t.setByOffset("global_idx",e[o].getByIndices("indices"));s===1?n.push(i):o===0?n.push(`if (inputIndex == ${o}u) { ${i} }`):o===s-1?n.push(`else { ${i} }`):n.push(`else if (inputIndex == ${o}) { ${i} }`)}return n.join(`
`)},Gl=(e,t,s,n)=>{let o=Ce.size(s),i=new Array(e.length),a=new Array(e.length),c=0,p=[],h=[],k=[{type:12,data:o}];for(let L=0;L<e.length;++L)c+=e[L].dims[t],i[L]=c,h.push(e[L].dims.length),a[L]=Le(`input${L}`,n,h[L]),p.push("rank"),k.push({type:12,data:i[L]});for(let L=0;L<e.length;++L)k.push(...Tt(e[L].dims));k.push(...Tt(s));let u=ft("output",n,s.length),S=u.indicesGet("indices",t),R=Array.from(Array(i.length).keys()).map(L=>`uniforms.sizeInConcatAxis${L}`).join(","),N=L=>`

  ${(()=>{L.registerUniform("outputSize","u32");for(let se=0;se<e.length;se++)L.registerUniform(`sizeInConcatAxis${se}`,"u32");return L.declareVariables(...a,u)})()}

  ${Vl(i.length,R)}

  ${L.mainStart()}
    ${L.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${u.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${S});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${i.length}u>(${R});
      ${S} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${Mi(a,u)}
  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:p},getRunData:()=>({outputs:[{dims:s,dataType:n}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:k}),getShaderSource:N}},Kl=(e,t)=>{let s=e.inputs,n=s[0].dims,o=Ce.normalizeAxis(t.axis,n.length);Ul(s,o);let i=n.slice();i[o]=s.reduce((c,p)=>c+(p.dims.length>o?p.dims[o]:0),0);let a=s.filter(c=>Ce.size(c.dims)>0);e.compute(Gl(a,o,i,s[0].dataType),{inputs:a})},bi=e=>Ye({axis:e.axis})}),Jr,Cr,Zr,vi,Rr=y(()=>{Lt(),Nt(),Jr=(e,t,s="f32")=>{switch(e.activation){case"Relu":return`value = max(value, ${t}(0.0));`;case"Sigmoid":return`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`;case"Clip":return`value = clamp(value, ${t}(${s}(uniforms.clip_min)), ${t}(${s}(uniforms.clip_max)));`;case"HardSigmoid":return`value = max(${t}(0.0), min(${t}(1.0), ${s}(uniforms.alpha) * value + ${s}(uniforms.beta)));`;case"LeakyRelu":return`value = select(${s}(uniforms.alpha) * value, value, value >= ${t}(0.0));`;case"Tanh":return`let e2x = exp(-2.0 * abs(value));
              value = sign(value) * (1.0 - e2x) / (1.0 + e2x);
        `;case"":return"";default:throw new Error(`Unsupported activation ${e.activation}`)}},Cr=(e,t)=>{e.activation==="Clip"?t.push({type:1,data:e.clipMax},{type:1,data:e.clipMin}):e.activation==="HardSigmoid"?t.push({type:1,data:e.alpha},{type:1,data:e.beta}):e.activation==="LeakyRelu"&&t.push({type:1,data:e.alpha})},Zr=(e,t)=>{e.activation==="Clip"?t.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}):e.activation==="HardSigmoid"?t.push({name:"alpha",type:"f32"},{name:"beta",type:"f32"}):e.activation==="LeakyRelu"&&t.push({name:"alpha",type:"f32"})},vi=e=>{let t=e?.activation||"";if(t==="HardSigmoid"){let[s,n]=e?.activation_params||[.2,.5];return{activation:t,alpha:s,beta:n}}else if(t==="Clip"){let[s,n]=e?.activation_params||[Ns,ir];return{activation:t,clipMax:n,clipMin:s}}else if(t==="LeakyRelu"){let[s]=e?.activation_params||[.01];return{activation:t,alpha:s}}return{activation:t}}}),Ws,Hl,ao=y(()=>{Ws=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},Hl=e=>`
      ${e?"value = value + getBiasByOutputCoords(coords);":""}
      `}),ql,dc=y(()=>{ql=e=>`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));
}
`}),Dn,lo,Ti=y(()=>{Lt(),Nt(),Ht(),Rr(),Dn=(e,t,s,n,o)=>{let i=n-s;return`
      ${Array.from({length:s}).map((a,c)=>`
      if (${Mt(t.shape,c,t.rank)} != 1) {
        ${t.indicesSet(e,c,Mt(o,c+i,n))}
      } else {
        ${t.indicesSet(e,c,0)}
      }`).join("")}
`},lo=(e,t,s,n,o=!1,i)=>{let a=e[0].dims,c=e[1].dims,p=a[a.length-2],h=c[c.length-1],k=a[a.length-1],u=cs(h),S=cs(k),R=cs(p),N=Ce.size(s)/u/R,L=e.length>2,se=n?n.slice(0,-2):s.slice(0,-2),ee=[Ce.size(se),p,h],U=[{type:12,data:N},{type:12,data:p},{type:12,data:h},{type:12,data:k}];Cr(t,U),U.push(...Tt(se,a,c)),L&&U.push(...Tt(e[2].dims)),U.push(...Tt(ee));let ce=me=>{let ye=Qr("batch_dims",e[0].dataType,se.length),ze=Le("a",e[0].dataType,a.length,S),Ee=Le("b",e[1].dataType,c.length,u),tt=ft("output",e[0].dataType,ee.length,u),mt=Zt(tt.type.tensor),Ct=Jr(t,tt.type.value,mt),Ft=[ze,Ee],$t="";if(L){let jt=o?u:1;Ft.push(Le("bias",e[2].dataType,e[2].dims.length,jt)),$t=`${o?`value += bias[col / ${jt}];`:`value += ${tt.type.value}(bias[row + i]);`}`}let bt=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"}];Zr(t,bt);let Kt=()=>{let jt=`var a_data: ${ze.type.value};`;for(let Ot=0;Ot<S;Ot++)jt+=`
              let b_data${Ot} = b[(b_offset + (k + ${Ot}) * uniforms.N + col) / ${u}];`;for(let Ot=0;Ot<R;Ot++){jt+=`a_data = a[(a_offset + (row + ${Ot}) * uniforms.K + k) / ${S}];`;for(let ss=0;ss<S;ss++)jt+=`
            values[${Ot}] = fma(${Ee.type.value}(a_data${S===1?"":`[${ss}]`}), b_data${ss}, values[${Ot}]);
`}return jt};return`
  ${me.registerUniforms(bt).registerInternalVariables(ye).declareVariables(...Ft,tt)}
  ${me.mainStart()}
    ${me.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let col = (global_idx % (uniforms.N / ${u})) * ${u};
    var index1 = global_idx / (uniforms.N / ${u});
    let stride1 = uniforms.M / ${R};
    let row = (index1 % stride1) * ${R};
    let batch = index1 / stride1;

    ${s.length===2?"":`let batch_indices = ${ye.offsetToIndices("batch")};`}

    var a_indices: ${ze.type.indices};
    ${Dn("a_indices",ze,ze.rank-2,ye.rank,"batch_indices")}
    ${ze.indicesSet("a_indices",ze.rank-2,0)}
    ${ze.indicesSet("a_indices",ze.rank-1,0)}
    let a_offset = ${ze.indicesToOffset("a_indices")};

    var b_indices: ${Ee.type.indices};
    ${Dn("b_indices",Ee,Ee.rank-2,ye.rank,"batch_indices")}
    ${Ee.indicesSet("b_indices",Ee.rank-2,0)}
    ${Ee.indicesSet("b_indices",Ee.rank-1,0)}
    let b_offset = ${Ee.indicesToOffset("b_indices")};
    var values: array<${tt.type.value}, ${R}>;
    for (var k: u32 = 0u; k < uniforms.K; k = k + ${S}) {
      ${Kt()}
    }
    for (var i = 0u; i < ${R}u; i++) {
      var value = values[i];
      ${$t}
      ${Ct}
      let cur_indices = ${tt.type.indices}(batch, row + i, col);
      let offset = ${tt.indicesToOffset("cur_indices")};
      ${tt.setByOffset(`offset / ${u}`,"value")};
    }
  }
  `};return{name:"MatMulNaive",shaderCache:{hint:`${t.activation};${u};${S};${R};${o}`,inputDependencies:L?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:i?i(s):s,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(N/64)},programUniforms:U}),getShaderSource:ce}}}),Xl,Ql,uo,xi,Yl,co,Jl,po,ho=y(()=>{Lt(),Nt(),Ht(),Rr(),Ti(),ao(),Xl=(e,t)=>e?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${t?", batchIndices":""});
        `,Ql=(e,t)=>e?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,uo=(e,t,s="f32",n,o=!1,i=32,a=!1,c=32)=>{let p=t[1]*e[1],h=t[0]*e[0],k=o?p:i,u=o?i:p,S=k/t[0],R=i/t[1];if(!((o&&S===4&&e[1]===4||!o&&(S===3||S===4))&&k%t[0]===0&&i%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${o} is true, innerElementSize ${S} and workPerThread[1] ${e[1]} must be 4.
      Otherwise, innerElementSize ${S} must be 3 or 4.
  tileAWidth ${k} must be divisible by workgroupSize[0]${t[0]}. tileInner ${i} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${S}<${s}>, ${k/S}>, ${u}>;
var<workgroup> mm_Bsub: array<array<vec4<${s}>, ${h/e[0]}>, ${i}>;

const rowPerThread = ${e[1]};
const colPerThread = ${e[0]};
const innerElementSize = ${S};
const tileInner = ${i};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${a?"0":"i32(globalId.z)"};
  ${n?`let batchIndices = ${n.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${p};

  let num_tiles = ${a?`${Math.ceil(c/i)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
  var kStart = ${a?`i32(globalId.z) * ${c}`:"0"};

  var acc: array<vec4<${s}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${R};
  for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${Xl(o,n)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${R}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${n?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${S===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${Ql(o,S)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},xi=(e,t)=>e?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${t?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${t?", batchIndices":""});
            `,Yl=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",co=(e,t,s="f32",n,o=!1,i=32,a=!1,c=32,p=!1)=>{let h=e[1]*t[1],k=e[0]*t[0],u=o?h:i,S=o?i:h;if(!(S%t[1]===0&&u%t[0]===0&&i%t[1]===0))throw new Error(`tileAHight ${S} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${u} must be divisible by workgroupSize[0]${t[0]}, tileInner ${i} must be divisible by workgroupSize[1]${t[1]}`);let R=S/t[1],N=u/t[0],L=i/t[1],se=p?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${h};
    let globalColStart = i32(workgroupId.x) * ${k};

    // Loop over shared dimension.
    for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${S}; inputRow = inputRow + ${t[1]}) {
        for (var inputCol = localCol; inputCol < ${u}; inputCol = inputCol + ${t[0]}) {
          ${xi(o,n)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${i}; inputRow = inputRow + ${t[1]}) {
            for (var inputCol = localCol; inputCol < ${k}; inputCol = inputCol + ${t[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${n?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${s}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${o?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${t[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${t[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${h};

let tileRowA = i32(localId.y) * ${R};
let tileColA = i32(localId.x) * ${N};
let tileRowB = i32(localId.y) * ${L};
// Loop over shared dimension.
for (var t = 0; t < num_tiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${R}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${N}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${xi(o,n)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${L}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${n?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${s}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${Yl(o)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${s}, ${u}>, ${S}>;
  var<workgroup> mm_Bsub : array<array<${s}, ${k}>, ${i}>;
  const rowPerThread = ${e[1]};
  const colPerThread = ${e[0]};
  const tileInner = ${i};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${a?"0":"i32(globalId.z)"};
    ${n?`let batchIndices = ${n.offsetToIndices("u32(batch)")};`:""}
    let num_tiles = ${a?`${Math.ceil(c/i)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
    var kStart = ${a?`i32(globalId.z) * ${c}`:"0"};

    var acc : array<array<${s}, colPerThread>, rowPerThread>;
    ${se}
  }
`},Jl=(e,t,s,n,o=!1)=>{let[i,a,c,p]=n,h=Zt(n[0].type.tensor);return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${i.type.indices}) -> ${Ws(e,h)} {
      var value = ${Ws(e,h)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)
      {
        var aIndices: ${a.type.indices};
        ${Dn("aIndices",a,a.rank-2,i.rank,"batchIndices")}
        ${a.indicesSet("aIndices",a.rank-2,"u32(row)")}
        ${a.indicesSet("aIndices",a.rank-1,"u32(colIn)")}
        value = ${a.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${i.type.indices}) -> ${Ws(e,h)} {
      var value = ${Ws(e,h)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)
      {
        var bIndices: ${c.type.indices};
        ${Dn("bIndices",c,c.rank-2,i.rank,"batchIndices")}
        ${c.indicesSet("bIndices",c.rank-2,"u32(row)")}
        ${c.indicesSet("bIndices",c.rank-1,"u32(colIn)")}
        value = ${c.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Ws(e,h)}) {
      let col = colIn * ${e};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${t?`value = value + ${o?"bias[colIn]":`${Ws(e,h)}(bias[row])`};`:""}
        ${s}
        ${p.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},po=(e,t,s,n,o=!1,i)=>{let a=e[0].dims,c=e[1].dims,p=a.slice(0,-2),h=c.slice(0,-2),k=n?n.slice(0,-2):s.slice(0,-2),u=Ce.size(k),S=a[a.length-2],R=a[a.length-1],N=c[c.length-1],L=R%4===0&&N%4===0,se=S<=8?[4,1,1]:[4,4,1],ee=[8,8,1],U=[Math.ceil(N/ee[0]/se[0]),Math.ceil(S/ee[1]/se[1]),Math.ceil(u/ee[2]/se[2])],ce=L?4:1,me=[...p,S,R/ce],ye=me.length,ze=[...h,R,N/ce],Ee=ze.length,tt=[u,S,N/ce],mt=[{type:6,data:S},{type:6,data:N},{type:6,data:R}];Cr(t,mt),mt.push(...Tt(k,me,ze));let Ct=["rank","rank"],Ft=e.length>2;Ft&&(mt.push(...Tt(e[2].dims)),Ct.push("rank")),mt.push(...Tt(tt));let $t=bt=>{let Kt=k.length,jt=Qr("batchDims",e[0].dataType,Kt,1),Ot=Zt(e[0].dataType),ss=Le("a",e[0].dataType,ye,ce),Jt=Le("b",e[1].dataType,Ee,ce),qt=ft("result",e[0].dataType,tt.length,ce),Ys=[ss,Jt];if(Ft){let Ts=o?ce:1;Ys.push(Le("bias",e[2].dataType,e[2].dims.length,Ts))}let at=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"}];Zr(t,at);let Pt=Zt(qt.type.tensor),hs=Jr(t,qt.type.value,Pt),vs=Jl(ce,Ft,hs,[jt,ss,Jt,qt],o);return`
  ${bt.registerUniforms(at).registerInternalVariables(jt).declareVariables(...Ys,qt)}
  ${vs}
  ${L?uo(se,ee,Ot,jt):co(se,ee,Ot,jt)}
                   `};return{name:"MatMul",shaderCache:{hint:`${se};${t.activation};${L};${o}`,inputDependencies:Ct},getRunData:()=>({outputs:[{dims:i?i(s):s,dataType:e[0].dataType}],dispatchGroup:{x:U[0],y:U[1],z:U[2]},programUniforms:mt}),getShaderSource:$t}}}),Zl,eu,tu=y(()=>{Lt(),qs(),Ht(),Rr(),ao(),dc(),ho(),Zl=(e,t,s,n,o=!1,i,a=4,c=4,p=4,h="f32")=>{let k=mt=>{switch(mt){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${h}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${mt} is not supported.`)}},u=mt=>{switch(mt){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${mt} is not supported.`)}},S=e?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,R=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,N=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",L=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",se=e?"row":"col",ee=e?"col":"row",U=`
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
    let outRow = ${se} / outWidth;
    let outCol = ${se} % outWidth;

    let WRow = ${ee} / (i32(uniforms.w_shape[1]) * inChannels);
    let WCol = ${ee} / inChannels % i32(uniforms.w_shape[1]);
    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];
    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];
    let xCh = ${ee} % inChannels;
    var resData = ${Ws(a,h)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${N} && xCol >= 0 && xCol < ${L}) {
      ${S}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${k(a)}
    }
    return resData;`,ce=e?t&&n?`
    let col = colIn * ${a};
    ${U}`:`
    let col = colIn * ${a};
    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {
      ${U}
    }
    return ${Ws(a,h)}(0.0);`:n&&s?`
    let col = colIn * ${a};
    ${U}`:`
    let col = colIn * ${a};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${U}
    }
    return ${Ws(a,h)}(0.0);`,me=`${u(c)}`,ye=Ws(p,h),ze=Ws(e?a:c,h),Ee=Ws(e?c:a,h),tt=Jr(i,ye,h);return`
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${ze} {
      ${e?ce:me}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${Ee} {
      ${e?me:ce}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${ye}) {
      let col = colIn * ${p};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)
      {
      var value = valueIn;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${R}
      ${Hl(o)}
      ${tt}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},eu=(e,t,s,n,o,i,a,c,p)=>{let h=t.format==="NHWC",k=h?e[0].dims[3]:e[0].dims[1],u=s[0],S=h?s[2]:s[3],R=h?s[1]:s[2],N=h?s[3]:s[1],L=h&&(k%4===0||k%3===0)&&N%4===0,se=h?N:S*R,ee=h?S*R:N,U=[8,8,1],ce=n<=8?[4,1,1]:[4,4,1],me=[Math.ceil(se/U[0]/ce[0]),Math.ceil(ee/U[1]/ce[1]),Math.ceil(u/U[2]/ce[2])];ns("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${me}`);let ye=L?h&&k%4!==0?3:4:1,ze=U[1]*ce[1],Ee=U[0]*ce[0],tt=Math.max(U[0]*ye,U[1]),mt=n%ze===0,Ct=o%Ee===0,Ft=i%tt===0,$t=L?[ye,4,4]:[1,1,1],bt=[{type:6,data:n},{type:6,data:o},{type:6,data:i},{type:6,data:[t.pads[0],t.pads[1]]},{type:6,data:t.strides},{type:6,data:t.dilations}];Cr(t,bt),bt.push(...Tt(e[0].dims,e[1].dims));let Kt=["rank","rank"];a&&(bt.push(...Tt(e[2].dims)),Kt.push("rank")),bt.push(...Tt(s));let jt=Ot=>{let ss=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"pad",type:"i32",length:2},{name:"stride",type:"i32",length:2},{name:"dilation",type:"i32",length:2}];Zr(t,ss);let Jt=L?4:1,qt=Zt(e[0].dataType),Ys=`
      fn setOutputAtIndex(flatIndex : i32, value : ${L?`vec4<${qt}>`:qt}) {
        result[flatIndex] = ${L?`vec4<${qt}>`:qt}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${L?`vec4<${qt}>`:qt}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${L?"/ 4":""}, value);
      }`,at=Le("x",e[0].dataType,e[0].dims.length,ye===3?1:ye),Pt=Le("w",e[1].dataType,e[1].dims.length,Jt),hs=[at,Pt],vs=ft("result",e[0].dataType,s.length,Jt);if(a){let Ts=Le("bias",e[2].dataType,e[2].dims.length,Jt);hs.push(Ts),Ys+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${L?`vec4<${qt}>`:qt} {
          return bias[coords.${h?"w":"y"}${L?"/ 4":""}];
        }`}return`
        ${ql("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${Ot.registerUniforms(ss).declareVariables(...hs,vs)}
        ${Ys}
        ${Zl(h,mt,Ct,Ft,a,t,$t[0],$t[1],$t[2],qt)}
        ${L?uo(ce,U,qt,void 0,!h,tt):co(ce,U,qt,void 0,!h,tt,!1,void 0,c)}`};return{name:"Conv2DMatMul",shaderCache:{hint:`${t.cacheKey};${ye};${L};${mt};${Ct};${Ft};${ze};${Ee};${tt}`,inputDependencies:Kt},getRunData:()=>({outputs:[{dims:p?p(s):s,dataType:e[0].dataType}],dispatchGroup:{x:me[0],y:me[1],z:me[2]},programUniforms:bt}),getShaderSource:jt}}}),su,Pi,gn,ru,Ei,Ci,nu,ou,cc=y(()=>{Lt(),qs(),Nt(),Ht(),Rr(),ao(),su=e=>{let t=1;for(let s=0;s<e.length;s++)t*=e[s];return t},Pi=e=>typeof e=="number"?[e,e,e]:e,gn=(e,t)=>t<=1?e:e+(e-1)*(t-1),ru=(e,t,s,n=1)=>{let o=gn(t,n);return Math.floor((e[0]*(s-1)-s+o)/2)},Ei=(e,t,s,n,o)=>{o==null&&(o=ru(e,t[0],n[0]));let i=[0,0,0,s];for(let a=0;a<3;a++)e[a]+2*o>=t[a]&&(i[a]=Math.trunc((e[a]-t[a]+2*o)/n[a]+1));return i},Ci=(e,t,s,n,o,i,a,c,p,h)=>{let k,u,S,R;if(e==="VALID"&&(e=0),typeof e=="number"){k={top:e,bottom:e,left:e,right:e,front:e,back:e};let N=Ei([t,s,n,1],[c,p,h],1,[o,i,a],e);u=N[0],S=N[1],R=N[2]}else if(Array.isArray(e)){if(!e.every((L,se,ee)=>L===ee[0]))throw Error(`Unsupported padding parameter: ${e}`);k={top:e[0],bottom:e[1],left:e[2],right:e[3],front:e[4],back:e[5]};let N=Ei([t,s,n,1],[c,p,h],1,[o,i,a],e[0]);u=N[0],S=N[1],R=N[2]}else if(e==="SAME_UPPER"){u=Math.ceil(t/o),S=Math.ceil(s/i),R=Math.ceil(n/a);let N=(u-1)*o+c-t,L=(S-1)*i+p-s,se=(R-1)*a+h-n,ee=Math.floor(N/2),U=N-ee,ce=Math.floor(L/2),me=L-ce,ye=Math.floor(se/2),ze=se-ye;k={top:ce,bottom:me,left:ye,right:ze,front:ee,back:U}}else throw Error(`Unknown padding parameter: ${e}`);return{padInfo:k,outDepth:u,outHeight:S,outWidth:R}},nu=(e,t,s,n,o,i=!1,a="channelsLast")=>{let c,p,h,k,u;if(a==="channelsLast")[c,p,h,k,u]=e;else if(a==="channelsFirst")[c,u,p,h,k]=e;else throw new Error(`Unknown dataFormat ${a}`);let[S,,R,N,L]=t,[se,ee,U]=Pi(s),[ce,me,ye]=Pi(n),ze=gn(R,ce),Ee=gn(N,me),tt=gn(L,ye),{padInfo:mt,outDepth:Ct,outHeight:Ft,outWidth:$t}=Ci(o,p,h,k,se,ee,U,ze,Ee,tt),bt=i?S*u:S,Kt=[0,0,0,0,0];return a==="channelsFirst"?Kt=[c,bt,Ct,Ft,$t]:a==="channelsLast"&&(Kt=[c,Ct,Ft,$t,bt]),{batchSize:c,dataFormat:a,inDepth:p,inHeight:h,inWidth:k,inChannels:u,outDepth:Ct,outHeight:Ft,outWidth:$t,outChannels:bt,padInfo:mt,strideDepth:se,strideHeight:ee,strideWidth:U,filterDepth:R,filterHeight:N,filterWidth:L,effectiveFilterDepth:ze,effectiveFilterHeight:Ee,effectiveFilterWidth:tt,dilationDepth:ce,dilationHeight:me,dilationWidth:ye,inShape:e,outShape:Kt,filterShape:t}},ou=(e,t,s,n,o,i)=>{let a=i==="channelsLast";a?e[0].dims[3]:e[0].dims[1];let c=[64,1,1],p={x:s.map((se,ee)=>ee)},h=[Math.ceil(su(p.x.map(se=>s[se]))/c[0]),1,1];ns("verbose",()=>`[conv3d_naive_webgpu] dispatch = ${h}`);let k=1,u=Ce.size(s),S=[{type:12,data:u},{type:12,data:n},{type:12,data:o},{type:12,data:t.strides},{type:12,data:t.dilations}];Cr(t,S),S.push(...Tt(e[0].dims,e[1].dims));let R=["rank","rank"],N=e.length===3;N&&(S.push(...Tt(e[2].dims)),R.push("rank")),S.push(...Tt(s));let L=se=>{let ee=[{name:"output_size",type:"u32"},{name:"filter_dims",type:"u32",length:n.length},{name:"pads",type:"u32",length:o.length},{name:"strides",type:"u32",length:t.strides.length},{name:"dilations",type:"u32",length:t.dilations.length}];Zr(t,ee);let U=1,ce=Zt(e[0].dataType),me=Le("x",e[0].dataType,e[0].dims.length,k),ye=Le("W",e[1].dataType,e[1].dims.length,U),ze=[me,ye],Ee=ft("result",e[0].dataType,s.length,U),tt="";if(N){let Ft=Le("bias",e[2].dataType,e[2].dims.length,U);ze.push(Ft),tt+=`
        fn getBiasByOutputCoords(coords : array<u32, 5>) -> ${ce} {
          return bias[${a?Mt("coords",4,5):Mt("coords",1,5)}];
        }`}let mt=Ws(k,ce),Ct=Jr(t,mt,ce);return`
            ${tt}
            fn getX(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${me.getByIndices("aIndices")};
            }
            fn getW(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${ye.getByIndices("aIndices")};
            }
          ${se.registerUniforms(ee).declareVariables(...ze,Ee)}
          ${se.mainStart()}
          ${se.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
              let coords = ${Ee.offsetToIndices("global_idx")};
              let batch = ${Mt("coords",0,me.rank)};
              let d2 = ${a?Mt("coords",me.rank-1,me.rank):Mt("coords",1,me.rank)};
              let xFRCCorner = vec3<u32>(${a?Mt("coords",1,me.rank):Mt("coords",2,me.rank)},
              ${a?Mt("coords",2,me.rank):Mt("coords",3,me.rank)},
              ${a?Mt("coords",3,me.rank):Mt("coords",4,me.rank)}) * uniforms.strides - uniforms.pads;
              let xFCorner = xFRCCorner.x;
              let xRCorner = xFRCCorner.y;
              let xCCorner = xFRCCorner.z;
              let xShapeY = ${a?Mt("uniforms.x_shape",1,me.rank):Mt("uniforms.x_shape",2,me.rank)};
              let xShapeZ = ${a?Mt("uniforms.x_shape",2,me.rank):Mt("uniforms.x_shape",3,me.rank)};
              let xShapeW = ${a?Mt("uniforms.x_shape",3,me.rank):Mt("uniforms.x_shape",4,me.rank)};
              let xShapeU = ${a?Mt("uniforms.x_shape",4,me.rank):Mt("uniforms.x_shape",1,me.rank)};
              let inputDepthNearestVec4 = (xShapeU / 4) * 4;
              let inputDepthVec4Remainder = xShapeU % 4;

              var value = 0.0;
              for (var wF = 0u; wF < uniforms.filter_dims[0]; wF++) {
                let xF = xFCorner + wF * uniforms.dilations[0];
                if (xF < 0 || xF >= xShapeY) {
                  continue;
                }

                for (var wR = 0u; wR < uniforms.filter_dims[1]; wR++) {
                  let xR = xRCorner + wR * uniforms.dilations[1];
                  if (xR < 0 || xR >= xShapeZ) {
                    continue;
                  }

                  for (var wC = 0u; wC < uniforms.filter_dims[2]; wC++) {
                    let xC = xCCorner + wC * uniforms.dilations[2];
                    if (xC < 0 || xC >= xShapeW) {
                      continue;
                    }

                    for (var d1 = 0u; d1 < inputDepthNearestVec4; d1 += 4) {
                      ${a?`let xValues = vec4<f32>(
                               getX(batch, xF, xR, xC, d1),
                               getX(batch, xF, xR, xC, d1 + 1),
                               getX(batch, xF, xR, xC, d1 + 2),
                               getX(batch, xF, xR, xC, d1 + 3));
                            `:`let xValues = vec4<f32>(
                               getX(batch, d1, xF, xR, xC),
                               getX(batch, d1 + 1, xF, xR, xC),
                               getX(batch, d1 + 2, xF, xR, xC),
                               getX(batch, d1 + 3, xF, xR, xC));
                            `}
                            let wValues = vec4<f32>(
                              getW(d2, d1, wF, wR, wC),
                              getW(d2, d1 + 1, wF, wR, wC),
                              getW(d2, d1 + 2, wF, wR, wC),
                              getW(d2, d1 + 3, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                    if (inputDepthVec4Remainder == 1) {
                        ${a?`value += getX(batch, xF, xR, xC, inputDepthNearestVec4)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`:`value += getX(batch, inputDepthNearestVec4, xF, xR, xC)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`}
                    } else if (inputDepthVec4Remainder == 2) {
                      ${a?`let xValues = vec2<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1));
                      `:`let xValues = vec2<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC));
                    `}
                    let wValues = vec2<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC));
                      value += dot(xValues, wValues);
                    } else if (inputDepthVec4Remainder == 3) {
                      ${a?`let xValues = vec3<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2));
                      `:`let xValues = vec3<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 2, xF, xR, xC));
                    `}
                    let wValues = vec3<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 2, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                  }
                }
              }
              ${N?"value = value + getBiasByOutputCoords(coords)":""};
              ${Ct}
              result[global_idx] = f32(value);
          }`};return{name:"Conv3DNaive",shaderCache:{hint:`${t.cacheKey};${a};${k};${N}`,inputDependencies:R},getRunData:()=>({outputs:[{dims:s,dataType:e[0].dataType}],dispatchGroup:{x:h[0],y:h[1],z:h[2]},programUniforms:S}),getShaderSource:L}}}),iu,mo,pc=y(()=>{Lt(),Nt(),Ht(),Rr(),iu=(e,t,s,n)=>{let o=e.length>2,i=o?"value += b[output_channel];":"",a=e[0].dims,c=e[1].dims,p=t.format==="NHWC",h=p?s[3]:s[1],k=h/t.group,u=p&&k>=4?cs(h):1,S=Ce.size(s)/u,R=[{type:12,data:S},{type:12,data:t.dilations},{type:12,data:[t.strides[0],t.strides[1]]},{type:12,data:[t.pads[0],t.pads[1]]},{type:12,data:k}];Cr(t,R),R.push(...Tt(a,[c[0],c[1],c[2],c[3]/u]));let N=o?["rank","rank","rank"]:["rank","rank"];R.push(...Tt([s[0],s[1],s[2],s[3]/u]));let L=se=>{let ee=ft("output",e[0].dataType,s.length,u),U=Zt(ee.type.tensor),ce=Jr(t,ee.type.value,U),me=Le("x",e[0].dataType,a.length),ye=Le("w",e[1].dataType,c.length,u),ze=[me,ye];o&&ze.push(Le("b",e[2].dataType,e[2].dims,u));let Ee=[{name:"output_size",type:"u32"},{name:"dilations",type:"u32",length:t.dilations.length},{name:"strides",type:"u32",length:2},{name:"pads",type:"u32",length:2},{name:"output_channels_per_group",type:"u32"}];Zr(t,Ee);let tt=p?`
      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[0]; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

        if (xHeight < 0u || xHeight >= uniforms.x_shape[1]) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[1]; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
          if (xWidth < 0u || xWidth >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[2]; wInChannel++) {
            let input_channel = in_channel_offset + wInChannel;
            let xVal = ${me.get("batch","xHeight","xWidth","input_channel")};
            let wVal = ${ye.get("wHeight","wWidth","wInChannel","output_channel")};
            value += xVal * wVal;
          }
        }
      }
      `:`
      for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {
        let input_channel = in_channel_offset + wInChannel;
        for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {
          let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

          if (xHeight < 0u || xHeight >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {
            let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
            if (xWidth < 0u || xWidth >= uniforms.x_shape[3]) {
              continue;
            }

            let xVal = ${me.get("batch","input_channel","xHeight","xWidth")};
            let wVal = ${ye.get("output_channel","wInChannel","wHeight","wWidth")};
            value += xVal * wVal;
          }
        }
      }
      `;return`
  ${se.registerUniforms(Ee).declareVariables(...ze,ee)}

  ${se.mainStart()}
    ${se.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let outputIndices = ${ee.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${p?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${p?1:2}], outputIndices[${p?2:3}]) * uniforms.strides - uniforms.pads;
    let group_id: u32 = output_channel * ${u} / uniforms.output_channels_per_group;
    var in_channel_offset = group_id * uniforms.w_shape[${p?2:1}];

    var value: ${ee.type.value} = ${ee.type.value}(0);
    ${tt}
    ${i}
    ${ce}
    ${ee.setByOffset("global_idx","value")}
  }`};return{name:"GroupedConv",shaderCache:{hint:`${t.cacheKey}_${u}`,inputDependencies:N},getRunData:()=>({outputs:[{dims:n?n(s):s,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(S/64)},programUniforms:R}),getShaderSource:L}},mo=(e,t,s,n)=>{let o=e.length>2,i=cs(s[3]),a=cs(s[2]),c=Ce.size(s)/i/a,p=[e[0].dims[0],e[0].dims[1],e[0].dims[2],e[0].dims[3]/i],h=[e[1].dims[0],e[1].dims[1],e[1].dims[2],e[1].dims[3]/i],k=[s[0],s[1],s[2],s[3]/i],u=[{type:12,data:c},{type:6,data:[t.strides[0],t.strides[1]]},{type:6,data:[t.pads[0],t.pads[1]]}];Cr(t,u),u.push(...Tt(p,h,k));let S=(a-1)*t.strides[1]+h[1],R=N=>{let L=ft("output",e[0].dataType,k.length,i),se=Zt(L.type.tensor),ee=Jr(t,L.type.value,se),U=Le("x",e[0].dataType,p.length,i),ce=Le("w",e[1].dataType,h.length,i),me=[U,ce];o&&me.push(Le("b",e[2].dataType,e[2].dims,i));let ye=o?"value += b[output_channel];":"",ze=[{name:"output_size",type:"u32"},{name:"strides",type:"i32",length:2},{name:"pads",type:"i32",length:2}];return Zr(t,ze),`
  ${N.registerUniforms(ze).declareVariables(...me,L)}
  ${N.mainStart()}
    ${N.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let width0 = uniforms.output_shape[3];
    let output_channel = global_idx % width0;
    var index1 = global_idx / width0;
    let width1 = uniforms.output_shape[2] / ${a}u;
    let col = (index1 % width1) * ${a}u;
    index1 = index1 / width1;
    let row = index1 % uniforms.output_shape[1];
    let batch = index1 / uniforms.output_shape[1];

    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;

    var x_vals: array<${U.type.value}, ${S}>;
    var values: array<${L.type.value}, ${a}>;
    let input_channel = output_channel;
    // Use constant instead of uniform can give better performance for w's height/width.
    for (var w_height: u32 = 0u; w_height < ${h[0]}; w_height++) {
      let x_height = x_corner.x + i32(w_height);
      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {
        for (var i = 0; i < ${S}; i++) {
          let x_width = x_corner.y + i;
          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {
            x_vals[i] = ${U.get("batch","u32(x_height)","u32(x_width)","input_channel")};
          } else {
            x_vals[i] = ${U.type.value}(0);
          }
        }
        for (var w_width: u32 = 0u; w_width < ${h[1]}; w_width++) {
          let w_val = ${ce.get("w_height","w_width","0","output_channel")};
          for (var i = 0u; i < ${a}u; i++) {
            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);
          }
        }
      }
    }

    for (var i = 0u; i < ${a}u; i++) {
      var value = values[i];
      ${ye}
      ${ee}
      ${L.set("batch","row","col + i","output_channel","value")};
    }
  }`};return{name:"GroupedConv-Vectorize",shaderCache:{hint:`${t.cacheKey};${i};${a};${S};${h[0]};${h[1]}`,inputDependencies:o?["rank","rank","type"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:n?n(s):s,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(c/64)},programUniforms:u}),getShaderSource:R}}}),au,_o,lu,fo,go,ki,uu,Si,$i,hc=y(()=>{Nt(),tu(),cc(),ho(),pc(),Rr(),Ti(),Br(),au=(e,t,s,n,o,i)=>{let a=e[0],c=e.slice(i?1:2,i?3:4),p=c.length,h=t[0],k=t.slice(2).map((S,R)=>S+(S-1)*(s[R]-1)),u=c.map((S,R)=>S+n[R]+n[R+p]).map((S,R)=>Math.floor((S-k[R]+o[R])/o[R]));return u.splice(0,0,a),u.splice(i?3:1,0,h),u},_o=[2,3,1,0],lu=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length>5)throw new Error("greater than 5D is not supported");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let s=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],n=e[1].dims[1]*t.group;if(s!==n)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let o=e[0].dims.length-2;if(t.dilations.length!==o)throw new Error(`dilations should be ${o}D`);if(t.strides.length!==o)throw new Error(`strides should be ${o}D`);if(t.pads.length!==o*2)throw new Error(`pads should be ${o*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},fo=(e,t)=>{let s=e.kernelShape.slice();s.length<t[1].dims.length-2&&s.push(...Array(t[1].dims.length-2-s.length).fill(0));for(let i=2;i<t[1].dims.length;++i)s[i-2]===0&&(s[i-2]=t[1].dims[i]);let n=e.pads.slice();Es.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,s,n,e.format==="NHWC",e.autoPad);let o=Object.assign({},e);return Object.assign(o,{kernelShape:s,pads:n}),o},go=e=>{let t=vi(e),s=e.format,n=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],o=e.dilations,i=e.group,a=e.kernel_shape,c=e.pads,p=e.strides,h=e.w_is_const();return{autoPad:n,format:s,dilations:o,group:i,kernelShape:a,pads:c,strides:p,wIsConst:h,...t,cacheKey:`${e.format};${t.activation};`}},ki=(e,t,s,n)=>{let o=s.format==="NHWC",i=au(t[0].dims,t[1].dims,s.dilations,s.pads,s.strides,o);if(s.group!==1){let ze=[t[0]];if(o){let Ee=e.kernelCustomData.wT??e.compute(er(t[1],_o),{inputs:[1],outputs:[s.wIsConst?-2:-1]})[0];s.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=Ee),ze.push(Ee)}else ze.push(t[1]);t.length===3&&ze.push(t[2]),!e.adapterInfo.isArchitecture("ampere")&&o&&t[1].dims[0]===s.group&&t[1].dims[1]===1&&s.dilations[0]===1&&s.dilations[1]===1?e.compute(mo(ze,s,i,n),{inputs:ze}):e.compute(iu(ze,s,i,n),{inputs:ze});return}let a=t.length===3,c=t[0].dims[o?1:2],p=t[0].dims[o?2:3],h=t[0].dims[o?3:1],k=t[1].dims[2],u=t[1].dims[3],S=i[o?1:2],R=i[o?2:3],N=i[o?3:1],L=o&&k===c&&u===p&&s.pads[0]===0&&s.pads[1]===0;if(L||k===1&&u===1&&s.dilations[0]===1&&s.dilations[1]===1&&s.strides[0]===1&&s.strides[1]===1&&s.pads[0]===0&&s.pads[1]===0){let ze=i[0],Ee,tt,mt,Ct=[];if(o){let bt=e.kernelCustomData.wT??e.compute(er(t[1],_o),{inputs:[1],outputs:[s.wIsConst?-2:-1]})[0];if(s.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=bt),L){let Kt=c*p*h;Ee=t[0].reshape([1,ze,Kt]),tt=bt.reshape([1,Kt,N]),mt=[1,ze,N]}else Ee=t[0].reshape([ze,c*p,h]),tt=bt.reshape([1,h,N]),mt=[ze,S*R,N];Ct.push(Ee),Ct.push(tt)}else Ee=t[0].reshape([ze,h,c*p]),tt=t[1].reshape([1,N,h]),mt=[ze,N,S*R],Ct.push(tt),Ct.push(Ee);a&&Ct.push(t[2]);let Ft=mt[2],$t=Ct[0].dims[Ct[0].dims.length-1];Ft<8&&$t<8?e.compute(lo(Ct,s,i,mt,o,n),{inputs:Ct}):e.compute(po(Ct,s,i,mt,o,n),{inputs:Ct});return}let se=!0,ee=e.kernelCustomData.wT??e.compute(er(t[1],_o),{inputs:[1],outputs:[s.wIsConst?-2:-1]})[0];s.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=ee);let U=[t[0],ee];a&&U.push(t[2]);let ce=o?S*R:N,me=o?N:S*R,ye=k*u*h;e.compute(eu(U,s,i,ce,me,ye,a,se,n),{inputs:U})},uu=(e,t)=>{let s=t.format==="NHWC",n=[e.inputs[0].reshape(s?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&n.push(e.inputs[2]);let o=[0,t.pads[0],0,t.pads[1]],i=[1].concat(t.strides),a=[1].concat(t.dilations),c=[1].concat(t.kernelShape),p=fo({...t,pads:o,strides:i,dilations:a,kernelShape:c},n);ki(e,n,p,h=>s?[h[0],h[2],h[3]]:[h[0],h[1],h[3]])},Si=(e,t,s)=>{let n=s.format==="NHWC"?"channelsLast":"channelsFirst",o=fo(s,t),i=s.autoPad==="NOTSET"?s.pads:s.autoPad,a=nu(t[0].dims,t[1].dims,s.strides,s.dilations,i,!1,n);e.compute(ou(t,o,a.outShape,[a.filterDepth,a.filterHeight,a.filterWidth],[a.padInfo.front,a.padInfo.top,a.padInfo.left],n))},$i=(e,t)=>{if(lu(e.inputs,t),e.inputs[0].dims.length===3)uu(e,t);else if(e.inputs[0].dims.length===5)Si(e,e.inputs,t);else{let s=fo(t,e.inputs);ki(e,e.inputs,s)}}}),du,mc=y(()=>{Lt(),qs(),Nt(),Ht(),du=(e,t,s)=>{let n=e.length>2,o=t.outputShape,i=t.format==="NHWC",a=t.group,c=e[1].dims,p=c[2]/a,h=c[3],k=i?cs(h):1,u=Ce.size(o)/k,S=[Math.ceil(u/64),1,1];ns("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${S}`);let R=["rank","rank"],N=[t.strides[0],t.strides[1]],L=[t.kernelShape[i?1:2],t.kernelShape[i?2:3]],se=[t.dilations[0],t.dilations[1]],ee=[L[0]+(t.dilations[0]<=1?0:(t.kernelShape[i?1:2]-1)*(t.dilations[0]-1)),L[1]+(t.dilations[1]<=1?0:(t.kernelShape[i?2:3]-1)*(t.dilations[1]-1))],U=[ee[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),ee[1]-1-Math.floor((t.pads[1]+t.pads[3])/2)],ce=[{type:12,data:u},{type:12,data:N},{type:12,data:L},{type:12,data:se},{type:12,data:ee},{type:6,data:U},{type:12,data:p},{type:12,data:h},...Tt(e[0].dims,e[1].dims)];n&&(ce.push(...Tt(e[2].dims)),R.push("rank")),ce.push(...Tt(o));let me=ye=>{let ze=[{name:"output_size",type:"u32"},{name:"strides",type:"u32",length:N.length},{name:"filter_dims",type:"u32",length:L.length},{name:"dilations",type:"u32",length:L.length},{name:"effective_filter_dims",type:"u32",length:ee.length},{name:"pads",type:"i32",length:U.length},{name:"input_channels_per_group",type:"u32"},{name:"output_channels_per_group",type:"u32"}],Ee=Zt(e[0].dataType),tt=i?1:2,mt=i?2:3,Ct=i?3:1,Ft=Le("W",e[1].dataType,e[1].dims.length,k),$t=Le("Dy",e[0].dataType,e[0].dims.length),bt=[$t,Ft];n&&bt.push(Le("bias",e[2].dataType,[o[Ct]].length,k));let Kt=ft("result",e[0].dataType,o.length,k),jt=`
            let outputIndices = ${Kt.offsetToIndices(`global_idx * ${k}`)};
            let batch = ${Kt.indicesGet("outputIndices",0)};
            let d1 = ${Kt.indicesGet("outputIndices",Ct)};
            let r = ${Kt.indicesGet("outputIndices",tt)};
            let c = ${Kt.indicesGet("outputIndices",mt)};
            let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;
            let dyRCorner = dyCorner.x;
            let dyCCorner = dyCorner.y;
            let groupId = d1 / uniforms.output_channels_per_group;
            let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;
            // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
            // ? = to be determined. : = across all values in that axis.
            var dotProd = ${Kt.type.value}(0.0);
            for (var wR: u32 = 0; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {
              if (wR % uniforms.dilations.x != 0) {
                continue;
              }
              let dyR = (${Ee}(dyRCorner) + ${Ee}(wR)) / ${Ee}(uniforms.strides[0]);
              let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;
              if (dyR < 0.0 || dyR >= ${Ee}(uniforms.Dy_shape[${tt}]) || fract(dyR) > 0.0 ||
                  wRPerm < 0) {
                continue;
              }
              let idyR: u32 = u32(dyR);

              for (var wC: u32 = 0; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {
                if (wC % uniforms.dilations.y != 0) {
                  continue;
                }
                let dyC = (${Ee}(dyCCorner) + ${Ee}(wC)) / ${Ee}(uniforms.strides.y);
                let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;
                if (dyC < 0.0 || dyC >= ${Ee}(uniforms.Dy_shape[${mt}]) ||
                    fract(dyC) > 0.0 || wCPerm < 0) {
                  continue;
                }
                let idyC: u32 = u32(dyC);
                var inputChannel = groupId * uniforms.input_channels_per_group;
                for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group; d2 = d2 + 1) {
                  let xValue = ${i?$t.get("batch","idyR","idyC","inputChannel"):$t.get("batch","inputChannel","idyR","idyC")};
                  let w_offset = ${Ft.indicesToOffset(`${Ft.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel, wOutChannel)`)};
                  let wValue = ${Ft.getByOffset(`w_offset / ${k}`)};
                  dotProd = dotProd + xValue * wValue;
                  inputChannel = inputChannel + 1;
                }
              }
            }
            let value = dotProd${n?` + bias[d1 / ${k}]`:""};
            ${Kt.setByOffset("global_idx","value")};
          `;return`
    ${ye.registerUniforms(ze).declareVariables(...bt,Kt)}
      ${ye.mainStart()}
      ${ye.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")};
    ${jt}}`};return{name:"ConvTranspose2D",shaderCache:{hint:`${t.cacheKey};${k}`,inputDependencies:R},getRunData:()=>({dispatchGroup:{x:S[0],y:S[1],z:S[2]},outputs:[{dims:s?s(o):o,dataType:e[0].dataType}],programUniforms:ce}),getShaderSource:me}}}),Ai,cu,pu,wo,hu,mu,yo,_u,fu,gu=y(()=>{mc(),Rr(),Br(),Ai=(e,t,s,n,o,i)=>(e-1)*t+s+(n-1)*o+1-i,cu=(e,t,s,n,o)=>{let i=Math.floor(e/2);t==="SAME_UPPER"?(s[n]=i,s[o]=e-i):t==="SAME_LOWER"&&(s[n]=e-i,s[o]=i)},pu=(e,t,s,n,o,i,a,c,p,h)=>{let k=e.length-2,u=h.length===0;p.length<k&&p.push(...Array(k-p.length).fill(0));let S=e[0],R=t[c?3:1]*o;for(let N=0,L=e.length-k-(c?1:0);N<k;++N,++L){let se=e[L],ee=u?se*a[N]:h[N],U=Ai(se,a[N],i[N],t[L],s[N],ee);cu(U,n,i,N,N+k),u&&h.push(a[N]*(se-1)+p[N]+(t[L]-1)*s[N]+1-i[N]-i[N+k])}h.splice(0,0,S),h.splice(c?3:1,0,R)},wo=(e,t)=>{let s=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((u,S)=>u*S,1)===0){s.length=0;for(let u=2;u<t[1].dims.length;++u)s.push(t[1].dims[u])}let n=e.format==="NHWC";s.splice(0,0,t[1].dims[0]),s.splice(n?3:1,0,t[1].dims[1]);let o=e.pads.slice(),i=e.outputShape.slice(),a=e.outputPadding.slice(),c=t[0].dims,p=e.dilations.slice();if(p.reduce((u,S)=>u+S,0)===0){let u=t[0].dims.length-2;p=new Array(u).fill(1)}let h=e.strides.slice();if(h.reduce((u,S)=>u+S,0)===0){let u=t[0].dims.length-2;h=new Array(u).fill(1)}pu(c,s,p,e.autoPad,e.group,o,h,n,a,i);let k=Object.assign({},e);return Object.assign(k,{kernelShape:s,pads:o,outputPadding:a,outputShape:i,dilations:p,strides:h}),k},hu=e=>{let t=vi(e),s=e.format,n=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],o=e.dilations,i=e.group,a=e.kernelShape,c=e.pads,p=e.strides,h=e.wIsConst(),k=e.outputPadding,u=e.outputShape;return{autoPad:n,format:s,dilations:o,group:i,kernelShape:a,outputPadding:k,outputShape:u,pads:c,strides:p,wIsConst:h,...t,cacheKey:`${e.format};${t.activation};`}},mu=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let s=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],n=e[1].dims[0];if(s!==n)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let o=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==o))throw new Error("invalid bias");let i=e[0].dims.length-2;if(t.dilations.reduce((a,c)=>a+c,0)>0&&t.dilations.length!==i)throw new Error(`dilations should be ${i}D`);if(t.strides.reduce((a,c)=>a+c,0)>0&&t.strides.length!==i)throw new Error(`strides should be ${i}D`);if(t.pads.reduce((a,c)=>a+c,0)>0&&t.pads.length!==i*2)throw new Error(`pads should be ${i*2}D`);if(t.outputPadding.length!==i&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${i}D`);if(t.kernelShape.reduce((a,c)=>a+c,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},yo=(e,t,s,n)=>{let o=e.kernelCustomData.wT??e.compute(er(t[1],[2,3,0,1]),{inputs:[1],outputs:[s.wIsConst?-2:-1]})[0];s.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=o);let i=[t[0],o];t.length===3&&i.push(t[2]),e.compute(du(i,s,n),{inputs:i})},_u=(e,t)=>{let s=t.format==="NHWC",n=[e.inputs[0].reshape(s?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&n.push(e.inputs[2]);let o=t.kernelShape;(o.length===0||o[0]===0)&&(o=[e.inputs[1].dims[2]]);let i=t.dilations;(i.length===0||i[0]===0)&&(i=[1]);let a=t.strides;(a.length===0||a[0]===0)&&(a=[1]);let c=t.pads;c.length===0&&(c=[0,0]),c=[0,c[0],0,c[1]],a=[1].concat(a),i=[1].concat(i),o=[1].concat(o);let p=wo({...t,pads:c,strides:a,dilations:i,kernelShape:o},n);yo(e,n,p,h=>s?[h[0],h[2],h[3]]:[h[0],h[1],h[3]])},fu=(e,t)=>{if(mu(e.inputs,t),e.inputs[0].dims.length===3)_u(e,t);else{let s=wo(t,e.inputs);yo(e,e.inputs,s)}}}),wu,yu,Ii,_c=y(()=>{Lt(),Nt(),It(),Ht(),wu=(e,t,s,n)=>{let o=Ce.size(t),i=t.length,a=Le("input",e,i),c=ft("output",e,i),p=s.dataType===6?s.getInt32Array()[0]:Number(s.getBigInt64Array()[0]),h=Ce.normalizeAxis(p,i),k=u=>{let S=` i32(${a.indicesGet("inputIndices","uniforms.axis")}) `,R=Mt("uniforms.input_shape","uniforms.axis",i),N=n.reverse?S+(n.exclusive?" + 1":""):"0",L=n.reverse?R:S+(n.exclusive?"":" + 1");return`
                ${u.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(a,c)}
                ${u.mainStart()}
                  ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
                  var inputIndices = ${c.offsetToIndices("global_idx")};
                  var sum = ${c.type.value}(0);
                  let first : i32 = ${N};
                  let last : i32 = ${L};
                  for (var i : i32 = first; i < last; i++) {
                    ${a.indicesSet("inputIndices","uniforms.axis","u32(i)")};
                    sum = sum + ${a.getByIndices("inputIndices")};
                  }
                  ${c.setByOffset("global_idx","sum")};
                }`};return{name:"CumSum",shaderCache:{hint:n.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:[{type:12,data:o},{type:12,data:h},...Tt(t,t)]}),getShaderSource:k}},yu=(e,t)=>{let s=e.inputs[0].dims,n=e.inputs[0].dataType,o=e.inputs[1];e.compute(wu(n,s,o,t),{inputs:[0]})},Ii=e=>{let t=e.exclusive===1,s=e.reverse===1;return Ye({exclusive:t,reverse:s})}}),Mu,bu,vu,Tu,xu,Pu=y(()=>{Lt(),Nt(),It(),Ht(),Mu=e=>{if(!e||e.length!==1)throw new Error("DepthToSpace requires 1 input.");if(e[0].dims.length!==4)throw new Error("DepthToSpace requires 4D input.")},bu=(e,t,s,n)=>{let o=[];o.push(`fn perm(i: ${n.type.indices}) -> ${s.type.indices} {
    var a: ${s.type.indices};`);for(let i=0;i<t;++i)o.push(s.indicesSet("a",e[i],`i[${i}]`));return o.push("return a;}"),o.join(`
`)},vu=(e,t)=>{let s,n,o,i,a,c,p=t.format==="NHWC",h=t.blocksize,k=t.mode==="DCR";p?([s,n,o,i]=e.dims,a=k?[s,n,o,h,h,i/h**2]:[s,n,o,i/h**2,h,h],c=k?[0,1,3,2,4,5]:[0,1,4,2,5,3]):([s,n,o,i]=[e.dims[0],e.dims[2],e.dims[3],e.dims[1]],a=k?[s,h,h,i/h**2,n,o]:[s,i/h**2,h,h,n,o],c=k?[0,3,4,1,5,2]:[0,1,4,2,5,3]);let u=e.reshape(a),S=u.dims.length,R=e.dataType,N=Le("a",R,S),L=ft("output",R,S),se=ee=>`
  ${ee.registerUniform("output_size","u32").declareVariables(N,L)}

  ${bu(c,S,N,L)}

  ${ee.mainStart()}
    ${ee.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${L.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${L.setByOffset("global_idx",N.getByIndices("aIndices"))}
  }`;return{name:"DepthToSpace",shaderCache:{hint:`${e.dims};${t.blocksize};${t.mode}`,inputDependencies:["rank"]},getRunData:ee=>{let U=p?[s,n*h,o*h,i/h**2]:[s,i/h**2,n*h,o*h],ce=Ce.size(U),me=u.dims,ye=Ce.sortBasedOnPerm(me,c);return{outputs:[{dims:U,dataType:ee[0].dataType}],dispatchGroup:{x:Math.ceil(ce/64)},programUniforms:[{type:12,data:ce},...Tt(me,ye)]}},getShaderSource:se}},Tu=(e,t)=>{Mu(e.inputs),e.compute(vu(e.inputs[0],t))},xu=e=>Ye({blocksize:e.blocksize,mode:e.mode,format:e.format})}),Mo,Ln,bo,Eu,Cu,Nr,ku,Fi,Su,$u,Oi,fc=y(()=>{Lt(),Nt(),It(),Ht(),Mo="[a-zA-Z]|\\.\\.\\.",Ln="("+Mo+")+",bo="^"+Ln+"$",Eu="("+Ln+",)*"+Ln,Cu="^"+Eu+"$",Nr=class{constructor(e=-1){this.symbolToIndices=new Map,this.inputIndex=e}addSymbol(e,t){let s=this.symbolToIndices.get(e);s===void 0?s=[t]:s.push(t),this.symbolToIndices.set(e,s)}},ku=class{constructor(e,t){this.equation=t,this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[s,n]=t.includes("->")?t.split("->",2):[t,""];if(!s.match(RegExp(Cu)))throw new Error("Invalid LHS term");if(s.split(",").forEach((o,i)=>{let a=e[i].dims.slice();if(!o.match(RegExp(bo)))throw new Error("Invalid LHS term");let c=this.processTerm(o,!0,a,i);this.lhs.push(c)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([o,i])=>i.count===1||o==="...").map(([o])=>o).join("");else if(!n.match(RegExp(Ln)))throw new Error("Invalid RHS");n.match(RegExp(Mo,"g"))?.forEach(o=>{if(o==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let i=this.symbolToInfo.get(o);if(i===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(i.dimValue)}}),this.rhs=this.processTerm(n,!1,this.outputDims)}addSymbol(e,t,s){let n=this.symbolToInfo.get(e);if(n!==void 0){if(n.dimValue!==t&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(s)}else n={count:1,dimValue:t,inputIndices:[s]};this.symbolToInfo.set(e,n)}processTerm(e,t,s,n=-1){let o=s.length,i=!1,a=[],c=0;if(!e.match(RegExp(bo))&&!t&&e!=="")throw new Error("Invalid LHS term");let p=e.match(RegExp(Mo,"g")),h=new Nr(n);return p?.forEach((k,u)=>{if(k==="..."){if(i)throw new Error("Only one ellipsis is allowed per input term");i=!0;let S=o-p.length+1;if(S<0)throw new Error("Ellipsis out of bounds");if(a=s.slice(c,c+S),this.hasEllipsis){if(this.ellipsisDims.length!==a.length||this.ellipsisDims.toString()!==a.toString())throw new Error("Ellipsis dimensions mismatch")}else if(t)this.hasEllipsis=!0,this.ellipsisDims=a;else throw new Error("Ellipsis must be specified in the LHS");for(let R=0;R<a.length;R++){let N=String.fromCharCode(48+R);h.addSymbol(N,u+R),this.addSymbol(N,s[c++],n)}}else h.addSymbol(k,u+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(k,s[c++],n)}),h}},Fi=e=>e+"_max",Su=(e,t,s,n)=>{let o=e.map(h=>h.length).map((h,k)=>Le(`input${k}`,t,h)),i=Ce.size(n),a=ft("output",t,n.length),c=[...s.symbolToInfo.keys()].filter(h=>!s.rhs.symbolToIndices.has(h)),p=h=>{let k=[],u="var prod = 1.0;",S="var sum = 0.0;",R="sum += prod;",N=[],L=[],se=[],ee=[],U=s.symbolToInfo.size===s.rhs.symbolToIndices.size;s.symbolToInfo.forEach((me,ye)=>{if(s.rhs.symbolToIndices.has(ye)){let ze=s.rhs.symbolToIndices.get(ye)?.[0];ze!==void 0&&s.lhs.forEach((Ee,tt)=>{if(me.inputIndices.includes(tt)){let mt=Ee.symbolToIndices.get(ye);if(mt===void 0)throw new Error("Invalid symbol error");mt.forEach(Ct=>{k.push(`${o[tt].indicesSet(`input${tt}Indices`,Ct,a.indicesGet("outputIndices",ze))}`)})}})}else s.lhs.forEach((ze,Ee)=>{if(me.inputIndices.includes(Ee)){let tt=ze.symbolToIndices.get(ye);if(tt===void 0)throw new Error("Invalid symbol error");tt.forEach(mt=>{N.push(`${o[Ee].indicesSet(`input${Ee}Indices`,mt,`${ye}`)}`)}),ee.push(`prod *= ${o[Ee].getByIndices(`input${Ee}Indices`)};`)}}),L.push(`for(var ${ye}: u32 = 0; ${ye} < uniforms.${Fi(ye)}; ${ye}++) {`),se.push("}")});let ce=U?[...k,`let sum = ${o.map((me,ye)=>me.getByIndices(`input${ye}Indices`)).join(" * ")};`]:[...k,S,...L,...N,u,...ee,R,...se];return`
            ${h.registerUniforms(c.map(me=>({name:`${Fi(me)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...o,a)}

            ${h.mainStart()}
            ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
            var outputIndices = ${a.offsetToIndices("global_idx")};
            ${o.map((me,ye)=>`var input${ye}Indices: ${o[ye].type.indices};`).join(`
`)}
            ${ce.join(`
`)};
            ${a.setByOffset("global_idx","sum")};
          }`};return{name:"Einsum",shaderCache:{hint:s.equation,inputDependencies:e.map(()=>"rank")},getRunData:()=>{let h=c.filter(u=>s.symbolToInfo.has(u)).map(u=>({type:12,data:s.symbolToInfo.get(u)?.dimValue||0}));h.push({type:12,data:i});let k=e.map((u,S)=>[...Tt(u)]).reduce((u,S)=>u.concat(S),h);return k.push(...Tt(n)),{outputs:[{dims:n,dataType:t}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:k}},getShaderSource:p}},$u=(e,t)=>{let s=new ku(e.inputs,t.equation),n=s.outputDims,o=e.inputs.map((i,a)=>i.dims);e.compute(Su(o,e.inputs[0].dataType,s,n))},Oi=e=>{let t=e.equation.replace(/\s+/g,"");return Ye({equation:t})}}),Au,Di,Iu,vo,Fu,gc=y(()=>{Lt(),Nt(),Ht(),Au=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,s=Array.from(e[1].getBigInt64Array(),Number),n=s.length<t.length?0:s.length-t.length,o=t.length<s.length?0:t.length-s.length;for(;n<s.length&&o<t.length;++n,++o)if(s[n]!==t[o]&&s[n]!==1&&t[o]!==1)throw new Error("Expand requires shape to be broadcastable to input")},Di=(e,t)=>{let s=e.length-t.length,n=[];for(let o=0;o<s;++o)n.push(e[o]);for(let o=0;o<t.length;++o)n.push(t[o]===1?e[o+s]:t[o]);return n},Iu=(e,t)=>e.length>t.length?Di(e,t):Di(t,e),vo=e=>{let t=e[0].dims,s=Array.from(e[1].getBigInt64Array(),Number),n=Iu(t,s),o=e[0].dataType,i=o===9||Ce.size(t)===1,a=o===9||t.length>0&&t[t.length-1]%4===0?4:1,c=i||n.length>0&&n[n.length-1]%4===0?4:1,p=Math.ceil(Ce.size(n)/c),h=u=>{let S=Le("input",o,t.length,a),R=ft("output",o,n.length,c),N;if(o===9){let L=(se,ee,U="")=>`
          let outputIndices${ee} = ${R.offsetToIndices(`outputOffset + ${ee}u`)};
          let offset${ee} = ${S.broadcastedIndicesToOffset(`outputIndices${ee}`,R)};
          let index${ee} = offset${ee} / 4u;
          let component${ee} = offset${ee} % 4u;
          ${se}[${ee}] = ${U}(${S.getByOffset(`index${ee}`)}[component${ee}]);
        `;N=`
        let outputOffset = global_idx * ${c};
        var data = vec4<u32>(0);
        ${L("data",0,"u32")}
        ${L("data",1,"u32")}
        ${L("data",2,"u32")}
        ${L("data",3,"u32")}
        ${R.setByOffset("global_idx","data")}
      }`}else N=`
        let outputIndices = ${R.offsetToIndices(`global_idx * ${c}`)};
        let inputOffset = ${S.broadcastedIndicesToOffset("outputIndices",R)};
        let data = ${R.type.value}(${S.getByOffset(`inputOffset / ${a}`)});
        ${R.setByOffset("global_idx","data")}
      }`;return`
    ${u.registerUniform("vec_size","u32").declareVariables(S,R)}
    ${u.mainStart()}
    ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    ${N}`},k=[{type:12,data:p},...Tt(t,n)];return{name:"Expand",shaderCache:{hint:`${n.length};${a}${c}`,inputDependencies:["rank"]},getShaderSource:h,getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:k})}},Fu=e=>{Au(e.inputs),e.compute(vo(e.inputs),{inputs:[0]})}}),Ou,zn,wc=y(()=>{Lt(),Nt(),Ht(),fi(),Ou=e=>{let t=e[0].dataType,s=Ce.size(e[0].dims),n=Ce.size(e[1].dims),o=n%4===0,i=a=>{let c=Le("x",t,[1],4),p=Le("bias",t,[1],4),h=ft("y",t,[1],4),k=[{name:"output_vec_size",type:"u32"},{name:"bias_size",type:"u32"}],u=R=>`
      let bias${R}_offset: u32 = (global_idx * 4 + ${R}) % uniforms.bias_size;
      let bias${R} = ${p.getByOffset(`bias${R}_offset / 4`)}[bias${R}_offset % 4];`,S=o?`
      let bias = ${p.getByOffset("global_idx % (uniforms.bias_size / 4)")};`:`${u(0)}${u(1)}${u(2)}${u(3)}
      let bias = ${c.type.value}(bias0, bias1, bias2, bias3);`;return`${a.registerUniforms(k).declareVariables(c,p,h)}

    ${io(ls(t))}

    ${a.mainStart(Ls)}
      ${a.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_vec_size")}

      let x = ${c.getByOffset("global_idx")};
      ${S}
      let x_in = x + bias;
      ${h.setByOffset("global_idx",mi("x_in"))}
    }`};return{name:"FastGeluWithBias",shaderCache:{hint:`${o}`,inputDependencies:["type","type"]},getShaderSource:i,getRunData:a=>({outputs:[{dims:a[0].dims,dataType:a[0].dataType}],programUniforms:[{type:12,data:Math.ceil(s/4)},{type:12,data:n}],dispatchGroup:{x:Math.ceil(s/Ls/4)}})}},zn=e=>{e.inputs.length<2||Ce.size(e.inputs[1].dims)===0?Pl(e):e.compute(Ou(e.inputs))}}),Du,Lu,zu,To,yc=y(()=>{Lt(),Nt(),It(),Ht(),Du=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},Lu=(e,t)=>{let s=e[0].dims,n=e[1].dims,o=s.length,i=Ce.normalizeAxis(t.axis,o),a=s.slice(0);a.splice(i,1,...n);let c=s[i],p=e[0].dataType===9?4:1,h=Math.ceil(Ce.size(a)/p),k=[{type:12,data:h},{type:6,data:c},{type:12,data:i},...Tt(e[0].dims,e[1].dims,a)],u=S=>{let R=Le("data",e[0].dataType,e[0].dims.length,p),N=Le("inputIndices",e[1].dataType,e[1].dims.length),L=ft("output",e[0].dataType,a.length,p),se=U=>{let ce=n.length,me=`var indicesIndices${U}  = ${N.type.indices}(0);`;for(let ye=0;ye<ce;ye++)me+=`${ce>1?`indicesIndices${U}[${ye}]`:`indicesIndices${U}`} = ${a.length>1?`outputIndices${U}[uniforms.axis + ${ye}]`:`outputIndices${U}`};`;me+=`
          var idx${U} = ${N.getByIndices(`indicesIndices${U}`)};
          if (idx${U} < 0) {
            idx${U} = idx${U} + uniforms.axisDimLimit;
          }
          var dataIndices${U} : ${R.type.indices};
        `;for(let ye=0,ze=0;ye<o;ye++)ye===i?(me+=`${o>1?`dataIndices${U}[${ye}]`:`dataIndices${U}`} = u32(idx${U});`,ze+=ce):(me+=`${o>1?`dataIndices${U}[${ye}]`:`dataIndices${U}`} = ${a.length>1?`outputIndices${U}[${ze}]`:`outputIndices${U}`};`,ze++);return me},ee;if(e[0].dataType===9){let U=(ce,me,ye="")=>`
          let outputIndices${me} = ${L.offsetToIndices(`outputOffset + ${me}u`)};
          ${se(me)};
          let offset${me} = ${R.indicesToOffset(`dataIndices${me}`)};
          let index${me} = offset${me} / 4u;
          let component${me} = offset${me} % 4u;
          ${ce}[${me}] = ${ye}(${R.getByOffset(`index${me}`)}[component${me}]);
        `;ee=`
        let outputOffset = global_idx * ${p};
        var value = vec4<u32>(0);
        ${U("value",0,"u32")}
        ${U("value",1,"u32")}
        ${U("value",2,"u32")}
        ${U("value",3,"u32")}
        ${L.setByOffset("global_idx","value")}
      `}else ee=`
      let outputIndices = ${L.offsetToIndices("global_idx")};
      ${se("")};
      let value = ${R.getByIndices("dataIndices")};
      ${L.setByOffset("global_idx","value")};
      `;return`
      ${S.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(R,N,L)}
      ${S.mainStart()}
        ${S.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        ${ee}
      }`};return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)},programUniforms:k}),getShaderSource:u}},zu=e=>Ye({axis:e.axis}),To=(e,t)=>{let s=e.inputs;Du(s),e.compute(Lu(e.inputs,t))}}),Bu,Ru,Mc,bc=y(()=>{Lt(),Nt(),Ht(),Bu=(e,t,s,n,o,i,a,c,p)=>{let h=[{type:12,data:i},{type:12,data:n},{type:12,data:o},{type:12,data:s},{type:12,data:a},{type:12,data:c},{type:12,data:p}],k=[i];h.push(...Tt(t.dims,k));let u=S=>{let R=Le("indices_data",t.dataType,t.dims.length),N=ft("input_slice_offsets_data",12,1,1),L=[R,N],se=[{name:"output_size",type:"u32"},{name:"batch_dims",type:"u32"},{name:"input_dims",type:"u32",length:o.length},{name:"sizes_from_slice_dims_data",type:"u32",length:s.length},{name:"num_slices_per_batch",type:"u32"},{name:"input_batch_stride",type:"u32"},{name:"num_slice_dims",type:"u32"}];return`
  ${S.registerUniforms(se).declareVariables(...L)}
  ${S.mainStart()}
    ${S.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let batch_idx = global_idx / uniforms.num_slices_per_batch;
    let base_offset = batch_idx * uniforms.input_batch_stride;

    let slice_indices_base_offset = global_idx * uniforms.num_slice_dims;
    var relative_slice_offset = 0;
    for (var dim_idx = 0u; dim_idx < uniforms.num_slice_dims; dim_idx ++) {
      var index = i32(indices_data[dim_idx + slice_indices_base_offset].x);
      let input_dim_idx = uniforms.batch_dims + dim_idx;
      if (index < 0) {
        ${o.length===1?"index += i32(uniforms.input_dims);":"index += i32(uniforms.input_dims[input_dim_idx]);"}
      }
      ${s.length===1?"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data);":"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data[dim_idx]);"}
    }

    input_slice_offsets_data[global_idx] =  base_offset + u32(relative_slice_offset);
  }`};return e.compute({name:"computeSliceOffsets",shaderCache:{hint:`${o.length}_${s.length}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:k,dataType:e.inputs[1].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:h}),getShaderSource:u},{inputs:[t],outputs:[-1]})[0]},Ru=(e,t)=>{let s=e.inputs,n=s[0].dims,o=s[0].dataType,i=s[1].dims,a=i[i.length-1],c=Ce.sizeToDimension(i,i.length-1),p=Ce.sizeFromDimension(n,t.batchDims+a),h=Ce.sizeToDimension(n,t.batchDims),k=Ce.sizeFromDimension(n,t.batchDims),u=c/h,S=new Array(a),R=p;for(let me=0;me<a;++me)S[a-1-me]=R,R*=n[t.batchDims+a-1-me];let N=Bu(e,s[1],S,t.batchDims,n,c,u,k,a),L=t.batchDims+a;if(L>n.length)throw new Error("last dimension of indices must not be larger than rank of input tensor");let se=i.slice(0,-1).concat(n.slice(L)),ee=Ce.size(se),U=[{type:12,data:ee},{type:12,data:p},...Tt(s[0].dims,N.dims,se)],ce=me=>{let ye=Le("data",s[0].dataType,s[0].dims.length),ze=Le("slice_offsets",12,N.dims.length),Ee=ft("output",s[0].dataType,se.length);return`
          ${me.registerUniform("output_size","u32").registerUniform("slice_size","u32").declareVariables(ye,ze,Ee)}
            ${me.mainStart()}
            ${me.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          let slice_offset = slice_offsets[global_idx / uniforms.slice_size];
          output[global_idx] = data[u32(slice_offset) + global_idx % uniforms.slice_size];
        }`};e.compute({name:"GatherND",shaderCache:{hint:t.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:se,dataType:o}],dispatchGroup:{x:Math.ceil(ee/64)},programUniforms:U}),getShaderSource:ce},{inputs:[s[0],N]})},Mc=e=>({batchDims:e.batch_dims,cacheKey:""})}),Nu,ju,wn,Wu,vc=y(()=>{Lt(),Nt(),It(),Ht(),Nu=(e,t)=>{if(e.length<3||e.length>4)throw new Error("GatherBlockQuantized requires 3 or 4 inputs.");let s=Ce.normalizeAxis(t.quantizeAxis,e[0].dims.length),n=t.blockSize,o=e[0],i=e[2],a=e.length===4?e[3]:void 0;if(i.dims.length!==o.dims.length||!o.dims.map((c,p)=>p===s?Math.ceil(c/n)===i.dims[p]:c===i.dims[p]).reduce((c,p)=>c&&p,!0))throw new Error("Scales must have the same rank as the input tensor and the dims should match except on gatherAxis.");if(a){if(a.dataType!==o.dataType)throw new Error("Zero point must have the same data type as the input tensor.");if(a.dims.length!==i.dims.length||!a.dims.map((c,p)=>c===i.dims[p]).reduce((c,p)=>c&&p,!0))throw new Error("Zero point must have the same rank as the input tensor and the dims should match except on quantizeAxis.")}},ju=(e,t)=>{let s=e[0].dims,n=e[1].dims,o=s.length,i=Ce.normalizeAxis(t.gatherAxis,o),a=Ce.normalizeAxis(t.quantizeAxis,o),c=s.slice(0);c.splice(i,1,...n);let p=Ce.size(c),h=e[2].dataType,k=e[0].dataType===22,u=[{type:12,data:p},{type:12,data:a},{type:12,data:i},{type:12,data:t.blockSize},...Tt(...e.map((R,N)=>R.dims),c)],S=R=>{let N=Le("data",e[0].dataType,e[0].dims.length),L=Le("inputIndices",e[1].dataType,e[1].dims.length),se=Le("scales",e[2].dataType,e[2].dims.length),ee=e.length>3?Le("zeroPoint",e[3].dataType,e[3].dims.length):void 0,U=ft("output",h,c.length),ce=[N,L,se];ee&&ce.push(ee);let me=[{name:"output_size",type:"u32"},{name:"quantize_axis",type:"u32"},{name:"gather_axis",type:"u32"},{name:"block_size",type:"u32"}];return`
        ${R.registerUniforms(me).declareVariables(...ce,U)}
        ${R.mainStart()}
        let output_indices = ${U.offsetToIndices("global_idx")};
        var indices_indices = ${L.type.indices}(0);
        ${n.length>1?`
          for (var i: u32 = 0; i < ${n.length}; i++) {
            let index = ${U.indicesGet("output_indices","uniforms.gather_axis + i")};
            ${L.indicesSet("indices_indices","i","index")};
          }`:`indices_indices = ${U.indicesGet("output_indices","uniforms.gather_axis")};`};
        var data_indices = ${N.type.indices}(0);
        for (var i: u32 = 0; i < uniforms.gather_axis; i++) {
          let index = ${U.indicesGet("output_indices","i")};
          ${N.indicesSet("data_indices","i","index")};
        }
        var index_from_indices = ${L.getByIndices("indices_indices")};
        if (index_from_indices < 0) {
          index_from_indices += ${s[i]};
        }
        ${N.indicesSet("data_indices","uniforms.gather_axis","u32(index_from_indices)")};
        for (var i = uniforms.gather_axis + 1; i < ${c.length}; i++) {
          let index = ${U.indicesGet("output_indices",`i + ${n.length} - 1`)};
          ${N.indicesSet("data_indices","i","index")};
        }
        let data_offset = ${N.indicesToOffset("data_indices")};
        let data_index = data_offset % 8;
        // Convert 4-bit packed data to 8-bit packed data.
        let packed_4bit_quantized_data = ${N.getByOffset("data_offset / 8")};
        let packed_8bit_quantized_data = (packed_4bit_quantized_data >> (4 * (data_index % 2))) & 0x0f0f0f0f;
        let quantized_data_vec = ${k?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_quantized_data));
        let quantized_data = quantized_data_vec[data_index / 2];
        var scale_indices = data_indices;
        let quantize_axis_index = ${se.indicesGet("data_indices","uniforms.quantize_axis")} / uniforms.block_size;
        ${se.indicesSet("scale_indices","uniforms.quantize_axis","quantize_axis_index")};
        var scale = ${se.getByIndices("scale_indices")};
        ${ee?`
              let zero_point_indices = scale_indices;
              let zero_point_offset = ${ee.indicesToOffset("zero_point_indices")};
              let zero_point_index = zero_point_offset % 8;
              let packed_4bit_zero_points = ${ee.getByOffset("zero_point_offset / 8")};
              let packed_8bit_zero_points = (packed_4bit_zero_points >> (4 * (zero_point_index % 2))) & 0x0f0f0f0f;
              let zero_point_vec = ${k?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_zero_points));
              let zero_point = zero_point_vec[zero_point_index / 2];`:"var zero_point = 0"};
        let dequantized_data = ${ls(h)}(quantized_data - zero_point) * scale;
        ${U.setByOffset("global_idx","dequantized_data")};
    }`};return{name:"GatherBlockQuantized",shaderCache:{hint:`${t.cacheKey};${e.filter((R,N)=>N!==1).map(R=>R.dims.join("_")).join(";")}`,inputDependencies:Array.from({length:e.length},(R,N)=>"rank")},getRunData:()=>({outputs:[{dims:c,dataType:h}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:u}),getShaderSource:S}},wn=(e,t)=>{let s=e.inputs;Nu(s,t),e.compute(ju(e.inputs,t))},Wu=e=>Ye({blockSize:e.blockSize,gatherAxis:e.gatherAxis,quantizeAxis:e.quantizeAxis})}),Uu,Vu,Gu,xo,Sp=y(()=>{Lt(),Nt(),It(),Ht(),Uu=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},Vu=(e,t)=>{let s=e[0].dims,n=e[0].dataType,o=s.length,i=e[1].dims,a=e[1].dataType,c=Ce.normalizeAxis(t.axis,o),p=s[c],h=i.slice(0),k=Ce.size(h),u=Le("input",n,o),S=Le("indicesInput",a,i.length),R=ft("output",n,h.length),N=[{type:12,data:k},{type:6,data:p},{type:12,data:c}];return N.push(...Tt(s,i,h)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:h,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(k/64)},programUniforms:N}),getShaderSource:L=>`
      ${L.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(u,S,R)}
      ${L.mainStart()}
      ${L.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

      let outputIndices = ${R.offsetToIndices("global_idx")};

      var idx = ${S.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + uniforms.axisDimLimit;
      }
      var inputIndices = ${u.type.indices}(outputIndices);
      ${u.indicesSet("inputIndices","uniforms.axis","u32(idx)")};
      let value = ${u.getByIndices("inputIndices")};

      ${R.setByOffset("global_idx","value")};
  }`}},Gu=e=>Ye({axis:e.axis}),xo=(e,t)=>{let s=e.inputs;Uu(s),e.compute(Vu(e.inputs,t))}}),Ku,Hu,qu,Xu,Tc=y(()=>{Lt(),Nt(),Ht(),Ku=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},Hu=(e,t)=>{let s=e[0].dims.slice(),n=e[1].dims.slice(),[o,i,a]=Vs.getShapeOfGemmResult(s,t.transA,n,t.transB,e.length===3?e[2].dims:void 0),c=[o,i];if(!c)throw new Error("Can't use gemm on the given tensors");let p=16,h=Math.ceil(i/p),k=Math.ceil(o/p),u=!0,S=Ce.size(c),R=[{type:12,data:u?h:S},{type:12,data:o},{type:12,data:i},{type:12,data:a},{type:1,data:t.alpha},{type:1,data:t.beta}],N=["type","type"];e.length===3&&(R.push(...Tt(e[2].dims)),N.push("rank")),R.push(...Tt(c));let L=ee=>{let U="";t.transA&&t.transB?U="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":t.transA&&!t.transB?U="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!t.transA&&t.transB?U="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!t.transA&&!t.transB&&(U="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let ce=t.alpha===1?"":"value *= uniforms.alpha;",me=Le("a",e[0].dataType,e[0].dims),ye=Le("b",e[1].dataType,e[1].dims),ze=me.type.value,Ee=null,tt=[me,ye];e.length===3&&(Ee=Le("c",e[2].dataType,e[2].dims.length),tt.push(Ee));let mt=ft("output",e[0].dataType,c.length);tt.push(mt);let Ct=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`
  ${ee.registerUniforms(Ct).declareVariables(...tt)}

  ${ee.mainStart()}
    ${ee.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let m = global_idx / uniforms.N;
    let n = global_idx % uniforms.N;

    var value = ${ze}(0);
    for (var k: u32 = 0u; k < uniforms.K; k++) {
      ${U}
    }

    ${ce}
    ${Ee!=null?`let cOffset = ${Ee.broadcastedIndicesToOffset("vec2(m, n)",mt)}; value += ${ze}(uniforms.beta) * ${Ee.getByOffset("cOffset")};`:""}
    output[global_idx] = value;
  }`},se=ee=>{let U=Le("a",e[0].dataType,e[0].dims),ce=Le("b",e[1].dataType,e[1].dims),me=null,ye=[U,ce];e.length===3&&(me=Le("c",e[2].dataType,e[2].dims.length),ye.push(me));let ze=ft("output",e[0].dataType,c.length);ye.push(ze);let Ee=[{name:"num_tile_n",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}],tt="",mt="";t.transA&&t.transB?(mt=`
      var col = tile_row_start + local_id.x;
      var row = k_start + local_id.y;
      if (col < uniforms.M && row < uniforms.K) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${U.type.value}(0);
      }

      col = k_start + local_id.x;
      row = tile_col_start + local_id.y;
      if (col < uniforms.K && row < uniforms.N) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${ce.type.value}(0);
      }
      `,tt="value += tile_a[k][local_id.y] * tile_b[local_id.x][k];"):t.transA&&!t.transB?(mt=`
      var col = tile_row_start + local_id.x;
      var row = k_start + local_id.y;
      if (col < uniforms.M && row < uniforms.K) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${U.type.value}(0);
      }

      col = tile_col_start + local_id.x;
      row = k_start + local_id.y;
      if (col < uniforms.N && row < uniforms.K) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${ce.type.value}(0);
      }
      `,tt="value += tile_a[k][local_id.y] * tile_b[k][local_id.x];"):!t.transA&&t.transB?(mt=`
      var col = k_start + local_id.x;
      var row = tile_row_start + local_id.y;
      if (col < uniforms.K && row < uniforms.M) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${U.type.value}(0);
      }

      col = k_start + local_id.x;
      row = tile_col_start + local_id.y;
      if (col < uniforms.K && row < uniforms.N) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${ce.type.value}(0);
      }
      `,tt="value += tile_a[local_id.y][k] * tile_b[local_id.x][k];"):!t.transA&&!t.transB&&(mt=`
      var col = k_start + local_id.x;
      var row = tile_row_start + local_id.y;
      if (col < uniforms.K && row < uniforms.M) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${U.type.value}(0);
      }

      col = tile_col_start + local_id.x;
      row = k_start + local_id.y;
      if (col < uniforms.N && row < uniforms.K) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${ce.type.value}(0);
      }
      `,tt="value += tile_a[local_id.y][k] * tile_b[k][local_id.x];");let Ct=t.alpha===1?"":"value *= uniforms.alpha;";return`
  ${ee.registerUniforms(Ee).declareVariables(...ye)}
  var<workgroup> tile_a: array<array<${U.type.storage}, ${p}>, ${p}>;
  var<workgroup> tile_b: array<array<${ce.type.storage}, ${p}>, ${p}>;
  ${ee.mainStart([p,p,1])}
    let tile_col_start = (workgroup_index % uniforms.num_tile_n) * ${p};
    let tile_row_start = (workgroup_index / uniforms.num_tile_n) * ${p};
    let num_tiles = (uniforms.K - 1) / ${p} + 1;
    var k_start = 0u;
    var value = ${ze.type.value}(0);
    for (var t: u32 = 0u; t < num_tiles; t++) {
      ${mt}
      k_start = k_start + ${p};
      workgroupBarrier();

      for (var k: u32 = 0u; k < ${p}; k++) {
        ${tt}
      }
      workgroupBarrier();
    }

    ${Ct}
    let m = tile_row_start + local_id.y;
    let n = tile_col_start + local_id.x;
    ${me!=null?`let cOffset = ${me.broadcastedIndicesToOffset("vec2(m, n)",ze)}; value += ${ze.type.value}(uniforms.beta) * ${me.getByOffset("cOffset")};`:""}
    if (m < uniforms.M && n < uniforms.N) {
      output[m * uniforms.N + n] = value;
    }
  }`};return u?{name:"GemmShared",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:N},getRunData:()=>({outputs:[{dims:c,dataType:e[0].dataType}],dispatchGroup:{x:h*k},programUniforms:R}),getShaderSource:se}:{name:"Gemm",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:N},getRunData:()=>({outputs:[{dims:c,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(S/64)},programUniforms:R}),getShaderSource:L}},qu=e=>{let t=e.transA,s=e.transB,n=e.alpha,o=e.beta;return{transA:t,transB:s,alpha:n,beta:o,cacheKey:`${e.transA};${e.transB};${e.alpha===1}`}},Xu=(e,t)=>{Ku(e.inputs),e.compute(Hu(e.inputs,t))}}),gr,kr,en,jr,Qu,Yu,Li,Ju,Zu,Po,ed,td,sd,rd,nd=y(()=>{Lt(),Nt(),It(),Ht(),[gr,kr,en,jr]=[0,1,2,3],Qu=e=>{if(e[0].dims.length!==4)throw new Error("only 4-D tensor is supported.");if(e[0].dims.length!==e[1].dims.length)throw new Error("input dimensions must be equal to grid dimensions");if(e[0].dims.length-2!==e[1].dims[e[1].dims.length-1])throw new Error(`last dimension of grid must be equal to ${e[0].dims.length-2}`);if(e[0].dims[0]!==e[1].dims[0])throw new Error("grid batch size must match input batch size")},Yu=`
  fn gs_get_cubic_coeffs(x: f32) -> vec4<f32> {
    let cubic_alpha = -0.75f;
    let x_abs = abs(x);
    var coeffs: vec4<f32>;
    coeffs[0] = (((cubic_alpha * (x_abs + 1) - 5 * cubic_alpha) * (x_abs + 1) + 8 * cubic_alpha) * (x_abs + 1) - 4 * cubic_alpha);
    coeffs[1] = (((cubic_alpha + 2) * x_abs - (cubic_alpha + 3)) * x_abs * x_abs + 1);
    coeffs[2] = (((cubic_alpha + 2) * (1 - x_abs) - (cubic_alpha + 3)) * (1 - x_abs) * (1 - x_abs) + 1);
    coeffs[3] = (((cubic_alpha * (2 - x_abs) - 5 * cubic_alpha) * (2 - x_abs) + 8 * cubic_alpha) * (2 - x_abs) - 4 * cubic_alpha);
    return coeffs;
  }
`,Li=e=>`
  fn gs_bicubic_interpolate(p: mat4x4<${e}>, x: f32, y: f32) -> ${e} {
    var v: vec4<f32>;
    var coeffs = gs_get_cubic_coeffs(x);
    for (var i = 0; i < 4; i++) {
      v[i] = coeffs[0] * p[i][0] + coeffs[1] * p[i][1] + coeffs[2] * p[i][2] + coeffs[3] * p[i][3];
    }
    coeffs = gs_get_cubic_coeffs(y);
    let pixel = ${e}(coeffs[0] * v[0] + coeffs[1] * v[1] + coeffs[2] * v[2] + coeffs[3] * v[3]);
    return pixel;
  }
`,Ju=e=>`
  fn gs_denormalize(n: f32, length: i32) -> f32 {
    ${e.alignCorners===0?`
    // alignCorners: false => [-1, 1] to [-0.5, length - 0.5]
    return ((n + 1.0) * f32(length) - 1.0) / 2.0;
    `:`
    // alignCorners: true => [-1, 1] to [0, length - 1]
    return (n + 1.0) / 2.0 * (f32(length - 1));
    `}
  }
`,Zu=e=>`
  ${e.paddingMode==="reflection"?`
      fn gs_reflect(x: i32, x_min: f32, x_max: f32) -> u32 {
        var dx = 0.0;
        var fx = f32(x);
        let range = x_max - x_min;
        if (fx < x_min) {
          dx = x_min - fx;
          let n = u32(dx / range);
          let r = dx - f32(n) * range;
          if (n % 2 == 0) {
            fx = x_min + r;
          } else {
            fx = x_max - r;
          }
        } else if (fx > x_max) {
          dx = fx - x_max;
          let n = u32(dx / range);
          let r = dx - f32(n) * range;
          if (n % 2 == 0) {
            fx = x_max - r;
          } else {
            fx = x_min + r;
          }
        }
        return u32(fx);
      }`:""}
`,Po=(e,t,s)=>`
  fn pixel_at_grid(r: i32, c: i32, H: i32, W: i32, batch: u32, channel: u32, border: vec4<f32>) -> ${t} {
     var pixel = ${t}(0);
     var indices = vec4<u32>(0);
     indices[${gr}] = batch;
     indices[${kr}] = channel;`+(()=>{switch(s.paddingMode){case"zeros":return`
          if (r >= 0 && r < H && c >=0 && c < W) {
            indices[${en}] = u32(r);
            indices[${jr}] = u32(c);
          }
        `;case"border":return`
          indices[${en}] = u32(clamp(r, 0, H - 1));
          indices[${jr}] = u32(clamp(c, 0, W - 1));
        `;case"reflection":return`
          indices[${en}] = gs_reflect(r, border[1], border[3]);
          indices[${jr}] = gs_reflect(c, border[0], border[2]);
        `;default:throw new Error(`padding mode ${s.paddingMode} is not supported`)}})()+`
    return ${e.getByIndices("indices")};
  }
`,ed=(e,t,s)=>(()=>{switch(s.mode){case"nearest":return`
          let result = pixel_at_grid(i32(round(y)), i32(round(x)), H_in, W_in, indices[${gr}], indices[${kr}], border);
        `;case"bilinear":return`
          let x1 = i32(floor(x));
          let y1 = i32(floor(y));
          let x2 = x1 + 1;
          let y2 = y1 + 1;

          let p11 = pixel_at_grid(y1, x1, H_in, W_in, indices[${gr}], indices[${kr}], border);
          let p12 = pixel_at_grid(y1, x2, H_in, W_in, indices[${gr}], indices[${kr}], border);
          let p21 = pixel_at_grid(y2, x1, H_in, W_in, indices[${gr}], indices[${kr}], border);
          let p22 = pixel_at_grid(y2, x2, H_in, W_in, indices[${gr}], indices[${kr}], border);

          let dx2 = ${t}(f32(x2) - x);
          let dx1 = ${t}(x - f32(x1));
          let dy2 = ${t}(f32(y2) - y);
          let dy1 = ${t}(y - f32(y1));
          let result = dy2 * (dx2 * p11 + dx1 * p12) + dy1 * (dx2 * p21 + dx1 * p22);
        `;case"bicubic":return`
          let x0 = i32(floor(x)) - 1;
          let y0 = i32(floor(y)) - 1;
          var p: mat4x4<${t}>;
          for (var h = 0; h < 4; h++) {
            for (var w = 0; w < 4; w++) {
              p[h][w] = pixel_at_grid(h + y0, w + x0, H_in, W_in, indices[${gr}], indices[${kr}], border);
            }
          }

          let dx = x - f32(x0 + 1);
          let dy = y - f32(y0 + 1);
          let result = gs_bicubic_interpolate(p, dx, dy);
        `;default:throw new Error(`mode ${s.mode} is not supported`)}})()+`${e.setByOffset("global_idx","result")}`,td=(e,t)=>{let s=Le("x",e[0].dataType,e[0].dims.length),n=[e[1].dims[0],e[1].dims[1],e[1].dims[2]],o=Le("grid",e[1].dataType,n.length,2),i=[e[0].dims[0],e[0].dims[1],e[1].dims[1],e[1].dims[2]];t.format==="NHWC"&&(i=[e[0].dims[0],e[1].dims[1],e[1].dims[2],e[0].dims[3]],[gr,kr,en,jr]=[0,3,1,2]);let a=ft("output",e[0].dataType,i.length),c=s.type.value,p=Ce.size(i),h=[{type:12,data:p},...Tt(e[0].dims,n,i)],k=u=>`
  ${u.registerUniform("output_size","u32").declareVariables(s,o,a)}
  ${Yu}
  ${Li(c)}
  ${Ju(t)}
  ${Zu(t)}
  ${Po(s,c,t)}

  ${u.mainStart()}
    ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let H_in = i32(uniforms.x_shape[${en}]);
      let W_in = i32(uniforms.x_shape[${jr}]);

      ${t.alignCorners===0?`
      let x_min = -0.5;
      let x_max = f32(W_in) - 0.5;
      let y_min = -0.5;
      let y_max = f32(H_in) - 0.5;
      `:`
      let x_min = 0.0;
      let x_max = f32(W_in) - 1.0;
      let y_min = 0.0;
      let y_max = f32(H_in) - 1.0;
      `};
      let border = vec4<f32>(x_min, y_min, x_max, y_max);

      let indices = ${a.offsetToIndices("global_idx")};
      var grid_indices = vec3<u32>(indices[${gr}], indices[${en}], indices[${jr}]);
      let nxy = ${o.getByIndices("grid_indices")};
      var x = gs_denormalize(f32(nxy[0]), W_in);
      var y = gs_denormalize(f32(nxy[1]), H_in);

      ${ed(a,c,t)}
  }`;return{name:"GridSample",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:["type","type"]},getRunData:u=>{let S=Ce.size(i);return{outputs:[{dims:i,dataType:u[0].dataType}],dispatchGroup:{x:Math.ceil(S/64)},programUniforms:h}},getShaderSource:k}},sd=(e,t)=>{Qu(e.inputs),e.compute(td(e.inputs,t))},rd=e=>Ye({alignCorners:e.align_corners,mode:e.mode,paddingMode:e.padding_mode,format:e.format})}),Us,xc,od,zi,Bi,Bn,id,Ri=y(()=>{Lt(),Nt(),It(),mn(),no(),Ht(),Br(),Us=(e,t)=>e.length>t&&e[t].dims.length>0?e[t]:void 0,xc=(e,t)=>{let s=e[0],n=Us(e,1),o=Us(e,2),i=Us(e,3),a=Us(e,4),c=Us(e,5),p=Us(e,6),h=Us(e,7);if(s.dims.length!==3&&s.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let k=s.dims[0],u=s.dims[1],S=s.dims.length===3?s.dims[2]:t.numHeads*s.dims[4],R=u,N=0,L=0,se=Math.floor(S/t.numHeads);if(p&&h&&Ce.size(p.dims)&&Ce.size(h.dims)){if(p.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(p.dims[0]!==k||p.dims[1]!==t.numHeads||p.dims[3]!==se)throw new Error('Input "past_key" shape (batch_size, num_heads, past_sequence_length, head_size)');if(h.dims[0]!==k||h.dims[1]!==t.numHeads||h.dims[3]!==se)throw new Error('Input "past_value" shape (batch_size, num_heads, past_sequence_length, head_size)');if(p.dims[2]!==h.dims[2])throw new Error('Input "past_key" and "past_value" shall have same dim 2 (past_sequence_length)');if(h.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');N=p.dims[2],L=p.dims[2]}else if(p&&Ce.size(p.dims)||h&&Ce.size(h.dims))throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let ee;if(n&&Ce.size(n.dims)>0){if(s.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(n.dims.length<3||n.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(s.dims[0]!==n.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(n.dims.length===3){if(n.dims[2]!==s.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');ee=2,R=n.dims[1]}else if(n.dims.length===5){if(n.dims[2]!==t.numHeads||n.dims[3]!==2||n.dims[4]!==se)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(o)throw new Error('Expect "value" be none when "key" has packed kv format.');ee=5,R=n.dims[1]}else{if(n.dims[1]!==t.numHeads||n.dims[3]!==se)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');ee=0,R=n.dims[2]}}else{if(s.dims.length!==5)throw new Error('Input "query" is expected to have 5 dimensions when key is empty');if(s.dims[2]!==t.numHeads||s.dims[3]!==3)throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');ee=3}if(i&&Ce.size(i.dims)>0){if(i.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimension');if(n&&n.dims.length===5&&n.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let U=N+R,ce=0;if(a&&Ce.size(a.dims)>0){ce=8;let Ee=a.dims;throw Ee.length===1?Ee[0]===k?ce=1:Ee[0]===3*k+2&&(ce=3):Ee.length===2&&Ee[0]===k&&Ee[1]===U&&(ce=5),ce===8?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, total_sequence_length)'):new Error("Mask not supported")}let me=!1,ye=S;if(o&&Ce.size(o.dims)>0){if(o.dims.length!==3&&o.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(s.dims[0]!==o.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(o.dims.length===3){if(R!==o.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');ye=o.dims[2]}else{if(R!==o.dims[2])throw new Error('Input "key" and "value" shall have the same dim 2 (kv_sequence_length)');ye=o.dims[1]*o.dims[3],me=!0}}let ze=!1;if(a&&Ce.size(a.dims)>0)throw new Error("Key padding mask is not supported");if(c&&Ce.size(c.dims)>0){if(c.dims.length!==4)throw new Error('Input "attention_bias" is expected to have 4 dimensions');if(c.dims[0]!==k||c.dims[1]!==t.numHeads||c.dims[2]!==u||c.dims[3]!==U)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:k,sequenceLength:u,pastSequenceLength:N,kvSequenceLength:R,totalSequenceLength:U,maxSequenceLength:L,inputHiddenSize:0,hiddenSize:S,vHiddenSize:ye,headSize:se,vHeadSize:Math.floor(ye/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:ce,scale:t.scale,broadcastResPosBias:ze,passPastInKv:me,qkvFormat:ee}},od=e=>Ye({...e}),zi=Ye({perm:[0,2,1,3]}),Bi=(e,t,s,n,o,i,a)=>{let c=[n,o,i],p=Ce.size(c),h=[{type:12,data:p},{type:12,data:a},{type:12,data:i}],k=u=>{let S=ft("qkv_with_bias",t.dataType,c),R=Le("qkv",t.dataType,c),N=Le("bias",s.dataType,c),L=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`
  ${u.registerUniforms(L).declareVariables(R,N,S)}
  ${u.mainStart()}
    ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];
  }`};return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:c,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:h}),getShaderSource:k},{inputs:[t,s],outputs:[-1]})[0]},Bn=(e,t,s,n,o,i,a,c)=>{let p=i;if(a&&Ce.size(a.dims)>0){if(n===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return p=Bi(e,i,a,t,n,s*o,c),p=p.reshape([t,n,s,o]),s===1||n===1?p:e.compute(er(p,zi.perm),{inputs:[p],outputs:[-1]})[0]}else return i.dims.length===3&&(p=i.reshape([t,n,s,o])),s===1||n===1?p:e.compute(er(p,zi.perm),{inputs:[p],outputs:[-1]})[0]},id=(e,t)=>{let s=xc(e.inputs,t),n=e.inputs[0],o=Us(e.inputs,1),i=Us(e.inputs,2),a=Us(e.inputs,3),c=Us(e.inputs,4),p=Us(e.inputs,5),h=Us(e.inputs,6),k=Us(e.inputs,7);if(n.dims.length===5)throw new Error("Packed QKV is not implemented");if(o?.dims.length===5)throw new Error("Packed KV is not implemented");let u=o&&i&&o.dims.length===4&&i.dims.length===4,S=Bn(e,s.batchSize,s.numHeads,s.sequenceLength,s.headSize,n,a,0);if(u)return fn(e,S,o,i,c,void 0,h,k,p,s);if(!o||!i)throw new Error("key and value must be provided");let R=Bn(e,s.batchSize,s.numHeads,s.kvSequenceLength,s.headSize,o,a,s.hiddenSize),N=Bn(e,s.batchSize,s.numHeads,s.kvSequenceLength,s.vHeadSize,i,a,2*s.hiddenSize);fn(e,S,R,N,c,void 0,h,k,p,s)}}),ad,ld,Ni,Pc,ud,ji,Wi,dd=y(()=>{Lt(),Nt(),It(),Ht(),ad=e=>{if(!e||e.length<1)throw new Error("too few inputs")},ld=(e,t)=>{let s=[],n=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(o=>s.push(Number(o))),n=s.length),Ye({numOutputs:n,axis:t.axis,splitSizes:s})},Ni=e=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {
    if (index < ${Mt("uniforms.size_in_split_axis","i",e)}) {
        return i;
    }
    }
    return ${e}u;
}`,Pc=e=>{let t=e.length,s=[];for(let n=0;n<t;++n){let o=e[n].setByIndices("indices","input[global_idx]");t===1?s.push(o):n===0?s.push(`if (output_number == ${n}u) { ${o} }`):n===t-1?s.push(`else { ${o} }`):s.push(`else if (output_number == ${n}) { ${o} }`)}return`
      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {
        ${s.join(`
`)}
      }`},ud=(e,t)=>{let s=e[0].dims,n=Ce.size(s),o=e[0].dataType,i=Ce.normalizeAxis(t.axis,s.length),a=new Array(t.numOutputs),c=Le("input",o,s.length),p=new Array(t.numOutputs),h=[],k=[],u=0,S=[{type:12,data:n}];for(let N=0;N<t.numOutputs;N++){u+=t.splitSizes[N],p[N]=u;let L=s.slice();L[i]=t.splitSizes[N],k.push(L),a[N]=ft(`output${N}`,o,L.length),h.push({dims:k[N],dataType:e[0].dataType})}S.push({type:12,data:p},...Tt(s,...k));let R=N=>`
  ${N.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",p.length).declareVariables(c,...a)}
  ${Ni(p.length)}
  ${Pc(a)}

  ${N.mainStart()}
    ${N.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}

    var indices = ${c.offsetToIndices("global_idx")};
    var index = ${c.indicesGet("indices",i)};
    let output_number = calculateOutputIndex(index);
    if (output_number != 0) {
      index -= ${Mt("uniforms.size_in_split_axis","output_number - 1u",p.length)};
      ${c.indicesSet("indices",i,"index")};
    }
    writeBufferData(output_number, indices, global_idx);
  }`;return{name:"Split",shaderCache:{hint:t.cacheKey,inputDependencies:["rank"]},getShaderSource:R,getRunData:()=>({outputs:h,dispatchGroup:{x:Math.ceil(n/64)},programUniforms:S})}},ji=(e,t)=>{ad(e.inputs);let s=e.inputs.length===1?t:ld(e.inputs,t);e.compute(ud(e.inputs,s),{inputs:[0]})},Wi=e=>{let t=e.axis,s=e.splitSizes,n=e.numOutputs<0?s.length:e.numOutputs;if(n!==s.length)throw new Error("numOutputs and splitSizes lengh must be equal");return Ye({axis:t,numOutputs:n,splitSizes:s})}}),cd,Ui,Vi,pd,hd=y(()=>{It(),no(),Ri(),dd(),Br(),cd=(e,t)=>{if(t.doRotary&&e.length<=7)throw new Error("cos_cache and sin_cache inputs are required if do_rotary is specified");let s=e[0],n=e[1],o=e[2],i=e[3],a=e[4];if(t.localWindowSize!==-1)throw new Error("Local attention is not supported");if(t.softcap!==0)throw new Error("Softcap is not supported");if(t.rotaryInterleaved!==0)throw new Error("Rotary interleaved is not supported");if(t.smoothSoftmax)throw new Error("Smooth softmax is not supported");if(s.dims.length!==3&&s.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let c=!1,p=s.dims[0],h=s.dims[1],k=s.dims.length===3?c?s.dims[2]/3:s.dims[2]:t.numHeads*s.dims[4],u=h,S=0,R=!n||n.dims.length===0,N=Math.floor(R?k/(t.numHeads+2*t.kvNumHeads):k/t.numHeads);R&&(k=N*t.numHeads);let L=i&&i.dims.length!==0,se=a&&a.dims.length!==0;if(L&&i.dims.length===4&&i.dims[0]===p&&i.dims[1]!==t.kvNumHeads&&i.dims[2]===t.kvNumHeads&&i.dims[3]===N)throw new Error("BSNH pastKey/pastValue is not supported");if(L&&se){if(i.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(a.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');S=i.dims[2]}else if(L||se)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let ee=1;if(n&&n.dims.length>0){if(s.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(n.dims.length<3||n.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(s.dims[0]!==n.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(n.dims.length===3){if(s.dims[2]%n.dims[2]!==0)throw new Error('Dimension 2 of "query" should be a multiple of "key"');u=n.dims[1]}else if(n.dims.length===5){if(n.dims[2]!==t.numHeads||n.dims[3]!==2||n.dims[4]!==N)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(o)throw new Error('Expect "value" be none when "key" has packed kv format.');u=n.dims[1]}else{if(n.dims[1]!==t.numHeads||n.dims[3]!==N)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');u=n.dims[2]}}else{if(s.dims.length!==3&&s.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(s.dims.length===5&&(s.dims[2]!==t.numHeads||s.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');ee=3}let U=0,ce=!1,me=t.kvNumHeads?N*t.kvNumHeads:k;if(o&&o.dims.length>0){if(o.dims.length!==3&&o.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(s.dims[0]!==o.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(o.dims.length===3){if(u!==o.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');me=o.dims[2]}else{if(u!==o.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');me=o.dims[1]*o.dims[3],ce=!0}}let ye=e.length>4?e[5]:void 0;if(ye&&ye.dims.length!==1&&ye.dims[0]!==p)throw new Error('Input "seqlens" is expected to have 1 dimension and the same dim 0 as batch_size');return{batchSize:p,sequenceLength:h,pastSequenceLength:S,kvSequenceLength:u,totalSequenceLength:-1,maxSequenceLength:-1,inputHiddenSize:0,hiddenSize:k,vHiddenSize:me,headSize:N,vHeadSize:Math.floor(me/t.kvNumHeads),numHeads:t.numHeads,kvNumHeads:t.kvNumHeads,nReps:t.numHeads/t.kvNumHeads,pastPresentShareBuffer:!1,maskType:U,scale:t.scale,broadcastResPosBias:!1,passPastInKv:ce,qkvFormat:ee}},Ui=Ye({perm:[0,2,1,3]}),Vi=(e,t,s)=>{let n=t,o=s.kvNumHeads;return t.dims.length===3&&s.kvSequenceLength!==0&&(n=t.reshape([s.batchSize,s.kvSequenceLength,o,s.headSize]),n=e.compute(er(n,Ui.perm),{inputs:[n],outputs:[-1]})[0]),n},pd=(e,t)=>{let s=cd(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let n=e.inputs[0],o=e.inputs[1]&&e.inputs[1].dims.length>0?e.inputs[1]:void 0,i=e.inputs[2]&&e.inputs[2].dims.length>0?e.inputs[2]:void 0,a=e.inputs[3]&&e.inputs[3].dims.length!==0?e.inputs[3]:void 0,c=e.inputs[4]&&e.inputs[4].dims.length!==0?e.inputs[4]:void 0,p=e.inputs.length>4?e.inputs[5]:void 0,h=e.inputs.length>5?e.inputs[6]:void 0,k=s.kvNumHeads?s.kvNumHeads:s.numHeads,u=Ye({axis:2,numOutputs:3,splitSizes:[s.numHeads*s.headSize,k*s.headSize,k*s.headSize]}),[S,R,N]=!o&&!i?e.compute(ud([n],u),{inputs:[n],outputs:[-1,-1,-1]}):[n,o,i],L=Bn(e,s.batchSize,s.numHeads,s.sequenceLength,s.headSize,S,void 0,0);fn(e,L,Vi(e,R,s),Vi(e,N,s),void 0,void 0,a,c,void 0,s,p,h)}}),Gi,md,Ki,_d,Ec=y(()=>{Lt(),Nt(),Br(),Ht(),Gi=(e,t,s,n,o,i,a,c)=>{let p=cs(i),h=p===1?"f32":`vec${p}f`,k=p===1?"vec2f":`mat2x${p}f`,u=o*a,S=64;u===1&&(S=256);let R=[o,a,i/p],N=[o,a,2],L=["rank","type","type"],se=[];se.push(...Tt(R,N));let ee=U=>{let ce=Le("x",t.dataType,3,p),me=Le("scale",s.dataType,s.dims),ye=Le("bias",n.dataType,n.dims),ze=ft("output",1,3,2),Ee=[ce,me,ye,ze];return`
  var<workgroup> workgroup_shared : array<${k}, ${S}>;
  const workgroup_size = ${S}u;
  ${U.declareVariables(...Ee)}
  ${U.mainStart(S)}
    let batch = workgroup_index / uniforms.x_shape[1];
    let channel = workgroup_index % uniforms.x_shape[1];
    let hight = uniforms.x_shape[2];
    // initialize workgroup memory
    var sum = ${h}(0);
    var squared_sum = ${h}(0);
    for (var h = local_idx; h < hight; h += workgroup_size) {
      let value = ${h}(${ce.get("batch","channel","h")});
      sum += value;
      squared_sum += value * value;
    }
    workgroup_shared[local_idx] = ${k}(sum, squared_sum);
    workgroupBarrier();

    for (var currSize = workgroup_size >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (local_idx < currSize) {
        workgroup_shared[local_idx] = workgroup_shared[local_idx] + workgroup_shared[local_idx + currSize];
      }
      workgroupBarrier();
    }
    if (local_idx == 0) {
      let sum_final = ${Gs("workgroup_shared[0][0]",p)} / f32(hight * ${p});
      let squared_sum_final = ${Gs("workgroup_shared[0][1]",p)} / f32(hight * ${p});

      let inv_std_dev = inverseSqrt(squared_sum_final - sum_final * sum_final + f32(${c}));
      let channel_scale = inv_std_dev * f32(scale[channel]);
      let channel_shift = f32(bias[channel]) - sum_final * channel_scale;
      output[workgroup_index] = vec2f(channel_scale, channel_shift);
    }
  }`};return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${p};${c};${S}`,inputDependencies:L},getRunData:()=>({outputs:[{dims:N,dataType:1}],dispatchGroup:{x:u},programUniforms:se}),getShaderSource:ee},{inputs:[t,s,n],outputs:[-1]})[0]},md=(e,t,s)=>{let n=t[0].dims,o=n,i=2,a=n[0],c=n[1],p=Ce.sizeFromDimension(n,i),h=cs(p),k=Ce.size(o)/h,u=Gi(e,t[0],t[1],t[2],a,p,c,s.epsilon),S=[a,c,p/h],R=[a,c],N=["type","none"],L=se=>{let ee=Le("x",t[0].dataType,S.length,h),U=Le("scale_shift",1,R.length,2),ce=ft("output",t[0].dataType,S.length,h),me=[ee,U,ce];return`
  ${se.registerUniform("output_size","u32").declareVariables(...me)}
  ${se.mainStart()}
  ${se.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let outputIndices = ${ce.offsetToIndices("global_idx")};
      let batch = outputIndices[0];
      let channel = outputIndices[1];
      let scale_shift = ${U.getByIndices("vec2<u32>(batch, channel)")};
      let value = ${ee.getByOffset("global_idx")} * ${ce.type.value}(scale_shift.x) + ${ce.type.value}(scale_shift.y);
      ${ce.setByOffset("global_idx","value")};
  }`};e.compute({name:"InstanceNormalization",shaderCache:{hint:`${h}`,inputDependencies:N},getRunData:()=>({outputs:[{dims:o,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(k/64)},programUniforms:[{type:12,data:k},...Tt(S,R,S)]}),getShaderSource:L},{inputs:[t[0],u]})},Ki=(e,t,s)=>{let n=t[0].dims,o=n,i=n[0],a=n[n.length-1],c=Ce.sizeFromDimension(n,1)/a,p=cs(a),h=Ce.size(o)/p,k=[{type:12,data:c},{type:12,data:Math.floor(a/p)}],u=["type","type"],S=!1,R=[0,n.length-1];for(let ee=0;ee<n.length-2;ee++)S=S||n[ee+1]!==1,R.push(ee+1);S=S&&n[n.length-1]!==1;let N=S?e.compute(er(e.inputs[0],R),{inputs:[e.inputs[0]],outputs:[-1]})[0]:e.inputs[0].reshape(Array.from({length:n.length},(ee,U)=>n[R[U]])),L=Gi(e,N,t[1],t[2],i,c,a,s.epsilon),se=ee=>{let U=Zt(t[0].dataType),ce=p===1?"vec2f":`mat${p}x2f`,me=Ee=>{let tt=Ee===0?"x":"y",mt=p===1?"f32":`vec${p}f`;switch(p){case 1:return`${U}(${mt}(scale.${tt}))`;case 2:return`vec2<${U}>(${mt}(scale[0].${tt}, scale[1].${tt}))`;case 4:return`vec4<${U}>(${mt}(scale[0].${tt}, scale[1].${tt}, scale[2].${tt}, scale[3].${tt}))`;default:throw new Error(`Not supported compoents ${p}`)}},ye=Le("input",t[0].dataType,t[0].dims,p),ze=ft("output",t[0].dataType,o,p);return`
  @group(0) @binding(0) var<storage, read> input : array<${ye.type.storage}>;
  @group(0) @binding(1) var<storage, read> scale_input : array<${ce}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${ze.type.storage}>;
  struct Uniforms {H: u32, C : u32};
  @group(0) @binding(3) var<uniform> uniforms: Uniforms;

  ${ee.mainStart()}
    let current_image_number = global_idx / (uniforms.C * uniforms.H);
    let current_channel_number = global_idx % uniforms.C;

    let scale_offset = current_image_number * uniforms.C + current_channel_number;
    let scale = scale_input[scale_offset];
    output[global_idx] = fma(input[global_idx], ${me(0)}, ${me(1)});
  }`};e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${p}`,inputDependencies:u},getRunData:()=>({outputs:[{dims:o,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)},programUniforms:k}),getShaderSource:se},{inputs:[t[0],L]})},_d=(e,t)=>{t.format==="NHWC"?Ki(e,e.inputs,t):md(e,e.inputs,t)}}),fd,gd,wd,Cc=y(()=>{Lt(),Nt(),Ht(),fd=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},gd=(e,t,s)=>{let n=t.simplified,o=e[0].dims,i=e[1],a=!n&&e[2],c=o,p=Ce.normalizeAxis(t.axis,o.length),h=Ce.sizeToDimension(o,p),k=Ce.sizeFromDimension(o,p),u=Ce.size(i.dims),S=a?Ce.size(a.dims):0;if(u!==k||a&&S!==k)throw new Error(`Size of X.shape()[axis:] == ${k}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${u} and bias size of ${S}`);let R=[];for(let ye=0;ye<o.length;++ye)ye<p?R.push(o[ye]):R.push(1);let N=cs(k),L=["type","type"],se=[{type:12,data:h},{type:1,data:k},{type:12,data:Math.floor(k/N)},{type:1,data:t.epsilon}];a&&L.push("type");let ee=s>1,U=s>2,ce=ye=>{let ze=Zt(e[0].dataType),Ee=[Le("x",e[0].dataType,e[0].dims,N),Le("scale",i.dataType,i.dims,N)];a&&Ee.push(Le("bias",a.dataType,a.dims,N)),Ee.push(ft("output",e[0].dataType,c,N)),ee&&Ee.push(ft("mean_data_output",1,R)),U&&Ee.push(ft("inv_std_output",1,R));let tt=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`
  ${ye.registerUniforms(tt).declareVariables(...Ee)}
  ${ye.mainStart()}
    ${ye.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}
    let offset = global_idx * uniforms.norm_size_vectorized;
    var mean_vector = ${br("f32",N)};
    var mean_square_vector = ${br("f32",N)};

    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {
      let value = ${Is(ze,N,"x[h + offset]")};
      mean_vector += value;
      mean_square_vector += value * value;
    }
    let mean = ${Gs("mean_vector",N)} / uniforms.norm_size;
    let inv_std_dev = inverseSqrt(${Gs("mean_square_vector",N)} / uniforms.norm_size ${n?"":"- mean * mean"} + uniforms.epsilon);

    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {
      let f32input = ${Is(ze,N,"x[j + offset]")};
      let f32scale = ${Is(ze,N,"scale[j]")};
      output[j + offset] = ${Ee[0].type.value}((f32input ${n?"":"- mean"}) * inv_std_dev * f32scale
        ${a?`+ ${Is(ze,N,"bias[j]")}`:""}
      );
    }

    ${ee?"mean_data_output[global_idx] = mean":""};
    ${U?"inv_std_output[global_idx] = inv_std_dev":""};
  }`},me=[{dims:c,dataType:e[0].dataType}];return ee&&me.push({dims:R,dataType:1}),U&&me.push({dims:R,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${N};${s};${n}`,inputDependencies:L},getRunData:()=>({outputs:me,dispatchGroup:{x:Math.ceil(h/64)},programUniforms:se}),getShaderSource:ce}},wd=(e,t)=>{fd(e.inputs),e.compute(gd(e.inputs,t,e.outputCount))}}),yd,Md,kc=y(()=>{Nt(),Ti(),ho(),yd=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},Md=e=>{yd(e.inputs);let t=_s.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can't use matmul on the given tensors");let s=t[t.length-1],n=e.inputs[0].dims[e.inputs[0].dims.length-1];if(s<8&&n<8)e.compute(lo(e.inputs,{activation:""},t));else{let o=t[t.length-2],i=Ce.size(e.inputs[0].dims.slice(0,-2)),a=Ce.size(e.inputs[1].dims.slice(0,-2));if(i!==1&&o===1&&a===1){let c=e.inputs[0].reshape([1,i,n]),p=e.inputs[1].reshape([1,n,s]),h=[1,i,s],k=[c,p];e.compute(po(k,{activation:""},t,h),{inputs:k})}else e.compute(po(e.inputs,{activation:""},t))}}}),Hi,bd,vd,qi,Td,Sc=y(()=>{Lt(),Nt(),It(),Ht(),Hi=(e,t)=>{if(e.length<3||e.length>4)throw new Error("MatMulNBits requires 3 or 4 inputs");let s=e[0],n=s.dims.length;if(s.dims[n-1]!==t.k)throw new Error("The last dim of input shape does not match the k value");let o=Math.floor((t.k+t.blockSize-1)/t.blockSize),i=t.blockSize/8*t.bits,a=e[1];if(!Ce.areEqual(a.dims,[t.n,o,i]))throw new Error("The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize");let c=e[2].dims;if(Ce.size(c)!==t.n*o)throw new Error("scales input size error.");if(e.length===4){let p=e[3].dims,h=t.bits>4?t.n*o:t.n*Math.floor((o+1)/2);if(Ce.size(p)!==h)throw new Error("zeroPoints input size error.")}},bd=(e,t)=>{let s=e[0].dims,n=s.length,o=s[n-2],i=t.k,a=t.n,c=s.slice(0,n-2),p=Ce.size(c),h=e[1].dims[2]/4,k=e[0].dataType,u=cs(t.k),S=cs(h),R=cs(a),N=c.concat([o,a]),L=o>1&&a/R%2===0?2:1,se=Ce.size(N)/R/L,ee=64,U=[],ce=[p,o,i/u],me=Ce.convertShape(e[1].dims).slice();me.splice(-1,1,h/S),U.push(...Tt(ce)),U.push(...Tt(me)),U.push(...Tt(e[2].dims)),e.length===4&&U.push(...Tt(Ce.convertShape(e[3].dims)));let ye=[p,o,a/R];U.push(...Tt(ye));let ze=Ee=>{let tt=ce.length,mt=Le("a",e[0].dataType,tt,u),Ct=Le("b",12,me.length,S),Ft=Le("scales",e[2].dataType,e[2].dims.length),$t=[mt,Ct,Ft],bt=e.length===4?Le("zero_points",12,e[3].dims.length):void 0;bt&&$t.push(bt);let Kt=ye.length,jt=ft("output",e[0].dataType,Kt,R),Ot=Zt(e[0].dataType),ss=(()=>{switch(u){case 1:return`array<${Ot}, 8>`;case 2:return`mat4x2<${Ot}>`;case 4:return`mat2x4<${Ot}>`;default:throw new Error(`${u}-component is not supported.`)}})(),Jt=()=>{let at=`
          // reuse a data
            var input_offset = ${mt.indicesToOffset(`${mt.type.indices}(batch, row, word_offset)`)};
            var a_data: ${ss};
            for (var j: u32 = 0; j < ${8/u}; j++) {
              a_data[j] = ${mt.getByOffset("input_offset")};
              input_offset++;
            }
          `;for(let Pt=0;Pt<R*L;Pt++)at+=`
            b_value = ${S===1?`b${Pt}_data`:`b${Pt}_data[i]`};
            b_value_lower = unpack4xU8(b_value & b_mask);
            b_value_upper = unpack4xU8((b_value >> 4) & b_mask);
            b_quantized_values = ${ss}(${Array.from({length:4},(hs,vs)=>`${Ot}(b_value_lower[${vs}]), ${Ot}(b_value_upper[${vs}])`).join(", ")});
            b_dequantized_values = ${u===1?`${ss}(${Array.from({length:8},(hs,vs)=>`(b_quantized_values[${vs}] - ${bt?`zero_point${Pt}`:"zero_point"}) * scale${Pt}`).join(", ")});`:`(b_quantized_values - ${ss}(${Array(8).fill(`${bt?`zero_point${Pt}`:"zero_point"}`).join(",")})) * scale${Pt};`};
            workgroup_shared[local_id.x * ${L} + ${Math.floor(Pt/R)}]${R>1?`[${Pt%R}]`:""} += ${Array.from({length:8/u},(hs,vs)=>`${u===1?`a_data[${vs}] * b_dequantized_values[${vs}]`:`dot(a_data[${vs}], b_dequantized_values[${vs}])`}`).join(" + ")};
          `;return at},qt=()=>{let at=`
            var col_index = col * ${R};
            ${bt?`
            let zero_point_bytes_per_col = (nBlocksPerCol + 1) / 2;
            var zero_point_byte_count: u32;
            var zero_point_word_index: u32;
            var zero_point_byte_offset: u32;
            let zero_point_nibble_offset: u32 = block & 0x1u;
            var zero_point_bits_offset: u32;
            var zero_point_word: u32;`:`
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${Ot}(8);`}
            `;for(let Pt=0;Pt<R*L;Pt++)at+=`
            let scale${Pt} = ${Ft.getByOffset("col_index * nBlocksPerCol + block")};
            ${bt?`
            zero_point_byte_count = col_index * zero_point_bytes_per_col + (block >> 0x1u);
            zero_point_word_index = zero_point_byte_count >> 0x2u;
            zero_point_byte_offset = zero_point_byte_count & 0x3u;
            zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            zero_point_word = ${bt.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;
            let zero_point${Pt} = ${Ot}((zero_point_word) & 0xFu);`:""}
            col_index += 1;`;return at},Ys=()=>{let at=`col_index = col * ${R};`;for(let Pt=0;Pt<R*L;Pt++)at+=`
            let b${Pt}_data = ${Ct.getByIndices(`${Ct.type.indices}(col_index, block, word)`)};
            col_index += 1;`;return at+=`
            var b_value: u32;
            let b_mask: u32 = 0x0F0F0F0Fu;
            var b_value_lower: vec4<u32>;
            var b_value_upper: vec4<u32>;
            var b_quantized_values: ${ss};
            var b_dequantized_values: ${ss};`,at};return`
        var<workgroup> workgroup_shared: array<${jt.type.value}, ${L*ee}>;
        ${Ee.declareVariables(...$t,jt)}
        ${Ee.mainStart([ee,1,1])}
          let output_indices = ${jt.offsetToIndices(`(global_idx / ${ee}) * ${L}`)};
          let col = output_indices[2];
          let row = output_indices[1];
          let batch = output_indices[0];
          let nBlocksPerCol = uniforms.b_shape[1];

          for (var block = local_id.x; block < nBlocksPerCol; block += ${ee}) {
            //process one block
            var word_offset: u32 = block * ${t.blockSize/u};
            ${qt()}
            for (var word: u32 = 0; word < ${h}; word += ${S}) {
              ${Ys()}
              for (var i: u32 = 0; i < ${S}; i++) {
                ${Jt()}
                word_offset += ${8/u};
              }
            }
          }
          workgroupBarrier();

          if (local_id.x < ${L}) {
            var output_value: ${jt.type.value} = ${jt.type.value}(0);
            var workgroup_shared_offset: u32 = local_id.x;
            for (var b: u32 = 0u; b < ${ee}u; b++) {
              output_value += workgroup_shared[workgroup_shared_offset];
              workgroup_shared_offset += ${L};
            }
            ${jt.setByIndices(`${jt.type.indices}(batch, row, col + local_id.x)`,"output_value")};
          }
        }`};return{name:"MatMulNBits",shaderCache:{hint:`${t.blockSize};${t.bits};${u};${S};${R};${L};${ee}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:N,dataType:k}],dispatchGroup:{x:se},programUniforms:U}),getShaderSource:ze}},vd=(e,t)=>{let s=e[0].dims,n=s.length,o=s[n-2],i=t.k,a=t.n,c=s.slice(0,n-2),p=Ce.size(c),h=e[1].dims[2]/4,k=e[0].dataType,u=cs(t.k),S=cs(h),R=c.concat([o,a]),N=128,L=a%8===0?8:a%4===0?4:1,se=N/L,ee=se*S*8,U=ee/u,ce=ee/t.blockSize,me=Ce.size(R)/L,ye=[],ze=[p,o,i/u],Ee=Ce.convertShape(e[1].dims).slice();Ee.splice(-1,1,h/S),ye.push(...Tt(ze)),ye.push(...Tt(Ee)),ye.push(...Tt(e[2].dims)),e.length===4&&ye.push(...Tt(Ce.convertShape(e[3].dims)));let tt=[p,o,a];ye.push(...Tt(tt));let mt=Ct=>{let Ft=ze.length,$t=Le("a",e[0].dataType,Ft,u),bt=Le("b",12,Ee.length,S),Kt=Le("scales",e[2].dataType,e[2].dims.length),jt=[$t,bt,Kt],Ot=e.length===4?Le("zero_points",12,e[3].dims.length):void 0;Ot&&jt.push(Ot);let ss=tt.length,Jt=ft("output",e[0].dataType,ss),qt=Zt(e[0].dataType),Ys=()=>{switch(u){case 1:return`
          let a_data0 = vec4<${qt}>(sub_a[word_offset], sub_a[word_offset + 1], sub_a[word_offset + 2], sub_a[word_offset + 3]);
          let a_data1 = vec4<${qt}>(sub_a[word_offset + 4], sub_a[word_offset + 5], sub_a[word_offset + 6], sub_a[word_offset + 7]);`;case 2:return`
          let a_data0 = vec4<${qt}>(sub_a[word_offset], sub_a[word_offset + 1]);
          let a_data1 = vec4<${qt}>(sub_a[word_offset + 2], sub_a[word_offset + 3]);`;case 4:return`
          let a_data0 = sub_a[word_offset];
          let a_data1 = sub_a[word_offset + 1];`;default:throw new Error(`${u}-component is not supported.`)}};return`
        var<workgroup> sub_a: array<${$t.type.value}, ${U}>;
        var<workgroup> inter_results: array<array<${Jt.type.value}, ${se}>, ${L}>;
        ${Ct.declareVariables(...jt,Jt)}
        ${Ct.mainStart([se,L,1])}
          let output_indices = ${Jt.offsetToIndices(`workgroup_index * ${L}`)};
          let col = output_indices[2];
          let row = output_indices[1];
          let batch = output_indices[0];
          let n_blocks_per_col = uniforms.b_shape[1];
          let num_tiles =  (n_blocks_per_col - 1) / ${ce} + 1;

          // Loop over shared dimension.
          for (var tile: u32 = 0; tile < num_tiles; tile += 1) {
            let a_col_start = tile * ${U};
            // load one tile A data into shared memory.
            for (var a_offset = local_idx; a_offset < ${U}; a_offset += ${N})
            {
              let a_col = a_col_start + a_offset;
              if (a_col < uniforms.a_shape[2])
              {
                sub_a[a_offset] = ${$t.getByIndices(`${$t.type.indices}(batch, row, a_col)`)};
              } else {
                sub_a[a_offset] = ${$t.type.value}(0);
              }
            }
            workgroupBarrier();

            // each thread process one block
            let b_row = col + local_id.y;
            let block = tile * ${ce} + local_id.x;
            ${Ot?`
            let zero_point_bytes_per_col = (n_blocks_per_col + 1) / 2;
            let zero_point_byte_count = b_row * zero_point_bytes_per_col + (block >> 0x1u);
            let zero_point_word_index = zero_point_byte_count >> 0x2u;
            let zero_point_byte_offset = zero_point_byte_count & 0x3u;
            let zero_point_nibble_offset: u32 = block & 0x1u;
            let zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            let zero_point_word = ${Ot.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;
            let zero_point = ${qt}((zero_point_word) & 0xFu);`:`
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${qt}(8);`}
            let scale = ${Kt.getByOffset("b_row * n_blocks_per_col + block")};
            let b_data = ${bt.getByIndices(`${bt.type.indices}(b_row, block, 0)`)};
            var word_offset = local_id.x * ${t.blockSize/u};
            for (var i: u32 = 0; i < ${S}; i++) {
              ${Ys()}
              let b_value = ${S===1?"b_data":"b_data[i]"};
              let b_value_lower = unpack4xU8(b_value & 0x0F0F0F0Fu);
              let b_value_upper = unpack4xU8((b_value >> 4) & 0x0F0F0F0Fu);
              let b_quantized_values = mat2x4<${qt}>(${Array.from({length:4},(at,Pt)=>`${qt}(b_value_lower[${Pt}]), ${qt}(b_value_upper[${Pt}])`).join(", ")});
              let b_dequantized_values = (b_quantized_values - mat2x4<${qt}>(${Array(8).fill("zero_point").join(",")})) * scale;
              inter_results[local_id.y][local_id.x] += ${Array.from({length:2},(at,Pt)=>`${`dot(a_data${Pt}, b_dequantized_values[${Pt}])`}`).join(" + ")};
              word_offset += ${8/u};
            }
            workgroupBarrier();
          }

          if (local_idx < ${L}) {
            var output_value: ${Jt.type.value} = ${Jt.type.value}(0);
            for (var b = 0u; b < ${se}; b++) {
              output_value += inter_results[local_idx][b];
            }
            if (col + local_idx < uniforms.output_shape[2])
            {
              ${Jt.setByIndices(`${Jt.type.indices}(batch, row, col + local_idx)`,"output_value")}
            }
          }
        }`};return{name:"BlockwiseMatMulNBits32",shaderCache:{hint:`${t.blockSize};${u};${S};${se};${L}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:R,dataType:k}],dispatchGroup:{x:me},programUniforms:ye}),getShaderSource:mt}},qi=(e,t)=>{Hi(e.inputs,t),t.blockSize===32&&e.adapterInfo.isVendor("intel")&&e.adapterInfo.isArchitecture("gen-12lp")?e.compute(vd(e.inputs,t)):e.compute(bd(e.inputs,t))},Td=e=>Ye(e)}),fs,$c,Ac,Ic,Xi,xd,Pd,Ed,Cd,kd=y(()=>{Lt(),Nt(),Ht(),fs=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1&&e[0].dataType!==10)throw new Error("Input type must be float or float16.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},$c=(e,t,s)=>{let n="";for(let o=t-1;o>=0;--o)n+=`
            k = i32(${e.indicesGet("indices",o)}) - ${Mt("uniforms.pads",o,s)};
            if (k < 0) {
              break;
            }
            if (k >= i32(${Mt("uniforms.x_shape",o,t)})) {
              break;
            }
            offset += k * i32(${Mt("uniforms.x_strides",o,t)});
        `;return`
          value = ${e.type.value}(uniforms.constant_value);
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${n}
            value = x[offset];
          }
      `},Ac=(e,t,s)=>{let n="";for(let o=t-1;o>=0;--o)n+=`
                k = i32(${e.indicesGet("indices",o)}) - ${Mt("uniforms.pads",o,s)};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = 2 * (i32(${Mt("uniforms.x_shape",o,t)}) - 1);
                  k = k % _2n_1;
                  if(k >= i32(${Mt("uniforms.x_shape",o,t)})) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * i32(${Mt("uniforms.x_strides",o,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},Ic=(e,t,s)=>{let n="";for(let o=t-1;o>=0;--o)n+=`
                k = i32(${e.indicesGet("indices",o)}) - ${Mt("uniforms.pads",o,s)};
                if (k < 0) {
                  k = 0;
                }
                if (k >= i32(${Mt("uniforms.x_shape",o,t)})) {
                  k = i32(${Mt("uniforms.x_shape",o,t)}) - 1;
                }
                offset += k * i32(${Mt("uniforms.x_strides",o,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},Xi=(e,t,s)=>{let n="";for(let o=t-1;o>=0;--o)n+=`
                k = i32(${e.indicesGet("indices",o)}) - ${Mt("uniforms.pads",o,s)};
                if (k < 0)  {
                  k += i32(${Mt("uniforms.x_shape",o,t)}]);
                }
                if (k >= i32(${Mt("uniforms.x_shape",o,t)})) {
                  k -= i32(${Mt("uniforms.x_shape",o,t)});
                }
                offset += k * i32(${Mt("uniforms.x_strides",o,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},xd=(e,t,s)=>{switch(s.mode){case 0:return $c(e,t,s.pads.length);case 1:return Ac(e,t,s.pads.length);case 2:return Ic(e,t,s.pads.length);case 3:return Xi(e,t,s.pads.length);default:throw new Error("Invalid mode")}},Pd=(e,t)=>{let s=Ce.padShape(e[0].dims.slice(),t.pads),n=e[0].dims,o=Ce.size(s),i=[{type:12,data:o},{type:6,data:t.pads}],a=e.length>=3&&e[2].data;t.mode===0&&i.push({type:a?e[2].dataType:1,data:t.value}),i.push(...Tt(e[0].dims,s));let c=["rank"],p=h=>{let k=ft("output",e[0].dataType,s.length),u=Le("x",e[0].dataType,n.length),S=u.type.value,R=xd(k,n.length,t),N=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:t.pads.length}];return t.mode===0&&N.push({name:"constant_value",type:a?S:"f32"}),`
            ${h.registerUniforms(N).declareVariables(u,k)}
            ${h.mainStart()}
            ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

            let indices = ${k.offsetToIndices("global_idx")};

            var value = ${S}(0);
            ${R}
            output[global_idx] = value;
        }`};return{name:"Pad",shaderCache:{hint:`${t.mode}${a}`,inputDependencies:c},getRunData:()=>({outputs:[{dims:s,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(Ce.size(s)/64)},programUniforms:i}),getShaderSource:p}},Ed=(e,t)=>{if(e.length>1){let s=e[1].getBigInt64Array(),n=e.length>=3&&e[2].data?e[2].dataType===10?e[2].getUint16Array()[0]:e[2].getFloat32Array()[0]:0,o=e[0].dims.length,i=new Int32Array(2*o).fill(0);if(e.length>=4){let c=e[3].getBigInt64Array();for(let p=0;p<c.length;p++)i[Number(c[p])]=Number(s[p]),i[Number(c[p])+o]=Number(s[p+c.length])}else s.forEach((c,p)=>i[Number(p)]=Number(c));let a=[];return i.forEach(c=>a.push(c)),{mode:t.mode,value:n,pads:a}}else return t},Cd=(e,t)=>{fs(e.inputs);let s=Ed(e.inputs,t);e.compute(Pd(e.inputs,s),{inputs:[0]})}}),yn,Sd,Qi,Yi,Eo,Fc,Oc,Ji,Zi,$d,Ad,ea,Id,Fd,ta,Od,Dd,Ld,zd,$p=y(()=>{He(),Lt(),Nt(),Ht(),yn=e=>{if(x.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},Sd=(e,t,s)=>{let n=t.format==="NHWC",o=e.dims.slice();n&&o.splice(1,0,o.pop());let i=Object.hasOwnProperty.call(t,"dilations"),a=t.kernelShape.slice(),c=t.strides.slice(),p=i?t.dilations.slice():[],h=t.pads.slice();Es.adjustPoolAttributes(s,o,a,c,p,h);let k=Es.computePoolOutputShape(s,o,c,p,a,h,t.autoPad),u=Object.assign({},t);i?Object.assign(u,{kernelShape:a,strides:c,pads:h,dilations:p,cacheKey:t.cacheKey}):Object.assign(u,{kernelShape:a,strides:c,pads:h,cacheKey:t.cacheKey});let S=k.slice();return S.push(S.splice(1,1)[0]),[u,n?S:k]},Qi=(e,t)=>{let s=t.format==="NHWC",n=Ce.size(e),o=Ce.size(t.kernelShape),i=[{type:12,data:n},{type:12,data:o}],a=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){let c=t.kernelShape[t.kernelShape.length-1],p=t.strides[t.strides.length-1],h=t.pads[t.pads.length/2-1],k=t.pads[t.pads.length-1],u=!!(h+k);i.push({type:12,data:c},{type:12,data:p},{type:12,data:h},{type:12,data:k}),a.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let S=!1;if(t.kernelShape.length===2){let R=t.kernelShape[t.kernelShape.length-2],N=t.strides[t.strides.length-2],L=t.pads[t.pads.length/2-2],se=t.pads[t.pads.length-2];S=!!(L+se),i.push({type:12,data:R},{type:12,data:N},{type:12,data:L},{type:12,data:se}),a.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[i,a,!0,u,S]}else{if(s)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let c=Ce.computeStrides(t.kernelShape);i.push({type:12,data:c},{type:12,data:t.pads},{type:12,data:t.strides}),a.push({name:"kernelStrides",type:"u32",length:c.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length});let p=t.pads.reduce((h,k)=>h+k);return[i,a,!!p,!1,!1]}},Yi=(e,t,s,n,o,i,a,c,p,h,k,u)=>{let S=o.format==="NHWC",R=t.type.value,N=ft("output",t.type.tensor,n);if(o.kernelShape.length<=2){let L="",se="",ee="",U=s-(S?2:1);if(k?L=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${U}] = indices[${U}] * uniforms.sw - uniforms.pwStart + i;
                  if (xIndices[${U}] < 0 || xIndices[${U}]
                      >= uniforms.x_shape[${U}]) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${i}
                }`:L=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${U}] = indices[${U}] * uniforms.sw - uniforms.pwStart + i;
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${i}
                }`,o.kernelShape.length===2){let ce=s-(S?3:2);u?se=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${ce}] = indices[${ce}] * uniforms.sh - uniforms.phStart + j;
                  if (xIndices[${ce}] < 0 || xIndices[${ce}] >= uniforms.x_shape[${ce}]) {
                    pad += i32(uniforms.kw);
                    continue;
                  }
              `:se=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${ce}] = indices[${ce}] * uniforms.sh - uniforms.phStart + j;
                `,ee=`
              }
            `}return`
            ${e.registerUniforms(p).declareVariables(t,N)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

              let indices = ${N.offsetToIndices("global_idx")};
              var xIndices = ${N.offsetToIndices("global_idx")};

              var value = ${R}(${c});
              var pad = 0;
              ${se}
              ${L}
              ${ee}
              ${a}

              output[global_idx] = value;
            }`}else{if(S)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let L=o.kernelShape.length,se=o.pads.length,ee="";return h?ee=`
                if (xIndices[j] >= uniforms.x_shape[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${t.indicesToOffset("xIndices")}];
                ${i}
              }`:ee=`
              }
              let x_val = x[${t.indicesToOffset("xIndices")}];
              ${i}
            `,`
            ${e.registerUniforms(p).declareVariables(t,N)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
              let indices = ${N.offsetToIndices("global_idx")};
              var xIndices = ${N.offsetToIndices("global_idx")};

              var offsets: array<u32, ${L}>;

              var value = ${R}(${c});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {
                var offset = i;
                for (var j = 0u; j < ${L-1}u; j++) {
                  offsets[j] = offset / ${Mt("uniforms.kernelStrides","j",L)};
                  offset -= offsets[j] * ${Mt("uniforms.kernelStrides","j",L)};
                }
                offsets[${L-1}] = offset;

                isPad = false;
                for (var j = ${s-L}u; j < ${s}u; j++) {
                  xIndices[j] = indices[j] * ${Mt("uniforms.strides",`j - ${s-L}u`,L)}
                    + offsets[j - ${s-L}u] - ${Mt("uniforms.pads","j - 2u",se)};
                  ${ee}
              }
              ${a}

              output[global_idx] = value;
            }`}},Eo=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,Fc=e=>`${Eo(e)};${e.countIncludePad}`,Oc=e=>`${Eo(e)};${e.storageOrder};${e.dilations}`,Ji=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),Zi=(e,t,s,n)=>{let[o,i]=Sd(t,n,s),a=Le("x",t.dataType,t.dims.length),c=a.type.value,p="value += x_val;",h="";o.countIncludePad?h+=`value /= ${c}(uniforms.kernelSize);`:h+=`value /= ${c}(i32(uniforms.kernelSize) - pad);`;let[k,u,S,R,N]=Qi(i,o);k.push(...Tt(t.dims,i));let L=["rank"];return{name:e,shaderCache:{hint:`${n.cacheKey};${S};${R};${N}`,inputDependencies:L},getRunData:()=>({outputs:[{dims:i,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(Ce.size(i)/64)},programUniforms:k}),getShaderSource:se=>Yi(se,a,t.dims.length,i.length,o,p,h,0,u,S,R,N)}},$d=e=>{let t=e.count_include_pad!==0,s=Ji(e);if(s.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let n={countIncludePad:t,...s,cacheKey:""};return{...n,cacheKey:Fc(n)}},Ad=(e,t)=>{yn(e.inputs),e.compute(Zi("AveragePool",e.inputs[0],!1,t))},ea={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},Id=e=>{let t=e.format;return{format:t,...ea,cacheKey:t}},Fd=(e,t)=>{yn(e.inputs),e.compute(Zi("GlobalAveragePool",e.inputs[0],!0,t))},ta=(e,t,s,n)=>{let[o,i]=Sd(t,n,s),a=`
      value = max(x_val, value);
    `,c="",p=Le("x",t.dataType,t.dims.length),h=["rank"],[k,u,S,R,N]=Qi(i,o);return k.push(...Tt(t.dims,i)),{name:e,shaderCache:{hint:`${n.cacheKey};${S};${R};${N}`,inputDependencies:h},getRunData:()=>({outputs:[{dims:i,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(Ce.size(i)/64)},programUniforms:k}),getShaderSource:L=>Yi(L,p,t.dims.length,i.length,o,a,c,t.dataType===10?-65504:-1e5,u,S,R,N)}},Od=(e,t)=>{yn(e.inputs),e.compute(ta("MaxPool",e.inputs[0],!1,t))},Dd=e=>{let t=e.storage_order,s=e.dilations,n=Ji(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(n.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let o={storageOrder:t,dilations:s,...n,cacheKey:""};return{...o,cacheKey:Oc(o)}},Ld=e=>{let t=e.format;return{format:t,...ea,cacheKey:t}},zd=(e,t)=>{yn(e.inputs),e.compute(ta("GlobalMaxPool",e.inputs[0],!0,t))}}),Bd,Rd,Nd,jd,Dc=y(()=>{Lt(),Nt(),It(),Ht(),Bd=(e,t)=>{if(e.length<2||e.length>3)throw new Error("DequantizeLinear requires 2 or 3 inputs.");if(e.length===3&&e[1].dims===e[2].dims)throw new Error("x-scale and x-zero-point must have the same shape.");if(e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(e[0].dataType===6&&e.length>2)throw new Error("In the case of dequantizing int32 there is no zero point.");if(e[1].dims.length!==0&&e[1].dims.length!==1&&e[1].dims.length!==e[0].dims.length)throw new Error("scale input must be a scalar, a 1D tensor, or have the same rank as the input tensor.");if(e.length>2){if(e[0].dataType!==e[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(e[1].dims.length!==e[2].dims.length)throw new Error("scale and zero-point inputs must have the same rank.");if(!e[1].dims.map((s,n)=>s===e[2].dims[n]).reduce((s,n)=>s&&n,!0))throw new Error("scale and zero-point inputs must have the same shape.")}if(t.blockSize>0){if(e[1].dims.length===0||e[1].dims.length===1&&e[1].dims[0]===1)throw new Error("blockSize must be set only for block quantization.");if(!e[1].dims.map((o,i)=>i===t.axis||o===e[0].dims[i]).reduce((o,i)=>o&&i,!0))throw new Error("For block qunatization, scale input shape to match the input shape except for the axis");if(e[1].dims.length!==e[0].dims.length)throw new Error("For block qunatization the scale input rank must be the same as the x rank.");let s=e[0].dims[t.axis],n=e[1].dims[t.axis];if(t.blockSize<Math.ceil(s/n)||t.blockSize>Math.ceil(s/(n-1)-1))throw new Error("blockSize must be with in the range [ceil(dI / Si), ceil(dI / (Si - 1) - 1)].")}},Rd=(e,t)=>{let s=Ce.normalizeAxis(t.axis,e[0].dims.length),n=e[0].dataType,o=n===3,i=e[0].dims,a=e[1].dataType,c=Ce.size(i),p=n===3||n===2,h=p?[Math.ceil(Ce.size(e[0].dims)/4)]:e[0].dims,k=e[1].dims,u=e.length>2?e[2]:void 0,S=u?p?[Math.ceil(Ce.size(u.dims)/4)]:u.dims:void 0,R=k.length===0||k.length===1&&k[0]===1,N=R===!1&&k.length===1,L=cs(c),se=R&&(!p||L===4),ee=se?L:1,U=se&&!p?L:1,ce=Le("input",p?12:n,h.length,U),me=Le("scale",a,k.length),ye=u?Le("zero_point",p?12:n,S.length):void 0,ze=ft("output",a,i.length,ee),Ee=[ce,me];ye&&Ee.push(ye);let tt=[h,k];u&&tt.push(S);let mt=[{type:12,data:c/ee},{type:12,data:s},{type:12,data:t.blockSize},...Tt(...tt,i)],Ct=Ft=>{let $t=[{name:"output_size",type:"u32"},{name:"axis",type:"u32"},{name:"block_size",type:"u32"}];return`
      ${Ft.registerUniforms($t).declareVariables(...Ee,ze)}
      ${Ft.mainStart()}
          ${Ft.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          let output_indices = ${ze.offsetToIndices("global_idx")};

          // Set input x
          ${p?`
            let input = ${ce.getByOffset("global_idx / 4")};
            let x_vec = ${o?"unpack4xI8(input)":"unpack4xU8(input)"};
            let x_value = ${ee===1?"x_vec[global_idx % 4]":"x_vec"};`:`let x_value = ${ce.getByOffset("global_idx")};`};

          // Set scale input
          ${R?`let scale_value= ${me.getByOffset("0")}`:N?`
            let scale_index = ${ze.indicesGet("output_indices","uniforms.axis")};
            let scale_value= ${me.getByOffset("scale_index")};`:`
            var scale_indices: ${me.type.indices} = output_indices;
            let index = ${me.indicesGet("scale_indices","uniforms.axis")} / uniforms.block_size;
            ${me.indicesSet("scale_indices","uniforms.axis","index")};
            let scale_value= ${me.getByIndices("scale_indices")};`};

          // Set zero-point input
          ${ye?R?p?`
                let zero_point_input = ${ye.getByOffset("0")};
                let zero_point_vec =  ${o?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value= zero_point_vec[0]`:`let zero_point_value = ${ye.getByOffset("0")}`:N?p?`
                let zero_point_index = ${ze.indicesGet("output_indices","uniforms.axis")};
                let zero_point_input = ${ye.getByOffset("zero_point_index / 4")};
                let zero_point_vec =  ${o?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_index % 4]`:`
                let zero_point_index = ${ze.indicesGet("output_indices","uniforms.axis")};
                let zero_point_value = ${ye.getByOffset("zero_point_index")};`:p?`
                let zero_point_offset = ${me.indicesToOffset("scale_indices")};
                let zero_point_input = ${ye.getByOffset("zero_point_offset / 4")};
                let zero_point_vec = ${o?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_offset % 4];`:`let zero_point_value = ${ye.getByIndices("scale_indices")};`:`let zero_point_value = ${p?o?"i32":"u32":ce.type.value}(0);`};
      // Compute and write output
      ${ze.setByOffset("global_idx",`${ze.type.value}(x_value - zero_point_value) * scale_value`)};
      }`};return{name:"DequantizeLinear",shaderCache:{hint:t.cacheKey,inputDependencies:ye?["rank","rank","rank"]:["rank","rank"]},getShaderSource:Ct,getRunData:()=>({outputs:[{dims:i,dataType:a}],dispatchGroup:{x:Math.ceil(c/ee/64),y:1,z:1},programUniforms:mt})}},Nd=(e,t)=>{Bd(e.inputs,t),e.compute(Rd(e.inputs,t))},jd=e=>Ye({axis:e.axis,blockSize:e.blockSize})}),Wd,Lc,zc,Ap=y(()=>{He(),Lt(),Ht(),Wd=(e,t,s)=>{let n=e===t,o=e<t&&s<0,i=e>t&&s>0;if(n||o||i)throw new Error("Range these inputs' contents are invalid.")},Lc=(e,t,s,n)=>{let o=Math.abs(Math.ceil((t-e)/s)),i=[o],a=o,c=[{type:12,data:a},{type:n,data:e},{type:n,data:s},...Tt(i)],p=h=>{let k=ft("output",n,i.length),u=k.type.value,S=[{name:"outputSize",type:"u32"},{name:"start",type:u},{name:"delta",type:u}];return`
        ${h.registerUniforms(S).declareVariables(k)}
        ${h.mainStart()}
        ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        output[global_idx] = uniforms.start + ${u}(global_idx) * uniforms.delta;
      }`};return{name:"Range",shaderCache:{hint:`${n}`},getShaderSource:p,getRunData:()=>({outputs:[{dims:i,dataType:n}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:c})}},zc=e=>{let t=0,s=0,n=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],s=e.inputs[1].getInt32Array()[0],n=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],s=e.inputs[1].getFloat32Array()[0],n=e.inputs[2].getFloat32Array()[0]),x.webgpu.validateInputContent&&Wd(t,s,n),e.compute(Lc(t,s,n,e.inputs[0].dataType),{inputs:[]})}}),Bc,Rc,Nc,jc,Ip=y(()=>{Lt(),Nt(),It(),Ht(),Bc=(e,t,s,n)=>{if(e!=="none"&&n!=="i32"&&n!=="u32"&&n!=="f32")throw new Error(`Input ${n} is not supported with reduction ${e}.`);let o=`{
                var oldValue = 0;
                loop {
                  let newValueF32 =`,i=`;
                  let newValue = bitcast<i32>(newValueF32);
                  let res = atomicCompareExchangeWeak(&${t}, oldValue, newValue);
                  if res.exchanged {
                    break;
                  }
                  oldValue = res.old_value;
                }
              }`;switch(e){case"none":return`${t}=${s};`;case"add":return n==="i32"||n==="u32"?`atomicAdd(&${t}, bitcast<${n}>(${s}));`:`
              ${o}bitcast<${n}>(oldValue) + (${s})${i}`;case"max":return n==="i32"||n==="u32"?`atomicMax(&${t}, bitcast<${n}>(${s}));`:`
                ${o}max(bitcast<f32>(oldValue), (${s}))${i}`;case"min":return n==="i32"||n==="u32"?`atomicMin(&${t}, bitcast<${n}>(${s}));`:`${o}min(bitcast<${n}>(oldValue), (${s}))${i}`;case"mul":return`${o}(bitcast<${n}>(oldValue) * (${s}))${i}`;default:throw new Error(`Reduction ${e} is not supported.`)}},Rc=(e,t)=>{let s=e[0].dims,n=e[1].dims,o=s,i=1,a=Math.ceil(Ce.size(n)/i),c=n[n.length-1],p=Ce.sizeFromDimension(s,c),h=[{type:12,data:a},{type:12,data:c},{type:12,data:p},...Tt(e[1].dims,e[2].dims,o)],k=u=>{let S=Le("indices",e[1].dataType,e[1].dims.length),R=Le("updates",e[2].dataType,e[2].dims.length,i),N=t.reduction!=="none"&&t.reduction!==""?Zs("output",e[0].dataType,o.length):ft("output",e[0].dataType,o.length,i);return`
      ${u.registerUniform("output_size","u32").registerUniform("last_index_dimension","u32").registerUniform("num_updates_elements","u32").declareVariables(S,R,N)}
      ${u.mainStart()}
        ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
  var data_offset = 0u;
  let indices_start = uniforms.last_index_dimension * global_idx;
  let indices_end = indices_start + uniforms.last_index_dimension;
  for (var i = indices_start; i < indices_end; i++) {
    var index = i32(indices[i].x);
    ${e[0].dims.length===1?`
    let element_count_dim = uniforms.output_strides;
    let dim_value = uniforms.output_shape;`:`
    let element_count_dim = uniforms.output_strides[i - indices_start];
    let dim_value = uniforms.output_shape[i - indices_start + uniforms.last_index_dimension];`}
    if (index >= 0) {
      if (index >= i32(dim_value)) {
        index = i32(dim_value - 1);
      }
    } else {
      if (index < -i32(dim_value)) {
        index = 0;
      } else {
        index += i32(dim_value);
      }
    }
    data_offset += u32((u32(index) * element_count_dim));
  }

  for (var i = 0u; i < uniforms.num_updates_elements; i++) {
    let value = updates[uniforms.num_updates_elements * global_idx + i];
    ${Bc(t.reduction,"output[data_offset + i]","value",N.type.value)}
  }

      }`};return{name:"ScatterND",shaderCache:{hint:`${t.cacheKey}_${t.reduction}`,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:h}),getShaderSource:k}},Nc=e=>Ye({reduction:e.reduction}),jc=(e,t)=>{e.compute(Rc(e.inputs,t),{inputs:[e.inputs[1],e.inputs[2]],outputs:[]})}}),Wc,Uc,Vc,Gc,Kc,Hc,qc,Xc,Qc,Yc,Jc,Ud,Zc,ep,tp,sp,rp,np,op,Fp=y(()=>{Lt(),Nt(),It(),Ht(),Wc=(e,t)=>{if(e.every(s=>s>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===3||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1||e.length===5&&e[0]===1&&e[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and
            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},Uc=(e,t,s)=>{t.every(o=>o>=0&&o<s||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let n=new Array(s).fill(1);return t.forEach((o,i)=>n[o]=e[i]),n},Vc=(e,t,s,n,o,i)=>{let[a,c,p]=s>10?[1,2,3]:[-1,e.length>1?1:-1,-1],h=e[0].dims.length;if(a>0&&e.length>a&&e[a].dims.length>0)e[a].getFloat32Array().forEach(k=>i.push(k));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(c>0&&e.length>c&&e[c].dims.length===1&&e[c].dims[0]>0){if(e[c].getFloat32Array().forEach(k=>n.push(k)),n.length!==0&&n.length!==h&&s>=18&&n.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");Wc(n,t),t.axes.length>0&&Uc(n,t.axes,h).forEach((k,u)=>n[u]=k)}if(p>0&&e.length>p&&e[p].dims.length===1&&e[p].dims[0]>0&&(e[p].getBigInt64Array().forEach(k=>o.push(Number(k))),o.length!==0&&o.length!==h&&s>=18&&o.length!==t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(n.length!==0&&n.length!==t.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(o.length!==0&&o.length!==t.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof n<"u"&&typeof o<"u"&&n.length>0&&o.length>h)throw new Error("Resize requires only of scales or sizes to be specified")},Gc=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,
     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${t} { `+(()=>{switch(e){case"asymmetric":return`return ${t}(xResized) / ${t}(xScale);`;case"pytorch_half_pixel":return`if (lengthResized > 1) {
                    return (${t}(xResized) + 0.5) / ${t}(xScale) - 0.5;
                  } else {
                    return 0.0;
                  }`;case"tf_half_pixel_for_nn":return`return (${t}(xResized) + 0.5) / ${t}(xScale);`;case"align_corners":return`if (lengthResized == 1) {
                    return 0.0;
                  } else {
                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating
                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an
                    // offset-by-one error later in floor().
                    let whole = ${t}(xResized * (lengthOriginal - 1) / (lengthResized - 1));
                    let fract =
                        ${t}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${t}(lengthResized - 1);
                    return whole + fract;
                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {
                    return ${t}(roiStart) * ${t}(lengthOriginal - 1) +
                        (${t}(xResized) * ${t}(roiEnd - roiStart) * ${t}(lengthOriginal - 1)) /
                        ${t}(lengthResized - 1);
                  } else {
                    return 0.5 * ${t}(roiStart + roiEnd) * ${t}(lengthOriginal - 1);
                  }`;case"half_pixel_symmetric":return`const outputWidth = ${t}xScale * ${t}(lengthResized);
                  const adjustment = ${t}(lengthResized) / outputWidth;
                  const center = ${t}(lengthOriginal) / 2;
                  const offset = center * (1 - adjustment);
                  return offset + ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;case"half_pixel":return`return ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",Kc=(e,t,s)=>`fn getNearestPixelFromOriginal(xOriginal: ${s}, isDownSample: bool) -> ${s} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",Hc=(e,t,s)=>{let n=new Array(s).fill(0).concat(new Array(s).fill(1)),o=e.length===0?n:e.slice();return t.length>0?(t.forEach((i,a)=>{n[i]=o[a],n[a+s]=o[t.length+a]}),n):o},qc=(e,t,s,n)=>{let o=[];if(s.length>0)if(n.length>0){if(e.forEach(i=>o.push(i)),Math.max(...n)>e.length)throw new Error("axes is out of bound");n.forEach((i,a)=>o[i]=s[a])}else s.forEach(i=>o.push(i));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");o=e.map((i,a)=>Math.round(i*t[a]))}return o},Xc=(e,t,s)=>{let n=(()=>{switch(s.keepAspectRatioPolicy){case"not_larger":return s.axes.length>0?Math.min(...s.axes.map(i=>t[i]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return s.axes.length>0?Math.max(...s.axes.map(i=>t[i]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${s.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let o=e.slice();return s.axes.length>0?(s.axes.forEach(i=>t[i]=n),s.axes.forEach(i=>o[i]=Math.round(e[i]*t[i]))):(t.fill(n,0,t.length),o.forEach((i,a)=>o[a]=Math.round(i*t[a]))),o},Qc=(e,t,s,n,o)=>`
    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${s.length}> {
      var original_indices: array<${e.type.value}, ${s.length}>;
      for (var i:u32 = 0; i < ${s.length}; i++) {
        var output_index = ${e.indicesGet("output_indices","i")};
        var scale = ${Mt("uniforms.scales","i",n)};
        var roi_low = ${Mt("uniforms.roi","i",o)};
        var roi_hi = ${Mt("uniforms.roi",`i + ${t.length}`,o)};
        if (scale == 1.0) {
          original_indices[i] = ${e.type.value}(output_index);
        } else {
          var input_shape_i = ${Mt("uniforms.input_shape","i",t.length)};
          var output_shape_i = ${Mt("uniforms.output_shape","i",s.length)};
          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                           input_shape_i, roi_low, roi_hi);
        }
      }
      return original_indices;
    }`,Yc=(e,t,s,n,o,i,a)=>`
    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
      var input_indices: ${e.type.indices};
      for (var i:u32 = 0; i < ${n.length}; i++) {
        var output_index = ${t.indicesGet("output_indices","i")};
        var input_index: u32;
        var scale = ${Mt("uniforms.scales","i",o)};
        if (scale == 1.0) {
          input_index = output_index;
        } else {
          var roi_low = ${Mt("uniforms.roi","i",i)};
          var roi_hi = ${Mt("uniforms.roi",`i + ${s.length}`,i)};
          var input_shape_i = ${Mt("uniforms.input_shape","i",s.length)};
          var output_shape_i = ${Mt("uniforms.output_shape","i",n.length)};
          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                        input_shape_i, roi_low, roi_hi);
          if (!${a} || (original_idx >= 0 && original_idx < ${t.type.value}(input_shape_i))) {
            if (original_idx < 0) {
              input_index = 0;
            } else if (original_idx > ${t.type.value}(input_shape_i - 1)) {
              input_index = input_shape_i - 1;
            } else {
              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));
            }
          } else {
            input_index = u32(original_idx);
          }
        }
        ${e.indicesSet("input_indices","i"," input_index")}
      }
      return input_indices;
    }`,Jc=(e,t)=>`
    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {
      for (var i:u32 = 0; i < ${t.length}; i++) {
        var input_index = ${e.indicesGet("input_indices","i")};
        if (input_index < 0 || input_index >= ${Mt("uniforms.input_shape","i",t.length)}) {
          return false;
        }
      }
      return true;
    }`,Ud=(e,t,s,n)=>e.rank>n?`
    ${e.indicesSet("input_indices",t,"channel")};
    ${e.indicesSet("input_indices",s,"batch")};
`:"",Zc=(e,t,s,n,o)=>{let[i,a,c,p]=s.length===2?[-1,0,1,-1]:[0,2,3,1],h=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${h} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",a,`max(0, min(row, ${s[a]} - 1))`)};
      ${e.indicesSet("input_indices",c,`max(0, min(col, ${s[c]} - 1))`)};
      ${Ud(e,p,i,2)}
      return ${e.getByIndices("input_indices")};
    }

    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${h} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var row:${h} = originalIndices[${a}];
      var col:${h} = originalIndices[${c}];
      ${n?`if (row < 0 || row > (${s[a]} - 1) || col < 0 || col > (${s[c]} - 1)) {
        return ${o};
      }`:""};
      row = max(0, min(row, ${s[a]} - 1));
      col = max(0, min(col, ${s[c]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = ${s.length>2?`u32(originalIndices[${p}])`:"0"};
      var batch: u32 =  ${s.length>2?`u32(originalIndices[${i}])`:"0"};
      var x11: ${h} = getInputValue(batch, channel, row1, col1);
      var x12: ${h} = getInputValue(batch, channel, row1, col2);
      var x21: ${h} = getInputValue(batch, channel, row2, col1);
      var x22: ${h} = getInputValue(batch, channel, row2, col2);
      var dx1: ${h} = abs(row - ${h}(row1));
      var dx2: ${h} = abs(${h}(row2) - row);
      var dy1: ${h} = abs(col - ${h}(col1));
      var dy2: ${h} = abs(${h}(col2) - col);
      if (row1 == row2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (col1 == col2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},ep=(e,t,s,n,o,i,a,c,p,h)=>{let k=s.length===2,[u,S]=k?[0,1]:[2,3],R=e.type.value,N=L=>{let se=L===u?"row":"col";return`
      fn ${se}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${R} {
        var output_index = ${t.indicesGet("output_indices",L)};
        var originalIdx: ${R} = getOriginalCoordinateFromResizedCoordinate(output_index, ${o[L]},
        ${n[L]}, ${s[L]}, ${i[L]}, ${i[L]} + ${s.length});
        var fractOriginalIdx: ${R} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${c} && (originalIdx < 0 || originalIdx > (${s[L]} - 1))) {
          return ${p};
        }
        var data: array<${R}, 4> = array<${R}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${se}: ${R} = originalIdx + ${R}(i);
          if (${se} < 0 || ${se} >= ${s[L]}) {
            ${h?`coefs[i + 1] = 0.0;
                        continue;`:c?`return ${p};`:`${se} = max(0, min(${se}, ${s[L]} - 1));`};
          }
        var input_indices_copy: ${e.type.indices} = input_indices;
          ${e.indicesSet("input_indices_copy",L,`u32(${se})`)};
          data[i + 1] = ${L===u?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${N(u)};
    ${N(S)};
  fn getCubicInterpolationCoefs(s: ${R}) -> array<${R}, 4> {
    var absS = abs(s);
    var coeffs: array<${R}, 4> = array<${R}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${R} = 1.0 - absS;
    var twoMinusAbsS: ${R} = 2.0 - absS;
    var onePlusAbsS: ${R} = 1.0 + absS;
    coeffs[0] = ((${a} * onePlusAbsS - 5 * ${a}) * onePlusAbsS + 8 * ${a}) * onePlusAbsS - 4 * ${a};
    coeffs[1] = ((${a} + 2) * absS - (${a} + 3)) * absS * absS + 1;
    coeffs[2] = ((${a} + 2) * oneMinusAbsS - (${a} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${a} * twoMinusAbsS - 5 * ${a}) * twoMinusAbsS + 8 * ${a}) * twoMinusAbsS - 4 * ${a};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${R}, 4>, coefs: array<${R}, 4>) -> ${R} {
    var coefsSum: ${R} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${R} {
    var input_indices: ${e.type.indices} = output_indices;
    return colCubicInterpolation(input_indices, output_indices);
  }
    `},tp=(e,t,s,n,o)=>{let[i,a,c,p,h]=s.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],k=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${k} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",a,`max(0, min(depth, ${s[a]} - 1))`)};
      ${e.indicesSet("input_indices",c,`max(0, min(height, ${s[c]} - 1))`)};
      ${e.indicesSet("input_indices",p,`max(0, min(width, ${s[p]} - 1))`)};
      ${Ud(e,h,i,3)}
      return ${e.getByIndices("input_indices")};
    }

    fn trilinearInterpolation(output_indices: ${t.type.indices}) -> ${k} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var depth:${k} = originalIndices[${a}];
      var height:${k} = originalIndices[${c}];
      var width:${k} = originalIndices[${p}];
      ${n?`if (depth < 0 || depth > (${s[a]} - 1) || height < 0 || height > (${s[c]} - 1) || width < 0 || (width > ${s[p]} - 1)) {
      return ${o};
        }`:""};

    depth = max(0, min(depth, ${s[a]} - 1));
      height = max(0, min(height, ${s[c]} - 1));
      width = max(0, min(width, ${s[p]} - 1));
      var depth1: u32 = u32(depth);
      var height1: u32 = u32(height);
      var width1: u32 = u32(width);
      var depth2: u32 = u32(depth + 1);
      var height2: u32 = u32(height + 1);
      var width2: u32 = u32(width + 1);
      var channel: u32 = ${s.length>3?`u32(originalIndices[${h}])`:"0"};
      var batch: u32 =  ${s.length>3?`u32(originalIndices[${i}])`:"0"};

      var x111: ${k} = getInputValue(batch, channel, depth1, height1, width1);
      var x112: ${k} = getInputValue(batch, channel, depth1, height1, width2);
      var x121: ${k} = getInputValue(batch, channel, depth1, height2, width1);
      var x122: ${k} = getInputValue(batch, channel, depth1, height2, width2);
      var x211: ${k} = getInputValue(batch, channel, depth2, height1, width1);
      var x212: ${k} = getInputValue(batch, channel, depth2, height1, width2);
      var x221: ${k} = getInputValue(batch, channel, depth2, height2, width1);
      var x222: ${k} = getInputValue(batch, channel, depth2, height2, width2);
      var dx1: ${k} = abs(depth - ${k}(depth1));
      var dx2: ${k} = abs(${k}(depth2) - depth);
      var dy1: ${k} = abs(height - ${k}(height1));
      var dy2: ${k} = abs(${k}(height2) - height);
      var dz1: ${k} = abs(width - ${k}(width1));
      var dz2: ${k} = abs(${k}(width2) - width);
      if (depth1 == depth2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (height1 == height2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      if (width1 == width2) {
        dz1 = 0.5;
        dz2 = 0.5;
      }
      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +
              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);
    }`},sp=(e,t,s,n,o,i)=>{let a=e.dims,c=Hc(i,t.axes,a.length),p=qc(a,n,o,t.axes),h=n.slice();n.length===0&&(h=a.map((U,ce)=>U===0?1:p[ce]/U),t.keepAspectRatioPolicy!=="stretch"&&(p=Xc(a,h,t)));let k=ft("output",e.dataType,p.length),u=Le("input",e.dataType,a.length),S=Ce.size(p),R=a.length===p.length&&a.every((U,ce)=>U===p[ce]),N=t.coordinateTransformMode==="tf_crop_and_resize",L=t.extrapolationValue,se=u.type.value,ee=U=>`
      ${R?"":`
      ${Gc(t.coordinateTransformMode,se)};
      ${(()=>{switch(t.mode){case"nearest":return`
              ${Jc(u,a)};
              ${Kc(t.nearestMode,s,se)};
              ${Yc(u,k,a,p,h.length,c.length,N)};
              `;case"linear":return`
              ${Qc(k,a,p,h.length,c.length)};
              ${(()=>{if(a.length===2||a.length===4)return`${Zc(u,k,a,N,L)}`;if(a.length===3||a.length===5)return`${tp(u,k,a,N,L)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};
            `;case"cubic":return`
            ${(()=>{if(a.length===2||a.length===4)return`${ep(u,k,a,p,h,c,t.cubicCoeffA,N,t.extrapolationValue,t.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${U.registerUniform("output_size","u32").registerUniform("scales","f32",h.length).registerUniform("roi","f32",c.length).declareVariables(u,k)}
      ${U.mainStart()}
        ${U.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
        ${R?"output[global_idx] = input[global_idx];":`
        let output_indices = ${k.offsetToIndices("global_idx")};
        var input_indices: ${u.type.indices};
        ${(()=>{switch(t.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);
                if (checkInputIndices(input_indices)) {
                  output[global_idx] = ${u.getByIndices("input_indices")};
                } else {
                  output[global_idx] = ${t.extrapolationValue};
                }`;case"linear":return`output[global_idx] = ${a.length===2||a.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};
`}
      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${s}|${h.length>0?h:""}|${o.length>0?o:""}|${c.length>0?c:""}|${R}|${a}`,inputDependencies:["rank"]},getShaderSource:ee,getRunData:()=>({outputs:[{dims:p,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(S/64)},programUniforms:[{type:12,data:S},{type:1,data:h},{type:1,data:c},...Tt(a,p)]})}},rp=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},np=(e,t)=>{let s=[],n=[],o=[],i=rp(e);if(t.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");Vc(e.inputs,t,i,s,n,o),e.compute(sp(e.inputs[0],t,i,s,n,o),{inputs:[0]})},op=e=>{let t=e.antialias,s=e.axes,n=e.coordinateTransformMode,o=e.cubicCoeffA,i=e.excludeOutside!==0,a=e.extrapolationValue,c=e.keepAspectRatioPolicy,p=e.mode,h=e.nearestMode===""?"simple":e.nearestMode;return Ye({antialias:t,axes:s,coordinateTransformMode:n,cubicCoeffA:o,excludeOutside:i,extrapolationValue:a,keepAspectRatioPolicy:c,mode:p,nearestMode:h})}}),ip,ap,lp,Vt=y(()=>{Lt(),Nt(),It(),Ht(),ip=(e,t)=>{let[s,n,o,i]=e,{numHeads:a,rotaryEmbeddingDim:c}=t;if(s.dims.length!==3&&s.dims.length!==4)throw new Error(`Input 'x' is expected to have 3 or 4 dimensions, got ${s.dims.length}`);if(!Ce.areEqual(n.dims,[])&&!Ce.areEqual(n.dims,[1])&&n.dims.length!==2)throw new Error(`Input 'position_ids' is expected to have 0, 1, or 2 dimensions, got ${n.dims.length}`);if(o.dims.length!==2)throw new Error(`Input 'cos_cache' is expected to have 2 dimensions, got ${o.dims.length}`);if(i.dims.length!==2)throw new Error(`Input 'sin_cache' is expected to have 2 dimensions, got ${i.dims.length}`);if(!Ce.areEqual(o.dims,i.dims))throw new Error("Inputs 'cos_cache' and 'sin_cache' are expected to have the same shape");if(c>0&&a===0)throw new Error("num_heads must be provided if rotary_embedding_dim is specified");let p=s.dims[0],h=s.dims[s.dims.length-2],k=o.dims[0],u=Ce.sizeFromDimension(s.dims,1)/h,S=c===0?o.dims[1]*2:u/a;if(c>S)throw new Error("rotary_embedding_dim must be less than or equal to head_size");if(n.dims.length===2){if(p!==n.dims[0])throw new Error(`Input 'position_ids' dimension 0 should be of size batch_size, got ${n.dims[0]}`);if(h!==n.dims[1])throw new Error(`Input 'position_ids' dimension 1 should be of size sequence_length, got ${n.dims[1]}`)}if(S/2!==o.dims[1]&&c/2!==o.dims[1])throw new Error(`Input 'cos_cache' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got ${o.dims[1]}`);if(h>k)throw new Error("Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported")},ap=(e,t)=>{let{interleaved:s,numHeads:n,rotaryEmbeddingDim:o,scale:i}=t,a=e[0].dims[0],c=Ce.sizeFromDimension(e[0].dims,1),p=e[0].dims[e[0].dims.length-2],h=c/p,k=e[2].dims[1],u=o===0?k*2:h/n,S=new Array(a,p,h/u,u-k),R=Ce.computeStrides(S),N=[{type:1,data:i},{type:12,data:S},{type:12,data:R},...e[0].dims.length===3?new Array({type:12,data:[c,h,u,1]}):[],...e[0].dims.length===4?new Array({type:12,data:[c,u,p*u,1]}):[],...Tt(e[0].dims,e[1].dims,e[2].dims,e[3].dims,e[0].dims)],L=se=>{let ee=Le("input",e[0].dataType,e[0].dims.length),U=Le("position_ids",e[1].dataType,e[1].dims.length),ce=Le("cos_cache",e[2].dataType,e[2].dims.length),me=Le("sin_cache",e[3].dataType,e[3].dims.length),ye=ft("output",e[0].dataType,e[0].dims.length);return se.registerUniforms([{name:"scale",type:"f32"},{name:"global_shape",type:"u32",length:S.length},{name:"global_strides",type:"u32",length:R.length},{name:"input_output_strides",type:"u32",length:R.length}]),`
        ${se.declareVariables(ee,U,ce,me,ye)}

        ${se.mainStart(Ls)}
          let half_rotary_emb_dim = uniforms.${ce.name}_shape[1];
          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;
          let size = uniforms.global_shape[0] * uniforms.global_strides[0];
          ${se.guardAgainstOutOfBoundsWorkgroupSizes("size")}

          if (bsnh[3] < half_rotary_emb_dim) {
            let position_ids_idx =
                ${U.broadcastedIndicesToOffset("bsnh.xy",ft("",U.type.tensor,2))};
            let position_id =
                u32(${U.getByOffset("position_ids_idx")}) + select(0, bsnh[1], position_ids_idx == 0);
            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], ${s});
            let j = i + select(half_rotary_emb_dim, 1, ${s});
            let re = ${ee.getByOffset("i")} * ${ce.get("position_id","bsnh[3]")} -
                ${ee.getByOffset("j")} * ${me.get("position_id","bsnh[3]")};
            ${ye.setByOffset("i","re")}
            let im = ${ee.getByOffset("i")} * ${me.get("position_id","bsnh[3]")} +
                ${ee.getByOffset("j")} * ${ce.get("position_id","bsnh[3]")};
            ${ye.setByOffset("j","im")}
          } else {
            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;
            ${ye.setByOffset("k",ee.getByOffset("k"))}
          }
        }`};return{name:"RotaryEmbedding",shaderCache:{hint:Ye({interleaved:s}).cacheKey,inputDependencies:["rank","rank","rank","rank"]},getShaderSource:L,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(Ce.size(S)/Ls)},programUniforms:N})}},lp=(e,t)=>{ip(e.inputs,t),e.compute(ap(e.inputs,t))}}),Vd,zs,js,Xs=y(()=>{Lt(),Nt(),Ht(),Vd=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],s=e[1],n=e[2];if(t.dataType!==s.dataType||t.dataType!==n.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(s.dims.length!==3&&s.dims.length!==2)throw new Error("Skip must be 2D or 3D");let o=t.dims[t.dims.length-1],i=t.dims[t.dims.length-2];if(s.dims[s.dims.length-1]!==o)throw new Error("Skip must have the same hidden size as input");if(s.dims[s.dims.length-2]!==i)throw new Error("Skip must have the same sequence length as input");if(n.dims.length!==1)throw new Error("Gamma must be 1D");if(n.dims[n.dims.length-1]!==o)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let a=e[3];if(a.dims.length!==1)throw new Error("Beta must be 1D");if(a.dims[a.dims.length-1]!==o)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let a=e[4];if(a.dims.length!==1)throw new Error("Bias must be 1D");if(a.dims[a.dims.length-1]!==o)throw new Error("Bias must have the same hidden size as input")}},zs=(e,t,s,n)=>{let o=t.simplified,i=e[0].dims,a=Ce.size(i),c=i,p=a,h=i.slice(-1)[0],k=n?i.slice(0,-1).concat(1):[],u=!o&&e.length>3,S=e.length>4,R=n&&s>1,N=n&&s>2,L=s>3,se=64,ee=cs(h),U=[{type:12,data:p},{type:12,data:ee},{type:12,data:h},{type:1,data:t.epsilon}],ce=ye=>{let ze=[{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}],Ee=[Le("x",e[0].dataType,e[0].dims,ee),Le("skip",e[1].dataType,e[1].dims,ee),Le("gamma",e[2].dataType,e[2].dims,ee)];u&&Ee.push(Le("beta",e[3].dataType,e[3].dims,ee)),S&&Ee.push(Le("bias",e[4].dataType,e[4].dims,ee)),Ee.push(ft("output",e[0].dataType,c,ee)),R&&Ee.push(ft("mean_output",1,k)),N&&Ee.push(ft("inv_std_output",1,k)),L&&Ee.push(ft("input_skip_bias_sum",e[0].dataType,c,ee));let tt=Zt(e[0].dataType),mt=Zt(1,ee);return`

      ${ye.registerUniforms(ze).declareVariables(...Ee)}
      var<workgroup> sum_shared : array<${mt}, ${se}>;
      var<workgroup> sum_squared_shared : array<${mt}, ${se}>;

      ${ye.mainStart([se,1,1])}
        let ix = local_id.x;
        let iy = global_id.x / ${se};

        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;
        var stride = hidden_size_vectorized / ${se};
        let offset = ix * stride + iy * hidden_size_vectorized;
        let offset1d = stride * ix;
        if (ix == ${se-1}) {
          stride = hidden_size_vectorized - stride * ix;
        }
        for (var i: u32 = 0; i < stride; i++) {
          let skip_value = skip[offset + i];
          let bias_value = ${S?"bias[offset1d + i]":tt+"(0.0)"};
          let input_value = x[offset + i];
          let value = input_value + skip_value + bias_value;
          ${L?"input_skip_bias_sum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32_value = ${Is(tt,ee,"value")};
          sum_shared[ix] += f32_value;
          sum_squared_shared[ix] += f32_value * f32_value;
        }
        workgroupBarrier();

        var reduce_size : u32 = ${se};
        for (var curr_size = reduce_size >> 1;  curr_size > 0; curr_size = reduce_size >> 1) {
          reduce_size = curr_size + (reduce_size & 1);
          if (ix < curr_size) {
            sum_shared[ix] += sum_shared[ix + reduce_size];
            sum_squared_shared[ix] += sum_squared_shared[ix + reduce_size];
          }
          workgroupBarrier();
        }

        let sum = sum_shared[0];
        let square_sum = sum_squared_shared[0];
        let mean = ${Gs("sum",ee)} / f32(uniforms.hidden_size);
        let inv_std_dev = inverseSqrt(${Gs("square_sum",ee)} / f32(uniforms.hidden_size) ${o?"":"- mean * mean"} + uniforms.epsilon);
        ${R?"mean_output[global_idx] = mean;":""}
        ${N?"inv_std_output[global_idx] = inv_std_dev;":""}

        for (var i: u32 = 0; i < stride; i++) {
          output[offset + i] = (output[offset + i] ${o?"":`- ${tt}(mean)`}) *
            ${tt}(inv_std_dev) * gamma[offset1d + i]
            ${u?"+ beta[offset1d + i]":""};
        }
      }`},me=[{dims:c,dataType:e[0].dataType}];return s>1&&me.push({dims:k,dataType:1}),s>2&&me.push({dims:k,dataType:1}),s>3&&me.push({dims:i,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${ee};${R};${N};${L}`,inputDependencies:e.map((ye,ze)=>"type")},getShaderSource:ce,getRunData:()=>({outputs:me,dispatchGroup:{x:Math.ceil(p/h)},programUniforms:U})}},js=(e,t)=>{Vd(e.inputs);let s=[0];e.outputCount>1&&s.push(-3),e.outputCount>2&&s.push(-3),e.outputCount>3&&s.push(3),e.compute(zs(e.inputs,t,e.outputCount,!1),{outputs:s})}}),tn,Co,Gd,sa,f,_,H,Te,ke=y(()=>{Lt(),Nt(),It(),Ht(),tn=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((s,n)=>{if(e[n+1].dataType!==6&&e[n+1].dataType!==7)throw new Error(`Input ${n} must be an array of int32 or int64`)})},Co=(e,t)=>{let s=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(n=>s.push(Number(n)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(n=>s.push(Number(n)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return s},Gd=(e,t)=>{if(e.length>1){let s=Co(e,1),n=Co(e,2),o=Co(e,3);return o.length===0&&(o=[...Array(e[0].dims.length).keys()]),Ye({starts:s,ends:n,axes:o})}else return t},sa=(e,t,s,n,o)=>{let i=e;return e<0&&(i+=s[n[t]]),o[t]<0?Math.max(0,Math.min(i,s[n[t]]-1)):Math.max(0,Math.min(i,s[n[t]]))},f=(e,t,s)=>`fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
          var input_indices: ${e.type.indices};
          var carry = 0u;
          for (var i = ${s.length}; i >= 0; i--) {
            let input_shape_i = ${Mt("uniforms.input_shape","i",s.length)};
            let steps_i = ${Mt("uniforms.steps","i",s.length)};
            let signs_i = ${Mt("uniforms.signs","i",s.length)};
            let starts_i = ${Mt("uniforms.starts","i",s.length)};
            var output_index = ${t.indicesGet("output_indices","i")};
            var input_index = output_index * steps_i + starts_i + carry;
            carry = input_index / input_shape_i;
            input_index = input_index % input_shape_i;
            if (signs_i < 0) {
              input_index = input_shape_i - input_index - 1u + starts_i;
            }
            ${e.indicesSet("input_indices","i","input_index")};
          }
          return input_indices;
      }`,_=(e,t)=>{let s=e[0].dims,n=Ce.size(s),o=t.axes.length>0?Ce.normalizeAxes(t.axes,s.length):[...Array(s.length).keys()],i=Co(e,4);i.forEach(ee=>ee!==0||(()=>{throw new Error("step cannot be 0")})),i.length===0&&(i=Array(o.length).fill(1));let a=t.starts.map((ee,U)=>sa(ee,U,s,o,i)),c=t.ends.map((ee,U)=>sa(ee,U,s,o,i));if(o.length!==a.length||o.length!==c.length)throw new Error("start, ends and axes should have the same number of elements");if(o.length!==s.length)for(let ee=0;ee<s.length;++ee)o.includes(ee)||(a.splice(ee,0,0),c.splice(ee,0,s[ee]),i.splice(ee,0,1));let p=i.map(ee=>Math.sign(ee));i.forEach((ee,U,ce)=>{if(ee<0){let me=(c[U]-a[U])/ee,ye=a[U],ze=ye+me*i[U];a[U]=ze,c[U]=ye,ce[U]=-ee}});let h=s.slice(0);o.forEach((ee,U)=>{h[ee]=Math.ceil((c[ee]-a[ee])/i[ee])});let k={dims:h,dataType:e[0].dataType},u=ft("output",e[0].dataType,h.length),S=Le("input",e[0].dataType,e[0].dims.length),R=Ce.size(h),N=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:a.length},{name:"signs",type:"i32",length:p.length},{name:"steps",type:"u32",length:i.length}],L=[{type:12,data:R},{type:12,data:a},{type:6,data:p},{type:12,data:i},...Tt(e[0].dims,h)],se=ee=>`
      ${ee.registerUniforms(N).declareVariables(S,u)}
        ${f(S,u,s)}
        ${ee.mainStart()}
          ${ee.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let output_indices = ${u.offsetToIndices("global_idx")};
          let input_indices = calculateInputIndices(output_indices);
          ${u.setByOffset("global_idx",S.getByIndices("input_indices"))}
      }`;return{name:"Slice",shaderCache:{hint:`${p.length}_${a.length}_${i.length}`,inputDependencies:["rank"]},getShaderSource:se,getRunData:()=>({outputs:[k],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:L})}},H=(e,t)=>{tn(e.inputs,t);let s=Gd(e.inputs,t);e.compute(_(e.inputs,s),{inputs:[0]})},Te=e=>{let t=e.starts,s=e.ends,n=e.axes;return Ye({starts:t,ends:s,axes:n})}}),Oe,st,rt,ht,kt=y(()=>{Lt(),Nt(),It(),Br(),Ht(),Oe=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},st=(e,t)=>{let s=e.inputs[0],n=s.dims,o=Ce.size(n),i=n.length,a=Ce.normalizeAxis(t.axis,i),c=a<n.length-1,p,h=[];c?(h=Array.from({length:i},(Ee,tt)=>tt),h[a]=i-1,h[i-1]=a,p=e.compute(er(s,h),{inputs:[s],outputs:[-1]})[0]):p=s;let k=p.dims,u=k[i-1],S=o/u,R=cs(u),N=u/R,L=64;S===1&&(L=256);let se=(Ee,tt)=>tt===4?`max(max(${Ee}.x, ${Ee}.y), max(${Ee}.z, ${Ee}.w))`:tt===2?`max(${Ee}.x, ${Ee}.y)`:tt===3?`max(max(${Ee}.x, ${Ee}.y), ${Ee}.z)`:Ee,ee=Le("x",p.dataType,p.dims,R),U=ft("result",p.dataType,p.dims,R),ce=ee.type.value,me=Zt(p.dataType)==="f32"?`var threadMax = ${ce}(-3.402823e+38f);`:`var threadMax = ${ce}(-65504.0h);`,ye=Ee=>`
      var<workgroup> rowMaxShared : ${ce};
      var<workgroup> rowSumShared : ${ce};
      var<workgroup> threadShared : array<${ce}, ${L}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${ce} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${ce}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${Ee.registerUniform("packedCols","i32").declareVariables(ee,U)}
      ${Ee.mainStart(L)}
        let gindex = i32(global_idx);
        let lindex = i32(local_idx);
        const wg = ${L};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${me}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${ce}(${se("threadShared[0]",R)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${ce}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${ce}(${Gs("threadShared[0]",R)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`,ze=e.compute({name:"Softmax",shaderCache:{hint:`${R};${L}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:k,dataType:p.dataType}],dispatchGroup:{x:S},programUniforms:[{type:6,data:N}]}),getShaderSource:ye},{inputs:[p],outputs:[c?-1:0]})[0];c&&e.compute(er(ze,h),{inputs:[ze]})},rt=(e,t)=>{Oe(e.inputs),st(e,t)},ht=e=>Ye({axis:e.axis})}),Qt,Wt,Dt,At,bs,Gt=y(()=>{Lt(),Nt(),Ht(),Qt=e=>Array.from(e.getBigInt64Array(),Number),Wt=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==10&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, float16, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(Qt(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},Dt=(e,t)=>{let s=[];for(let n=0;n<e.length;++n)s.push(e[n]*t[n]);return s},At=(e,t)=>{let s=e[0].dims,n=t??Qt(e[1]),o=Dt(s,n),i=Ce.size(o),a=e[0].dataType,c=Le("input",a,s.length),p=ft("output",a,o.length),h=k=>`
      const inputShape = ${c.indices(...s)};
      ${k.registerUniform("output_size","u32").declareVariables(c,p)}
      ${k.mainStart()}
      ${k.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let output_indices = ${p.offsetToIndices("global_idx")};
      var input_indices: ${c.type.indices};
      for (var i = 0; i < ${s.length}; i++) {
        let input_dim_i = ${c.indicesGet("uniforms.input_shape","i")};
        let input_dim_value = ${p.indicesGet("output_indices","i")}  % input_dim_i;

        ${c.indicesSet("input_indices","i","input_dim_value")}
      }
      ${p.setByOffset("global_idx",c.getByIndices("input_indices"))}
    }`;return{name:"Tile",shaderCache:{hint:`${n}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:[{type:12,data:i},...Tt(e[0].dims,o)]}),getShaderSource:h}},bs=e=>{Wt(e.inputs),e.compute(At(e.inputs),{inputs:[0]})}}),Ut,ps,Ms,es=y(()=>{Lt(),Nt(),Ht(),Ut=(e,t,s,n,o)=>{let i=ft("output_data",o,s.length,4),a=Le("a_data",t[1].dataType,t[1].dims.length,4),c=Le("b_data",t[2].dataType,t[2].dims.length,4),p=Le("c_data",t[0].dataType,t[0].dims.length,4),h,k=(u,S,R)=>`select(${S}, ${u}, ${R})`;if(!n)h=i.setByOffset("global_idx",k(a.getByOffset("global_idx"),c.getByOffset("global_idx"),p.getByOffset("global_idx")));else{let u=(S,R,N="")=>{let L=`a_data[index_a${R}][component_a${R}]`,se=`b_data[index_b${R}][component_b${R}]`,ee=`bool(c_data[index_c${R}] & (0xffu << (component_c${R} * 8)))`;return`
            let output_indices${R} = ${i.offsetToIndices(`global_idx * 4u + ${R}u`)};
            let offset_a${R} = ${a.broadcastedIndicesToOffset(`output_indices${R}`,i)};
            let offset_b${R} = ${c.broadcastedIndicesToOffset(`output_indices${R}`,i)};
            let offset_c${R} = ${p.broadcastedIndicesToOffset(`output_indices${R}`,i)};
            let index_a${R} = offset_a${R} / 4u;
            let index_b${R} = offset_b${R} / 4u;
            let index_c${R} = offset_c${R} / 4u;
            let component_a${R} = offset_a${R} % 4u;
            let component_b${R} = offset_b${R} % 4u;
            let component_c${R} = offset_c${R} % 4u;
            ${S}[${R}] = ${N}(${k(L,se,ee)});
          `};o===9?h=`
            var data = vec4<u32>(0);
            ${u("data",0,"u32")}
            ${u("data",1,"u32")}
            ${u("data",2,"u32")}
            ${u("data",3,"u32")}
            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:h=`
            ${u("output_data[global_idx]",0)}
            ${u("output_data[global_idx]",1)}
            ${u("output_data[global_idx]",2)}
            ${u("output_data[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(p,a,c,i)}
        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${h}
      }`},ps=e=>{let t=e[1].dims,s=e[2].dims,n=e[0].dims,o=e[1].dataType,i=!(Ce.areEqual(t,s)&&Ce.areEqual(s,n)),a=t,c=Ce.size(t);if(i){let h=_s.calcShape(_s.calcShape(t,s,!1),n,!1);if(!h)throw new Error("Can't perform where op on the given tensors");a=h,c=Ce.size(a)}let p=Math.ceil(c/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:h=>Ut(h,e,a,i,o),getRunData:()=>({outputs:[{dims:a,dataType:o}],dispatchGroup:{x:Math.ceil(c/64/4)},programUniforms:[{type:12,data:p},...Tt(n,t,s,a)]})}},Ms=e=>{e.compute(ps(e.inputs))}}),Fs,Bs=y(()=>{Ga(),no(),ac(),sl(),lc(),Wl(),uc(),hc(),gu(),_c(),Pu(),fc(),gc(),wc(),yc(),bc(),vc(),Sp(),Tc(),nd(),hd(),Ec(),Cc(),kc(),Sc(),Ri(),kd(),$p(),Dc(),Ap(),Ip(),Xo(),Fp(),Vt(),Xs(),ke(),kt(),dd(),Gt(),Br(),fi(),es(),Fs=new Map([["Abs",[si]],["Acos",[nl]],["Acosh",[ol]],["Add",[Ol]],["ArgMax",[Va,Jo]],["ArgMin",[Yo,Jo]],["Asin",[ri]],["Asinh",[il]],["Atan",[al]],["Atanh",[ni]],["Attention",[Qa]],["AveragePool",[Ad,$d]],["BatchNormalization",[Za]],["BiasAdd",[tl]],["BiasSplitGelu",[Al]],["Cast",[ul,ll]],["Ceil",[cl]],["Clip",[dl]],["Concat",[Kl,bi]],["Conv",[$i,go]],["ConvTranspose",[fu,hu]],["Cos",[ii]],["Cosh",[pl]],["CumSum",[yu,Ii]],["DepthToSpace",[Tu,xu]],["DequantizeLinear",[Nd,jd]],["Div",[Dl]],["Einsum",[$u,Oi]],["Elu",[hl,On]],["Equal",[Ll]],["Erf",[ai]],["Exp",[ml]],["Expand",[Fu]],["FastGelu",[zn]],["Floor",[_l]],["FusedConv",[$i,go]],["Gather",[To,zu]],["GatherElements",[xo,Gu]],["GatherBlockQuantized",[wn,Wu]],["GatherND",[Ru,Mc]],["Gelu",[li]],["Gemm",[Xu,qu]],["GlobalAveragePool",[Fd,Id]],["GlobalMaxPool",[zd,Ld]],["Greater",[Rl]],["GreaterOrEqual",[Nl]],["GridSample",[sd,rd]],["GroupQueryAttention",[pd]],["HardSigmoid",[bl,Ml]],["InstanceNormalization",[_d]],["LayerNormalization",[wd]],["LeakyRelu",[fl,On]],["Less",[yi]],["LessOrEqual",[jl]],["Log",[Cl]],["MatMul",[Md]],["MatMulNBits",[qi,Td]],["MaxPool",[Od,Dd]],["Mul",[zl]],["MultiHeadAttention",[id,od]],["Neg",[ui]],["Not",[gl]],["Pad",[Cd]],["Pow",[wi]],["QuickGelu",[Sl,On]],["Range",[zc]],["Reciprocal",[wl]],["ReduceMin",[ja]],["ReduceMean",[Go]],["ReduceMax",[Na]],["ReduceSum",[Wa]],["ReduceProd",[Ho]],["ReduceL1",[Ba]],["ReduceL2",[Ra]],["ReduceLogSum",[qo]],["ReduceLogSumExp",[Ko]],["ReduceSumSquare",[Ua]],["Relu",[yl]],["Resize",[np,op]],["RotaryEmbedding",[lp]],["ScatterND",[jc,Nc]],["Sigmoid",[di]],["Sin",[ci]],["Sinh",[vl]],["Slice",[H,Te]],["SkipLayerNormalization",[js]],["Split",[ji,Wi]],["Sqrt",[Tl]],["Softmax",[rt,ht]],["Sub",[Bl]],["Tan",[pi]],["Tanh",[xl]],["ThresholdedRelu",[El,On]],["Tile",[bs]],["Transpose",[zo,wa]],["Where",[Ms]]])}),ks,Rs=y(()=>{He(),qs(),Ht(),ks=class{constructor(e){this.backend=e,this.repo=new Map,this.attributesBound=!1}getArtifact(e){return this.repo.get(e)}setArtifact(e,t){this.repo.set(e,t)}run(e,t,s,n,o){Ve(e.programInfo.name);let i=this.backend.device,a=this.backend.getComputePassEncoder();this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2);let c=[];for(let h of t)c.push({binding:c.length,resource:{buffer:h.buffer}});for(let h of s)c.push({binding:c.length,resource:{buffer:h.buffer}});o&&c.push({binding:c.length,resource:o});let p=i.createBindGroup({layout:e.computePipeline.getBindGroupLayout(0),entries:c,label:e.programInfo.name});if(this.backend.sessionStatus==="capturing"){let h={kernelId:this.backend.currentKernelId,computePipeline:e.computePipeline,bindGroup:p,dispatchGroup:n};this.backend.capturedCommandList.get(this.backend.currentSessionId).push(h)}a.setPipeline(e.computePipeline),a.setBindGroup(0,p),a.dispatchWorkgroups(...n),this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),Be(e.programInfo.name)}dispose(){}build(e,t){Ve(e.name);let s=this.backend.device,n=[];[{feature:"shader-f16",extension:"f16"},{feature:"subgroups",extension:"subgroups"},{feature:"subgroups-f16",extension:"subgroups_f16"}].forEach(h=>{s.features.has(h.feature)&&n.push(`enable ${h.extension};`)});let o=_n(t,this.backend.device.limits),i=e.getShaderSource(o),a=`${n.join(`
`)}
${o.additionalImplementations}
${i}`,c=s.createShaderModule({code:a,label:e.name});ns("verbose",()=>`[WebGPU] ${e.name} shader code: ${a}`);let p=s.createComputePipeline({compute:{module:c,entryPoint:"main"},layout:"auto",label:e.name});return Be(e.name),{programInfo:e,computePipeline:p,uniformVariablesInfo:o.variablesInfo}}normalizeDispatchGroupSize(e){let t=typeof e=="number"?e:e.x,s=typeof e=="number"?1:e.y||1,n=typeof e=="number"?1:e.z||1,o=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(t<=o&&s<=o&&n<=o)return[t,s,n];let i=t*s*n,a=Math.ceil(Math.sqrt(i));if(a>o){if(a=Math.ceil(Math.cbrt(i)),a>o)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[a,a,a]}else return[a,a,1]}}}),Qs,ur,ra,tr,Sr,ko=y(()=>{He(),Lt(),qs(),In(),wt(),Bs(),Rs(),Qs=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let s=[];for(let n=0;n<e.length;++n){let o=e[n].dataType;switch(t[n]){case"none":{s.push("");break}case"type":{s.push(`${o}`);break}case"rank":{let i=e[n].dims.length;s.push(`${o};${i}`);break}case"dims":{let i=e[n].dims.join(",");s.push(`${o};${i}`);break}default:throw new Error(`unsupported input dependency: ${t[n]}`)}}return s.join("|")},ur=(e,t,s)=>{let n=e.name;return e.shaderCache?.hint&&(n+="["+e.shaderCache.hint+"]"),n+=":"+s+`:${Qs(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,n},ra=class{constructor(e){e&&(this.architecture=e.architecture,this.vendor=e.vendor)}isArchitecture(e){return this.architecture===e}isVendor(e){return this.vendor===e}},tr=class{constructor(e){this.subgroupsSupported=e.features.has("subgroups"),this.subgroupsF16Supported=e.features.has("subgroups");let t=e.limits;!this.subgroupsSupported||!t.minSubgroupSize||!t.maxSubgroupSize?this.subgroupSizeRange=void 0:this.subgroupSizeRange=[t.minSubgroupSize,t.maxSubgroupSize]}},Sr=class{constructor(){this.currentSessionId=null,this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.maxDispatchNumber=16,this.pendingDispatchNumber=0,this.pendingKernels=[],this.pendingQueries=new Map,this.sessionStatus="default",this.capturedCommandList=new Map,this.capturedPendingKernels=new Map,this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let e=this.kernelCustomData.get(this.currentKernelId);return e||(e={},this.kernelCustomData.set(this.currentKernelId,e)),e}async initialize(e,t){this.env=e;let s=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:t.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:t.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:t.limits.maxStorageBufferBindingSize,maxBufferSize:t.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:t.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:t.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:t.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:t.limits.maxComputeWorkgroupSizeZ},requiredFeatures:s},o=i=>t.features.has(i)&&s.push(i)&&!0;o("chromium-experimental-timestamp-query-inside-passes")||o("timestamp-query"),o("shader-f16"),o("subgroups")&&o("subgroups-f16"),this.device=await t.requestDevice(n),this.deviceInfo=new tr(this.device),this.adapterInfo=new ra(t.info||await t.requestAdapterInfo()),this.gpuDataManager=_t(this),this.programManager=new ks(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,pn(e.logLevel,!!e.debug),this.device.onuncapturederror=i=>{i.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${i.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(this.env.webgpu,"adapter",{value:t,writable:!1,enumerable:!0,configurable:!1}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let e=this.getCommandEncoder(),t={};this.queryType==="at-passes"&&(t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:this.pendingDispatchNumber*2,endOfPassWriteIndex:this.pendingDispatchNumber*2+1}),this.computePassEncoder=e.beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;Ve(),this.endComputePass();let e;this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,this.pendingDispatchNumber*2,this.queryResolveBuffer,0),e=this.device.createBuffer({size:this.pendingDispatchNumber*2*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(e,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,e,0,this.pendingDispatchNumber*2*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&e.mapAsync(GPUMapMode.READ).then(()=>{let t=new BigUint64Array(e.getMappedRange()),s=this.pendingQueries.get(e);for(let n=0;n<t.length/2;n++){let o=s[n],i=o.kernelId,a=this.kernels.get(i),c=a.kernelType,p=a.kernelName,h=o.programName,k=o.inputTensorViews,u=o.outputTensorViews,S=t[n*2],R=t[n*2+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=S);let N=Number(S-this.queryTimeBase),L=Number(R-this.queryTimeBase);if(!Number.isSafeInteger(N)||!Number.isSafeInteger(L))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:k.map(se=>({dims:se.dims,dataType:yr(se.dataType)})),outputsMetadata:u.map(se=>({dims:se.dims,dataType:yr(se.dataType)})),kernelId:i,kernelType:c,kernelName:p,programName:h,startTime:N,endTime:L});else{let se="";k.forEach((U,ce)=>{se+=`input[${ce}]: [${U.dims}] | ${yr(U.dataType)}, `});let ee="";u.forEach((U,ce)=>{ee+=`output[${ce}]: [${U.dims}] | ${yr(U.dataType)}, `}),console.log(`[profiling] kernel "${i}|${c}|${p}|${h}" ${se}${ee}execution time: ${L-N} ns`)}je("GPU",`${h}::${S}::${R}`)}e.unmap(),this.pendingQueries.delete(e)}),Be()}run(e,t,s,n,o,i){Ve(e.name);let a=[];for(let U=0;U<t.length;++U){let ce=t[U].data;if(ce===0)continue;let me=this.gpuDataManager.get(ce);if(!me)throw new Error(`no GPU data for input: ${ce}`);a.push(me)}let{outputs:c,dispatchGroup:p,programUniforms:h}=e.getRunData(t),k=s.length===0?c.map((U,ce)=>ce):s;if(k.length!==c.length)throw new Error(`Output size ${k.length} must be equal to ${c.length}.`);let u=[],S=[];for(let U=0;U<c.length;++U){if(!Number.isInteger(k[U])||k[U]<-3||k[U]>=i)throw new Error(`Invalid output index: ${k[U]}`);if(k[U]===-3)continue;let ce=k[U]===-1,me=k[U]===-2,ye=ce||me?o(c[U].dataType,c[U].dims):n(k[U],c[U].dataType,c[U].dims);if(u.push(ye),ye.data===0)continue;let ze=this.gpuDataManager.get(ye.data);if(!ze)throw new Error(`no GPU data for output: ${ye.data}`);if(ce&&this.temporaryData.push(ze),me){let Ee=this.kernelPersistentData.get(this.currentKernelId);Ee||(Ee=[],this.kernelPersistentData.set(this.currentKernelId,Ee)),Ee.push(ze)}S.push(ze)}if(a.length!==t.length||S.length!==u.length){if(S.length===0)return Be(e.name),u;throw new Error(`Program ${e.name} has zero-sized tensor(s) in inputs or outputs. This is not supported now.`)}let R;if(h){let U=0,ce=[];h.forEach(Ee=>{let tt=typeof Ee.data=="number"?[Ee.data]:Ee.data;if(tt.length===0)return;let mt=Ee.type===10?2:4,Ct,Ft;Ee.type===10?(Ft=tt.length>4?16:tt.length>2?8:tt.length*mt,Ct=tt.length>4?16:mt*tt.length):(Ft=tt.length<=2?tt.length*mt:16,Ct=16),U=Math.ceil(U/Ft)*Ft,ce.push(U);let $t=Ee.type===10?8:4;U+=tt.length>4?Math.ceil(tt.length/$t)*Ct:tt.length*mt});let me=16;U=Math.ceil(U/me)*me;let ye=new ArrayBuffer(U);h.forEach((Ee,tt)=>{let mt=ce[tt],Ct=typeof Ee.data=="number"?[Ee.data]:Ee.data;if(Ee.type===6)new Int32Array(ye,mt,Ct.length).set(Ct);else if(Ee.type===12)new Uint32Array(ye,mt,Ct.length).set(Ct);else if(Ee.type===10)new Uint16Array(ye,mt,Ct.length).set(Ct);else if(Ee.type===1)new Float32Array(ye,mt,Ct.length).set(Ct);else throw new Error(`Unsupported uniform type: ${yr(Ee.type)}`)});let ze=this.gpuDataManager.create(U,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(ze.buffer,0,ye,0,U),this.gpuDataManager.release(ze.id),R={offset:0,size:U,buffer:ze.buffer}}let N=this.programManager.normalizeDispatchGroupSize(p),L=N[1]===1&&N[2]===1,se=ur(e,t,L),ee=this.programManager.getArtifact(se);if(ee||(ee=this.programManager.build(e,N),this.programManager.setArtifact(se,ee),ns("info",()=>`[artifact] key: ${se}, programName: ${e.name}`)),h&&ee.uniformVariablesInfo){if(h.length!==ee.uniformVariablesInfo.length)throw new Error(`Uniform variables count mismatch: expect ${ee.uniformVariablesInfo.length}, got ${h.length} in program "${ee.programInfo.name}".`);for(let U=0;U<h.length;U++){let ce=h[U],me=ce.type,ye=typeof ce.data=="number"?1:ce.data.length,[ze,Ee]=ee.uniformVariablesInfo[U];if(me!==ze||ye!==Ee)throw new Error(`Uniform variable ${U} mismatch: expect type ${ze} with size ${Ee}, got type ${me} with size ${ye} in program "${ee.programInfo.name}".`)}}if(ns("info",()=>`[ProgramManager] run "${e.name}" (key=${se}) with ${N[0]}x${N[1]}x${N[2]}`),this.queryType!=="none"||this.sessionStatus==="capturing"){let U={kernelId:this.currentKernelId,programName:ee.programInfo.name,inputTensorViews:t,outputTensorViews:u};this.pendingKernels.push(U),this.sessionStatus==="capturing"&&this.capturedPendingKernels.get(this.currentSessionId).push(U)}return this.programManager.run(ee,a,S,N,R),Be(e.name),u}upload(e,t){this.gpuDataManager.upload(e,t)}memcpy(e,t){this.gpuDataManager.memcpy(e,t)}async download(e,t){await this.gpuDataManager.download(e,t)}alloc(e){return this.gpuDataManager.create(e).id}free(e){return this.gpuDataManager.release(e)}createKernel(e,t,s,n){let o=Fs.get(e);if(!o)throw new Error(`kernel not implemented: ${e}`);let i={kernelType:e,kernelName:n,kernelEntry:o[0],attributes:[o[1],s]};this.kernels.set(t,i)}releaseKernel(e){let t=this.kernelPersistentData.get(e);if(t){for(let s of t)this.gpuDataManager.release(s.id);this.kernelPersistentData.delete(e)}this.kernelCustomData.delete(e),this.kernels.delete(e)}computeKernel(e,t,s){let n=this.kernels.get(e);if(!n)throw new Error(`kernel not created: ${e}`);let o=n.kernelType,i=n.kernelName,a=n.kernelEntry,c=n.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${o}] ${i}" is not allowed to be called recursively`);this.currentKernelId=e,c[0]&&(c[1]=c[0](c[1]),c[0]=void 0),ns("info",()=>`[WebGPU] Start to run kernel "[${o}] ${i}"...`);let p=this.env.debug;this.temporaryData=[];try{return p&&this.device.pushErrorScope("validation"),a(t,c[1]),0}catch(h){return s.push(Promise.resolve(`[WebGPU] Kernel "[${o}] ${i}" failed. ${h}`)),1}finally{p&&s.push(this.device.popErrorScope().then(h=>h?`GPU validation error for kernel "[${o}] ${i}": ${h.message}`:null));for(let h of this.temporaryData)this.gpuDataManager.release(h.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(e,t,s,n){let o=this.sessionExternalDataMapping.get(e);o||(o=new Map,this.sessionExternalDataMapping.set(e,o));let i=o.get(t),a=this.gpuDataManager.registerExternalBuffer(s,n,i);return o.set(t,[a,s]),a}unregisterBuffers(e){let t=this.sessionExternalDataMapping.get(e);t&&(t.forEach(s=>this.gpuDataManager.unregisterExternalBuffer(s[0])),this.sessionExternalDataMapping.delete(e))}getBuffer(e){let t=this.gpuDataManager.get(e);if(!t)throw new Error(`no GPU data for buffer: ${e}`);return t.buffer}createDownloader(e,t,s){return async()=>{let n=await Ie(this,e,t);return hn(n.buffer,s)}}writeTimestamp(e){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,e)}setQueryType(){this.queryType="none",(this.env.webgpu.profiling?.mode==="default"||(typeof this.env.trace>"u"?this.env.wasm.trace:this.env.trace))&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxDispatchNumber*2}),this.queryResolveBuffer=this.device.createBuffer({size:this.maxDispatchNumber*2*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}captureBegin(){ns("info","captureBegin"),this.capturedCommandList.get(this.currentSessionId)||this.capturedCommandList.set(this.currentSessionId,[]),this.capturedPendingKernels.get(this.currentSessionId)||this.capturedPendingKernels.set(this.currentSessionId,[]),this.flush(),this.sessionStatus="capturing"}captureEnd(){ns("info","captureEnd"),this.flush(),this.sessionStatus="default"}replay(){ns("info","replay"),this.sessionStatus="replaying";let e=this.capturedCommandList.get(this.currentSessionId),t=this.capturedPendingKernels.get(this.currentSessionId),s=e.length;this.pendingKernels=[];for(let n=0;n<s;n++){let o=this.getComputePassEncoder(),i=e[n];this.writeTimestamp(this.pendingDispatchNumber*2),o.setPipeline(i.computePipeline),o.setBindGroup(0,i.bindGroup),o.dispatchWorkgroups(...i.dispatchGroup),this.writeTimestamp(this.pendingDispatchNumber*2+1),this.pendingDispatchNumber++,this.queryType!=="none"&&this.pendingKernels.push(t[n]),(this.pendingDispatchNumber>=this.maxDispatchNumber||this.queryType==="at-passes")&&this.endComputePass(),this.pendingDispatchNumber>=this.maxDispatchNumber&&this.flush()}this.flush(),this.sessionStatus="default"}onCreateSession(){this.gpuDataManager.onCreateSession()}onReleaseSession(e){this.unregisterBuffers(e),this.capturedCommandList.has(e)&&this.capturedCommandList.delete(e),this.capturedPendingKernels.has(e)&&this.capturedPendingKernels.delete(e),this.gpuDataManager.onReleaseSession(e)}onRunStart(e){this.currentSessionId=e,this.setQueryType()}}}),na,Rn,Nn,Kd,ys,$s,Wr,sn,jn=y(()=>{qs(),na=1,Rn=()=>na++,Nn=new Map([["float32",32],["float16",16],["int32",32],["uint32",32],["int64",64],["uint64",64],["int8",8],["uint8",8],["int4",4],["uint4",4]]),Kd=(e,t)=>{let s=Nn.get(e);if(!s)throw new Error("Unsupported data type.");return t.length>0?Math.ceil(t.reduce((n,o)=>n*o)*s/8):0},ys=class{constructor(e){this.sessionId=e.sessionId,this.mlContext=e.context,this.mlTensor=e.tensor,this.dataType=e.dataType,this.tensorShape=e.shape}get tensor(){return this.mlTensor}get type(){return this.dataType}get shape(){return this.tensorShape}get byteLength(){return Kd(this.dataType,this.tensorShape)}destroy(){ns("verbose",()=>"[WebNN] TensorWrapper.destroy"),this.mlTensor.destroy()}write(e){this.mlContext.writeTensor(this.mlTensor,e)}async read(e){return e?this.mlContext.readTensor(this.mlTensor,e):this.mlContext.readTensor(this.mlTensor)}sameTypeAndShape(e,t){return this.dataType===e&&this.tensorShape.length===t.length&&this.tensorShape.every((s,n)=>s===t[n])}},$s=class{constructor(e,t){this.tensorManager=e,this.wrapper=t}get tensorWrapper(){return this.wrapper}releaseTensor(){this.tensorWrapper&&(this.tensorManager.releaseTensor(this.tensorWrapper),this.wrapper=void 0)}async ensureTensor(e,t,s){if(this.wrapper){if(this.wrapper.sameTypeAndShape(e,t))return this.wrapper.tensor;if(s){if(this.wrapper.byteLength!==Kd(e,t))throw new Error("Unable to copy data to tensor with different size.");this.activeUpload=new Uint8Array(await this.wrapper.read())}this.tensorManager.releaseTensor(this.wrapper)}let n=typeof MLTensorUsage>"u"?void 0:MLTensorUsage.READ|MLTensorUsage.WRITE;return this.wrapper=await this.tensorManager.getCachedTensor(e,t,n,!0,!0),s&&this.activeUpload&&(this.wrapper.write(this.activeUpload),this.activeUpload=void 0),this.wrapper.tensor}upload(e){if(this.wrapper)if(e.byteLength===this.wrapper.byteLength){this.wrapper.write(e);return}else ns("verbose",()=>"Data size does not match tensor size. Releasing tensor."),this.releaseTensor();this.activeUpload?this.activeUpload.set(e):this.activeUpload=new Uint8Array(e)}async download(e){if(this.activeUpload)if(e){e instanceof ArrayBuffer?new Uint8Array(e).set(this.activeUpload):new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(this.activeUpload);return}else return this.activeUpload.buffer;if(!this.wrapper)throw new Error("Tensor has not been created.");return e?this.wrapper.read(e):this.wrapper.read()}},Wr=class{constructor(e){this.backend=e,this.tensorTrackersById=new Map,this.freeTensors=[],this.externalTensors=new Set}reserveTensorId(){let e=Rn();return this.tensorTrackersById.set(e,new $s(this)),e}releaseTensorId(e){let t=this.tensorTrackersById.get(e);t&&(this.tensorTrackersById.delete(e),t.tensorWrapper&&this.releaseTensor(t.tensorWrapper))}async ensureTensor(e,t,s,n){ns("verbose",()=>`[WebNN] TensorManager.ensureTensor {tensorId: ${e}, dataType: ${t}, shape: ${s}, copyOld: ${n}}`);let o=this.tensorTrackersById.get(e);if(!o)throw new Error("Tensor not found.");return o.ensureTensor(t,s,n)}upload(e,t){let s=this.tensorTrackersById.get(e);if(!s)throw new Error("Tensor not found.");s.upload(t)}async download(e,t){ns("verbose",()=>`[WebNN] TensorManager.download {tensorId: ${e}, dstBuffer: ${t?.byteLength}}`);let s=this.tensorTrackersById.get(e);if(!s)throw new Error("Tensor not found.");return s.download(t)}releaseTensorsForSession(e){for(let t of this.freeTensors)t.sessionId===e&&t.destroy();this.freeTensors=this.freeTensors.filter(t=>t.sessionId!==e)}registerTensor(e,t,s,n){let o=Rn(),i=new ys({sessionId:this.backend.currentSessionId,context:e,tensor:t,dataType:s,shape:n});return this.tensorTrackersById.set(o,new $s(this,i)),this.externalTensors.add(i),o}async getCachedTensor(e,t,s,n,o){let i=this.backend.currentSessionId;for(let[p,h]of this.freeTensors.entries())if(h.sameTypeAndShape(e,t)){ns("verbose",()=>`[WebNN] Reusing tensor {dataType: ${e}, shape: ${t}}`);let k=this.freeTensors.splice(p,1)[0];return k.sessionId=i,k}let a=this.backend.currentContext;ns("verbose",()=>`[WebNN] MLContext.createTensor {dataType: ${e}, shape: ${t}}`);let c=await a.createTensor({dataType:e,shape:t,dimensions:t,usage:s,writable:n,readable:o});return new ys({sessionId:i,context:a,tensor:c,dataType:e,shape:t})}releaseTensor(e){this.externalTensors.has(e)&&this.externalTensors.delete(e),this.freeTensors.push(e)}},sn=(...e)=>new Wr(...e)}),Wn,oa,ia,Hd=y(()=>{Lt(),St(),In(),jn(),qs(),Wn=new Map([[1,"float32"],[10,"float16"],[6,"int32"],[12,"uint32"],[7,"int64"],[13,"uint64"],[22,"int4"],[21,"uint4"],[3,"int8"],[2,"uint8"],[9,"uint8"]]),oa=(e,t)=>{if(e===t)return!0;if(e===void 0||t===void 0)return!1;let s=Object.keys(e).sort(),n=Object.keys(t).sort();return s.length===n.length&&s.every((o,i)=>o===n[i]&&e[o]===t[o])},ia=class{constructor(e){this.tensorManager=sn(this),this.mlContextBySessionId=new Map,this.sessionIdsByMLContext=new Map,this.mlContextCache=[],pn(e.logLevel,!!e.debug)}get currentSessionId(){if(this.activeSessionId===void 0)throw new Error("No active session");return this.activeSessionId}onRunStart(e){this.activeSessionId=e}async createMLContext(e){if(e instanceof GPUDevice){let s=this.mlContextCache.findIndex(n=>n.gpuDevice===e);if(s!==-1)return this.mlContextCache[s].mlContext;{let n=await navigator.ml.createContext(e);return this.mlContextCache.push({gpuDevice:e,mlContext:n}),n}}else if(e===void 0){let s=this.mlContextCache.findIndex(n=>n.options===void 0&&n.gpuDevice===void 0);if(s!==-1)return this.mlContextCache[s].mlContext;{let n=await navigator.ml.createContext();return this.mlContextCache.push({mlContext:n}),n}}let t=this.mlContextCache.findIndex(s=>oa(s.options,e));if(t!==-1)return this.mlContextCache[t].mlContext;{let s=await navigator.ml.createContext(e);return this.mlContextCache.push({options:e,mlContext:s}),s}}get currentContext(){let e=this.getMLContext(this.currentSessionId);if(!e)throw new Error(`No MLContext found for session ${this.currentSessionId}`);return e}registerMLContext(e,t){this.mlContextBySessionId.set(e,t);let s=this.sessionIdsByMLContext.get(t);s||(s=new Set,this.sessionIdsByMLContext.set(t,s)),s.add(e)}onReleaseSession(e){let t=this.mlContextBySessionId.get(e);if(!t)return;this.tensorManager.releaseTensorsForSession(e),this.mlContextBySessionId.delete(e);let s=this.sessionIdsByMLContext.get(t);if(s.delete(e),s.size===0){this.sessionIdsByMLContext.delete(t);let n=this.mlContextCache.findIndex(o=>o.mlContext===t);n!==-1&&this.mlContextCache.splice(n,1)}}getMLContext(e){return this.mlContextBySessionId.get(e)}reserveTensorId(){return this.tensorManager.reserveTensorId()}releaseTensorId(e){ns("verbose",()=>`[WebNN] releaseTensorId {tensorId: ${e}}`),this.tensorManager.releaseTensorId(e)}async ensureTensor(e,t,s,n){let o=Wn.get(t);if(!o)throw new Error(`Unsupported ONNX data type: ${t}`);return this.tensorManager.ensureTensor(e,o,s,n)}uploadTensor(e,t){if(!pt().shouldTransferToMLTensor)throw new Error("Trying to upload to a MLTensor while shouldTransferToMLTensor is false");ns("verbose",()=>`[WebNN] uploadTensor {tensorId: ${e}, data: ${t.byteLength}}`),this.tensorManager.upload(e,t)}async downloadTensor(e,t){return this.tensorManager.download(e,t)}createMLTensorDownloader(e,t){return async()=>{let s=await this.tensorManager.download(e);return hn(s,t)}}registerMLTensor(e,t,s){let n=Wn.get(t);if(!n)throw new Error(`Unsupported ONNX data type: ${t}`);let o=this.tensorManager.registerTensor(this.currentContext,e,n,s);return ns("verbose",()=>`[WebNN] registerMLTensor {tensor: ${e}, dataType: ${n}, dimensions: ${s}} -> {tensorId: ${o}}`),o}registerMLConstant(e,t,s,n,o,i){if(!i)throw new Error("External mounted files are not available.");let a=e;e.startsWith("./")&&(a=e.substring(2));let c=i.get(a);if(!c)throw new Error(`File with name ${a} not found in preloaded files.`);if(t+s>c.byteLength)throw new Error("Out of bounds: data offset and length exceed the external file data size.");let p=c.slice(t,t+s).buffer,h;switch(o.dataType){case"float32":h=new Float32Array(p);break;case"float16":h=new Uint16Array(p);break;case"int32":h=new Int32Array(p);break;case"uint32":h=new Uint32Array(p);break;case"int64":h=new BigInt64Array(p);break;case"uint64":h=new BigUint64Array(p);break;case"int8":h=new Int8Array(p);break;case"int4":case"uint4":case"uint8":h=new Uint8Array(p);break;default:throw new Error(`Unsupported data type: ${o.dataType} in creating WebNN Constant from external data.`)}return ns("verbose",()=>`[WebNN] registerMLConstant {dataType: ${o.dataType}, shape: ${o.shape}}}`),n.constant(o,h)}flush(){}}}),up={};P(up,{init:()=>aa});var Un,So,aa,dp=y(()=>{Lt(),ko(),qs(),Nt(),Hd(),Un=class Qm{constructor(t,s,n,o){this.module=t,this.dataType=s,this.data=n,this.dims=o}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=Ce.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=Ce.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=Ce.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}getUint16Array(){if(this.dataType!==10&&this.dataType!==4)throw new Error("Invalid data type");let t=Ce.size(this.dims);return t===0?new Uint16Array:new Uint16Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(Ce.size(t)!==Ce.size(this.dims))throw new Error("Invalid new shape");return new Qm(this.module,this.dataType,this.data,t)}},So=class{constructor(e,t,s){this.module=e,this.backend=t,this.customDataOffset=0,this.customDataSize=0,this.adapterInfo=t.adapterInfo,this.deviceInfo=t.deviceInfo;let n=e.PTR_SIZE,o=s/e.PTR_SIZE,i=n===4?"i32":"i64";this.opKernelContext=Number(e.getValue(n*o++,i));let a=Number(e.getValue(n*o++,i));this.outputCount=Number(e.getValue(n*o++,i)),this.customDataOffset=Number(e.getValue(n*o++,"*")),this.customDataSize=Number(e.getValue(n*o++,i));let c=[];for(let p=0;p<a;p++){let h=Number(e.getValue(n*o++,i)),k=Number(e.getValue(n*o++,"*")),u=Number(e.getValue(n*o++,i)),S=[];for(let R=0;R<u;R++)S.push(Number(e.getValue(n*o++,i)));c.push(new Un(e,h,k,S))}this.inputs=c}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(e,t){let s=t?.inputs?.map(a=>typeof a=="number"?this.inputs[a]:a)??this.inputs,n=t?.outputs??[],o=(a,c,p)=>new Un(this.module,c,this.output(a,p),p),i=(a,c)=>{let p=or(a,c);if(!p)throw new Error(`Unsupported data type: ${a}`);let h=p>0?this.backend.gpuDataManager.create(p).id:0;return new Un(this.module,a,h,c)};return this.backend.run(e,s,n,o,i,this.outputCount)}output(e,t){let s=this.module.stackSave();try{let n=this.module.PTR_SIZE,o=n===4?"i32":"i64",i=this.module.stackAlloc((1+t.length)*n);this.module.setValue(i,t.length,o);for(let a=0;a<t.length;a++)this.module.setValue(i+n*(a+1),t[a],o);return this.module._JsepOutput(this.opKernelContext,e,i)}catch(n){throw new Error(`Failed to generate kernel's output[${e}] with dims [${t}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(s)}}},aa=async(e,t,s,n)=>{let o=t.jsepInit;if(!o)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");if(e==="webgpu"){let i=new Sr;await i.initialize(s,n),o("webgpu",[i,a=>i.alloc(Number(a)),a=>i.free(a),(a,c,p,h=!1)=>{if(h)ns("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${Number(a)}, dst=${Number(c)}, size=${Number(p)}`),i.memcpy(Number(a),Number(c));else{ns("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${Number(a)}, gpuDataId=${Number(c)}, size=${Number(p)}`);let k=t.HEAPU8.subarray(Number(a>>>0),Number(a>>>0)+Number(p));i.upload(Number(c),k)}},async(a,c,p)=>{ns("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${a}, dataOffset=${c}, size=${p}`),await i.download(Number(a),()=>t.HEAPU8.subarray(Number(c)>>>0,Number(c+p)>>>0))},(a,c,p)=>i.createKernel(a,Number(c),p,t.UTF8ToString(t._JsepGetNodeName(Number(c)))),a=>i.releaseKernel(a),(a,c,p,h)=>{ns("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${p}, kernel=${a}, contextDataOffset=${c}`);let k=new So(t,i,Number(c));return i.computeKernel(Number(a),k,h)},()=>i.captureBegin(),()=>i.captureEnd(),()=>i.replay()])}else{let i=new ia(s);o("webnn",[i,()=>i.reserveTensorId(),a=>i.releaseTensorId(a),async(a,c,p,h)=>i.ensureTensor(a,c,p,h),(a,c)=>{i.uploadTensor(a,c)},async(a,c)=>i.downloadTensor(a,c)])}}}),la,Vn,qd,rn,cp,$r,dr,Op,Dp,Lp,zp,Bp,ph=y(()=>{Yn(),Jn(),Lt(),St(),pr(),Cn(),la=(e,t)=>{pt()._OrtInit(e,t)!==0&&rs("Can't initialize onnxruntime.")},Vn=async e=>{la(e.wasm.numThreads,qr(e.logLevel))},qd=async(e,t)=>{{let s=(dp(),T(up)).init;if(t==="webgpu"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let n=e.webgpu.adapter;if(n){if(typeof n.limits!="object"||typeof n.features!="object"||typeof n.requestDevice!="function")throw new Error("Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.")}else{let o=e.webgpu.powerPreference;if(o!==void 0&&o!=="low-power"&&o!=="high-performance")throw new Error(`Invalid powerPreference setting: "${o}"`);let i=e.webgpu.forceFallbackAdapter;if(i!==void 0&&typeof i!="boolean")throw new Error(`Invalid forceFallbackAdapter setting: "${i}"`);if(n=await navigator.gpu.requestAdapter({powerPreference:o,forceFallbackAdapter:i}),!n)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.')}await s("webgpu",pt(),e,n)}if(t==="webnn"){if(typeof navigator>"u"||!navigator.ml)throw new Error("WebNN is not supported in current environment");await s("webnn",pt(),e)}}},rn=new Map,cp=e=>{let t=pt(),s=t.stackSave();try{let n=t.PTR_SIZE,o=t.stackAlloc(2*n);t._OrtGetInputOutputCount(e,o,o+n)!==0&&rs("Can't get session input/output count.");let i=n===4?"i32":"i64";return[Number(t.getValue(o,i)),Number(t.getValue(o+n,i))]}finally{t.stackRestore(s)}},$r=e=>{let t=pt(),s=t._malloc(e.byteLength);if(s===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,s),[s,e.byteLength]},dr=async(e,t)=>{let s,n,o=pt();Array.isArray(e)?[s,n]=e:e.buffer===o.HEAPU8.buffer?[s,n]=[e.byteOffset,e.byteLength]:[s,n]=$r(e);let i=0,a=0,c=0,p=[],h=[],k=[];try{if([a,p]=En(t),t?.externalData&&o.mountExternalData){let U=[];for(let ce of t.externalData){let me=typeof ce=="string"?ce:ce.path;U.push(cn(typeof ce=="string"?ce:ce.data).then(ye=>{o.mountExternalData(me,ye)}))}await Promise.all(U)}for(let U of t?.executionProviders??[])if((typeof U=="string"?U:U.name)==="webnn"){if(o.shouldTransferToMLTensor=!1,typeof U!="string"){let ce=U,me=ce?.context,ye=ce?.gpuDevice,ze=ce?.deviceType,Ee=ce?.powerPreference;me?o.currentContext=me:ye?o.currentContext=await o.jsepCreateMLContext(ye):o.currentContext=await o.jsepCreateMLContext({deviceType:ze,powerPreference:Ee})}else o.currentContext=await o.jsepCreateMLContext();break}i=await o._OrtCreateSession(s,n,a),i===0&&rs("Can't create a session."),o.jsepOnCreateSession?.(),o.currentContext&&(o.jsepRegisterMLContext(i,o.currentContext),o.currentContext=void 0,o.shouldTransferToMLTensor=!0);let[u,S]=cp(i),R=!!t?.enableGraphCapture,N=[],L=[],se=[];for(let U=0;U<u;U++){let ce=o._OrtGetInputName(i,U);ce===0&&rs("Can't get an input name."),h.push(ce),N.push(o.UTF8ToString(ce))}for(let U=0;U<S;U++){let ce=o._OrtGetOutputName(i,U);ce===0&&rs("Can't get an output name."),k.push(ce);let me=o.UTF8ToString(ce);L.push(me);{if(R&&t?.preferredOutputLocation===void 0){se.push("gpu-buffer");continue}let ye=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[me]??"cpu";if(ye!=="cpu"&&ye!=="cpu-pinned"&&ye!=="gpu-buffer"&&ye!=="ml-tensor")throw new Error(`Not supported preferred output location: ${ye}.`);if(R&&ye!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${ye}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);se.push(ye)}}let ee=null;return se.some(U=>U==="gpu-buffer"||U==="ml-tensor")&&(c=o._OrtCreateBinding(i),c===0&&rs("Can't create IO binding."),ee={handle:c,outputPreferredLocations:se,outputPreferredLocationsEncoded:se.map(U=>Mr(U))}),rn.set(i,[i,h,k,ee,R,!1]),[i,N,L]}catch(u){throw h.forEach(S=>o._OrtFree(S)),k.forEach(S=>o._OrtFree(S)),c!==0&&o._OrtReleaseBinding(c)!==0&&rs("Can't release IO binding."),i!==0&&o._OrtReleaseSession(i)!==0&&rs("Can't release session."),u}finally{o._free(s),a!==0&&o._OrtReleaseSessionOptions(a)!==0&&rs("Can't release session options."),p.forEach(u=>o._free(u)),o.unmountExternalData?.()}},Op=e=>{let t=pt(),s=rn.get(e);if(!s)throw new Error(`cannot release session. invalid session id: ${e}`);let[n,o,i,a,c]=s;a&&(c&&t._OrtClearBoundOutputs(a.handle)!==0&&rs("Can't clear bound outputs."),t._OrtReleaseBinding(a.handle)!==0&&rs("Can't release IO binding.")),t.jsepOnReleaseSession?.(e),o.forEach(p=>t._OrtFree(p)),i.forEach(p=>t._OrtFree(p)),t._OrtReleaseSession(n)!==0&&rs("Can't release session."),rn.delete(e)},Dp=(e,t,s,n,o,i=!1)=>{if(!e){t.push(0);return}let a=pt(),c=a.PTR_SIZE,p=e[0],h=e[1],k=e[3],u,S;if(p==="string"&&(k==="gpu-buffer"||k==="ml-tensor"))throw new Error("String tensor is not supported on GPU.");if(i&&k!=="gpu-buffer")throw new Error(`External buffer must be provided for input/output index ${o} when enableGraphCapture is true.`);if(k==="gpu-buffer"){let L=e[2].gpuBuffer;S=or(Lr(p),h);let se=a.jsepRegisterBuffer;if(!se)throw new Error('Tensor location "gpu-buffer" is not supported without using WebGPU.');u=se(n,o,L,S)}else if(k==="ml-tensor"){let L=e[2].mlTensor;S=or(Lr(p),h);let se=a.jsepRegisterMLTensor;if(!se)throw new Error('Tensor location "ml-tensor" is not supported without using WebNN.');u=se(L,Lr(p),h)}else{let L=e[2];if(Array.isArray(L)){S=c*L.length,u=a._malloc(S),s.push(u);for(let se=0;se<L.length;se++){if(typeof L[se]!="string")throw new TypeError(`tensor data at index ${se} is not a string`);a.setValue(u+se*c,ds(L[se],s),"*")}}else S=L.byteLength,u=a._malloc(S),s.push(u),a.HEAPU8.set(new Uint8Array(L.buffer,L.byteOffset,S),u)}let R=a.stackSave(),N=a.stackAlloc(4*h.length);try{h.forEach((se,ee)=>a.setValue(N+ee*c,se,c===4?"i32":"i64"));let L=a._OrtCreateTensor(Lr(p),u,S,N,h.length,Mr(k));L===0&&rs(`Can't create tensor for input/output. session=${n}, index=${o}.`),t.push(L)}finally{a.stackRestore(R)}},Lp=async(e,t,s,n,o,i)=>{let a=pt(),c=a.PTR_SIZE,p=rn.get(e);if(!p)throw new Error(`cannot run inference. invalid session id: ${e}`);let h=p[0],k=p[1],u=p[2],S=p[3],R=p[4],N=p[5],L=t.length,se=n.length,ee=0,U=[],ce=[],me=[],ye=[],ze=a.stackSave(),Ee=a.stackAlloc(L*c),tt=a.stackAlloc(L*c),mt=a.stackAlloc(se*c),Ct=a.stackAlloc(se*c);try{a.jsepOnRunStart?.(h),[ee,U]=Tn(i);for(let bt=0;bt<L;bt++)Dp(s[bt],ce,ye,e,t[bt],R);for(let bt=0;bt<se;bt++)Dp(o[bt],me,ye,e,L+n[bt],R);for(let bt=0;bt<L;bt++)a.setValue(Ee+bt*c,ce[bt],"*"),a.setValue(tt+bt*c,k[t[bt]],"*");for(let bt=0;bt<se;bt++)a.setValue(mt+bt*c,me[bt],"*"),a.setValue(Ct+bt*c,u[n[bt]],"*");if(S&&!N){let{handle:bt,outputPreferredLocations:Kt,outputPreferredLocationsEncoded:jt}=S;if(k.length!==L)throw new Error(`input count from feeds (${L}) is expected to be always equal to model's input count (${k.length}).`);for(let Ot=0;Ot<L;Ot++){let ss=t[Ot];await a._OrtBindInput(bt,k[ss],ce[Ot])!==0&&rs(`Can't bind input[${Ot}] for session=${e}.`)}for(let Ot=0;Ot<se;Ot++){let ss=n[Ot];o[Ot]?.[3]?a._OrtBindOutput(bt,u[ss],me[Ot],0)!==0&&rs(`Can't bind pre-allocated output[${Ot}] for session=${e}.`):a._OrtBindOutput(bt,u[ss],0,jt[ss])!==0&&rs(`Can't bind output[${Ot}] to ${Kt[Ot]} for session=${e}.`)}rn.set(e,[h,k,u,S,R,!0])}let Ft;S?Ft=await a._OrtRunWithBinding(h,S.handle,se,mt,ee):Ft=await a._OrtRun(h,tt,Ee,L,Ct,se,mt,ee),Ft!==0&&rs("failed to call OrtRun().");let $t=[];for(let bt=0;bt<se;bt++){let Kt=Number(a.getValue(mt+bt*c,"*"));if(Kt===me[bt]){$t.push(o[bt]);continue}let jt=a.stackSave(),Ot=a.stackAlloc(4*c),ss=!1,Jt,qt=0;try{a._OrtGetTensorData(Kt,Ot,Ot+c,Ot+2*c,Ot+3*c)!==0&&rs(`Can't access output tensor data on index ${bt}.`);let Ys=c===4?"i32":"i64",at=Number(a.getValue(Ot,Ys));qt=a.getValue(Ot+c,"*");let Pt=a.getValue(Ot+c*2,"*"),hs=Number(a.getValue(Ot+c*3,Ys)),vs=[];for(let Ks=0;Ks<hs;Ks++)vs.push(Number(a.getValue(Pt+Ks*c,Ys)));a._OrtFree(Pt)!==0&&rs("Can't free memory for tensor dims.");let Ts=vs.reduce((Ks,Cs)=>Ks*Cs,1);Jt=yr(at);let Mn=S?.outputPreferredLocations[n[bt]];if(Jt==="string"){if(Mn==="gpu-buffer"||Mn==="ml-tensor")throw new Error("String tensor is not supported on GPU.");let Ks=[];for(let Cs=0;Cs<Ts;Cs++){let Js=a.getValue(qt+Cs*c,"*"),mp=a.getValue(qt+(Cs+1)*c,"*"),Yd=Cs===Ts-1?void 0:mp-Js;Ks.push(a.UTF8ToString(Js,Yd))}$t.push([Jt,vs,Ks,"cpu"])}else if(Mn==="gpu-buffer"&&Ts>0){let Ks=a.jsepGetBuffer;if(!Ks)throw new Error('preferredLocation "gpu-buffer" is not supported without using WebGPU.');let Cs=Ks(qt),Js=or(at,Ts);if(Js===void 0||!dn(Jt))throw new Error(`Unsupported data type: ${Jt}`);ss=!0,$t.push([Jt,vs,{gpuBuffer:Cs,download:a.jsepCreateDownloader(Cs,Js,Jt),dispose:()=>{a._OrtReleaseTensor(Kt)!==0&&rs("Can't release tensor.")}},"gpu-buffer"])}else if(Mn==="ml-tensor"&&Ts>0){let Ks=a.jsepEnsureTensor;if(!Ks)throw new Error('preferredLocation "ml-tensor" is not supported without using WebNN.');if(or(at,Ts)===void 0||!Xr(Jt))throw new Error(`Unsupported data type: ${Jt}`);let Cs=await Ks(qt,at,vs,!1);ss=!0,$t.push([Jt,vs,{mlTensor:Cs,download:a.jsepCreateMLTensorDownloader(qt,Jt),dispose:()=>{a.jsepReleaseTensorId(qt),a._OrtReleaseTensor(Kt)}},"ml-tensor"])}else{let Ks=un(Jt),Cs=new Ks(Ts);new Uint8Array(Cs.buffer,Cs.byteOffset,Cs.byteLength).set(a.HEAPU8.subarray(qt,qt+Cs.byteLength)),$t.push([Jt,vs,Cs,"cpu"])}}finally{a.stackRestore(jt),Jt==="string"&&qt&&a._free(qt),ss||a._OrtReleaseTensor(Kt)}}return S&&!R&&(a._OrtClearBoundOutputs(S.handle)!==0&&rs("Can't clear bound outputs."),rn.set(e,[h,k,u,S,R,!1])),$t}finally{a.stackRestore(ze),ce.forEach(Ft=>a._OrtReleaseTensor(Ft)),me.forEach(Ft=>a._OrtReleaseTensor(Ft)),ye.forEach(Ft=>a._free(Ft)),ee!==0&&a._OrtReleaseRunOptions(ee),U.forEach(Ft=>a._free(Ft))}},zp=e=>{let t=pt(),s=rn.get(e);if(!s)throw new Error("invalid session id");let n=s[0],o=t._OrtEndProfiling(n);o===0&&rs("Can't get an profile file name."),t._OrtFree(o)},Bp=e=>{let t=[];for(let s of e){let n=s[2];!Array.isArray(n)&&"buffer"in n&&t.push(n.buffer)}return t}}),Gn,Ar,ua,Xd,Qd,pp,Rp,hp,$o,Ao,hh,mh,_h,fh,gh,wh,yh,Mh,bh=y(()=>{He(),ph(),St(),xr(),Gn=()=>!!x.wasm.proxy&&typeof document<"u",ua=!1,Xd=!1,Qd=!1,hp=new Map,$o=(e,t)=>{let s=hp.get(e);s?s.push(t):hp.set(e,[t])},Ao=()=>{if(ua||!Xd||Qd||!Ar)throw new Error("worker not ready")},hh=e=>{switch(e.data.type){case"init-wasm":ua=!1,e.data.err?(Qd=!0,Rp[1](e.data.err)):(Xd=!0,Rp[0]()),pp&&(URL.revokeObjectURL(pp),pp=void 0);break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{let t=hp.get(e.data.type);e.data.err?t.shift()[1](e.data.err):t.shift()[0](e.data.out);break}}},mh=async()=>{if(!Xd){if(ua)throw new Error("multiple calls to 'initWasm()' detected.");if(Qd)throw new Error("previous call to 'initWasm()' failed.");if(ua=!0,Gn())return new Promise((e,t)=>{Ar?.terminate(),Vr().then(([s,n])=>{try{Ar=n,Ar.onerror=i=>t(i),Ar.onmessage=hh,Rp=[e,t];let o={type:"init-wasm",in:x};Ar.postMessage(o),pp=s}catch(o){t(o)}},t)});try{await nt(x.wasm),await Vn(x),Xd=!0}catch(e){throw Qd=!0,e}finally{ua=!1}}},_h=async e=>{if(Gn())return Ao(),new Promise((t,s)=>{$o("init-ep",[t,s]);let n={type:"init-ep",in:{epName:e,env:x}};Ar.postMessage(n)});await qd(x,e)},fh=async e=>Gn()?(Ao(),new Promise((t,s)=>{$o("copy-from",[t,s]);let n={type:"copy-from",in:{buffer:e}};Ar.postMessage(n,[e.buffer])})):$r(e),gh=async(e,t)=>{if(Gn()){if(t?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return Ao(),new Promise((s,n)=>{$o("create",[s,n]);let o={type:"create",in:{model:e,options:{...t}}},i=[];e instanceof Uint8Array&&i.push(e.buffer),Ar.postMessage(o,i)})}else return dr(e,t)},wh=async e=>{if(Gn())return Ao(),new Promise((t,s)=>{$o("release",[t,s]);let n={type:"release",in:e};Ar.postMessage(n)});Op(e)},yh=async(e,t,s,n,o,i)=>{if(Gn()){if(s.some(a=>a[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(o.some(a=>a))throw new Error("pre-allocated output tensor is not supported for proxy.");return Ao(),new Promise((a,c)=>{$o("run",[a,c]);let p=s,h={type:"run",in:{sessionId:e,inputIndices:t,inputs:p,outputIndices:n,options:i}};Ar.postMessage(h,Bp(p))})}else return Lp(e,t,s,n,o,i)},Mh=async e=>{if(Gn())return Ao(),new Promise((t,s)=>{$o("end-profiling",[t,s]);let n={type:"end-profiling",in:e};Ar.postMessage(n)});zp(e)}}),Np,vh,Th,Jm=y(()=>{He(),bh(),Lt(),et(),Cn(),Np=(e,t)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];case"ml-tensor":return[e.type,e.dims,{mlTensor:e.mlTensor},"ml-tensor"];default:throw new Error(`invalid data location: ${e.location} for ${t()}`)}},vh=e=>{switch(e[3]){case"cpu":return new ie(e[0],e[2],e[1]);case"gpu-buffer":{let t=e[0];if(!dn(t))throw new Error(`not supported data type: ${t} for deserializing GPU tensor`);let{gpuBuffer:s,download:n,dispose:o}=e[2];return ie.fromGpuBuffer(s,{dataType:t,dims:e[1],download:n,dispose:o})}case"ml-tensor":{let t=e[0];if(!Xr(t))throw new Error(`not supported data type: ${t} for deserializing MLTensor tensor`);let{mlTensor:s,download:n,dispose:o}=e[2];return ie.fromMLTensor(s,{dataType:t,dims:e[1],download:n,dispose:o})}default:throw new Error(`invalid data location: ${e[3]}`)}},Th=class{async fetchModelAndCopyToWasmMemory(e){return fh(await cn(e))}async loadModel(e,t){Ve();let s;typeof e=="string"?s=await this.fetchModelAndCopyToWasmMemory(e):s=e,[this.sessionId,this.inputNames,this.outputNames]=await gh(s,t),Be()}async dispose(){return wh(this.sessionId)}async run(e,t,s){Ve();let n=[],o=[];Object.entries(e).forEach(u=>{let S=u[0],R=u[1],N=this.inputNames.indexOf(S);if(N===-1)throw new Error(`invalid input '${S}'`);n.push(R),o.push(N)});let i=[],a=[];Object.entries(t).forEach(u=>{let S=u[0],R=u[1],N=this.outputNames.indexOf(S);if(N===-1)throw new Error(`invalid output '${S}'`);i.push(R),a.push(N)});let c=n.map((u,S)=>Np(u,()=>`input "${this.inputNames[o[S]]}"`)),p=i.map((u,S)=>u?Np(u,()=>`output "${this.outputNames[a[S]]}"`):null),h=await yh(this.sessionId,o,c,a,p,s),k={};for(let u=0;u<h.length;u++)k[this.outputNames[a[u]]]=i[u]??vh(h[u]);return Be(),k}startProfiling(){}endProfiling(){Mh(this.sessionId)}}}),xh={};P(xh,{OnnxruntimeWebAssemblyBackend:()=>Wp,initializeFlags:()=>jp,wasmBackend:()=>Ph});var jp,Wp,Ph,Zm=y(()=>{He(),bh(),Jm(),xr(),jp=()=>{if((typeof x.wasm.initTimeout!="number"||x.wasm.initTimeout<0)&&(x.wasm.initTimeout=0),x.wasm.simd===!1&&console.warn('Deprecated property "env.wasm.simd" is set to false. non-SIMD build is no longer provided, and this setting will be ignored.'),typeof x.wasm.proxy!="boolean"&&(x.wasm.proxy=!1),typeof x.wasm.trace!="boolean"&&(x.wasm.trace=!1),typeof x.wasm.numThreads!="number"||!Number.isInteger(x.wasm.numThreads)||x.wasm.numThreads<=0)if(typeof self<"u"&&!self.crossOriginIsolated)x.wasm.numThreads=1;else{let e=typeof navigator>"u"?j("node:os").cpus().length:navigator.hardwareConcurrency;x.wasm.numThreads=Math.min(4,Math.ceil((e||1)/2))}},Wp=class{async init(e){jp(),await mh(),await _h(e)}async createInferenceSessionHandler(e,t){let s=new Th;return await s.loadModel(e,t),Promise.resolve(s)}},Ph=new Wp});He(),He(),He();var e_="1.21.0-dev.20241205-d27fecd3d3",t_=Se;{let e=(Zm(),T(xh)).wasmBackend;K("webgpu",e,5),K("webnn",e,5),K("cpu",e,10),K("wasm",e,10)}Object.defineProperty(x.versions,"web",{value:e_,enumerable:!0});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */},"./src/backends/onnx.js":(Ae,F,r)=>{var w;r.r(F),r.d(F,{Tensor:()=>j.Tensor,createInferenceSession:()=>ae,deviceToExecutionProviders:()=>K,isONNXProxy:()=>X,isONNXTensor:()=>B});var D=r("./src/env.js"),W=r("?2ce3"),te=r("./node_modules/onnxruntime-web/dist/ort.bundle.min.mjs"),j=r("./node_modules/onnxruntime-common/dist/esm/index.js");const y=Object.freeze({auto:null,gpu:null,cpu:"cpu",wasm:"wasm",webgpu:"webgpu",cuda:"cuda",dml:"dml",webnn:{name:"webnn",deviceType:"cpu"},"webnn-npu":{name:"webnn",deviceType:"npu"},"webnn-gpu":{name:"webnn",deviceType:"gpu"},"webnn-cpu":{name:"webnn",deviceType:"cpu"}}),P=[];let v,T;const b=Symbol.for("onnxruntime");if(b in globalThis)T=globalThis[b];else if(D.apis.IS_NODE_ENV){switch(T=W??(w||(w=r.t(W,2))),process.platform){case"win32":P.push("dml");break;case"linux":process.arch==="x64"&&P.push("cuda");break}P.push("cpu"),v=["cpu"]}else T=te,D.apis.IS_WEBNN_AVAILABLE&&P.push("webnn-npu","webnn-gpu","webnn-cpu","webnn"),D.apis.IS_WEBGPU_AVAILABLE&&P.push("webgpu"),P.push("wasm"),v=["wasm"];const z=T.InferenceSession;function K(I=null){if(!I)return v;switch(I){case"auto":return P;case"gpu":return P.filter($=>["webgpu","cuda","dml","webnn-gpu"].includes($))}if(P.includes(I))return[y[I]??I];throw new Error(`Unsupported device: "${I}". Should be one of: ${P.join(", ")}.`)}let re=null;async function ae(I,$,g){re&&await re;const C=z.create(I,$);re??=C;const x=await C;return x.config=g,x}function B(I){return I instanceof T.Tensor}const G=T?.env;G?.wasm&&(G.wasm.wasmPaths=`https://cdn.jsdelivr.net/npm/@huggingface/transformers@${D.env.version}/dist/`,G.wasm.proxy=!1,(typeof crossOriginIsolated>"u"||!crossOriginIsolated)&&(G.wasm.numThreads=1)),G?.webgpu&&(G.webgpu.powerPreference="high-performance");function X(){return G?.wasm?.proxy}D.env.backends.onnx=G},"./src/base/feature_extraction_utils.js":(Ae,F,r)=>{r.r(F),r.d(F,{FeatureExtractor:()=>te,validate_audio_inputs:()=>j});var w=r("./src/utils/constants.js"),D=r("./src/utils/generic.js"),W=r("./src/utils/hub.js");class te extends D.Callable{constructor(P){super(),this.config=P}static async from_pretrained(P,v){const T=await(0,W.getModelJSON)(P,w.FEATURE_EXTRACTOR_NAME,!0,v);return new this(T)}}function j(y,P){if(!(y instanceof Float32Array||y instanceof Float64Array))throw new Error(`${P} expects input to be a Float32Array or a Float64Array, but got ${y?.constructor?.name??typeof y} instead. If using the feature extractor directly, remember to use \`read_audio(url, sampling_rate)\` to obtain the raw audio data of the file/url.`)}},"./src/base/image_processors_utils.js":(Ae,F,r)=>{r.r(F),r.d(F,{ImageProcessor:()=>I,post_process_instance_segmentation:()=>X,post_process_object_detection:()=>b,post_process_panoptic_segmentation:()=>G,post_process_semantic_segmentation:()=>z});var w=r("./src/utils/generic.js"),D=r("./src/utils/tensor.js"),W=r("./src/utils/maths.js");r("./src/utils/image.js");var te=r("./src/utils/core.js"),j=r("./src/utils/hub.js"),y=r("./src/utils/constants.js");function P($,g,C=0,x=null){const J=$/g;let Q=(0,W.bankers_round)(J)*g;return x!==null&&Q>x&&(Q=Math.floor(J)*g),Q<C&&(Q=Math.ceil(J)*g),Q}function v([$,g],C){return[Math.max(Math.floor($/C),1)*C,Math.max(Math.floor(g/C),1)*C]}function T([$,g,C,x]){return[$-C/2,g-x/2,$+C/2,g+x/2]}function b($,g=.5,C=null,x=!1){const J=$.logits,Q=$.pred_boxes,[le,ue,fe]=J.dims;if(C!==null&&C.length!==le)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let Pe=[];for(let ve=0;ve<le;++ve){let Fe=C!==null?C[ve]:null,Ge={boxes:[],classes:[],scores:[]},Re=J[ve],ut=Q[ve];for(let de=0;de<ue;++de){let Z=Re[de],he=[],be;if(x){be=Z.sigmoid().data;for(let De=0;De<be.length;++De)be[De]>g&&he.push(De)}else{let De=(0,W.max)(Z.data)[1];if(De===fe-1||(be=(0,W.softmax)(Z.data),be[De]<g))continue;he.push(De)}for(const De of he){let Ze=ut[de].data;Ze=T(Ze),Fe!==null&&(Ze=Ze.map((Ke,ne)=>Ke*Fe[(ne+1)%2])),Ge.boxes.push(Ze),Ge.classes.push(De),Ge.scores.push(be[De])}}Pe.push(Ge)}return Pe}function z($,g=null){const C=$.logits,x=C.dims[0];if(g!==null&&g.length!==x)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");const J=[];for(let Q=0;Q<x;++Q){const le=g!==null?g[Q]:null;let ue=C[Q];le!==null&&(ue=(0,D.interpolate)(ue,le,"bilinear",!1));const[fe,Pe]=le??ue.dims.slice(-2),ve=new D.Tensor("int32",new Int32Array(fe*Pe),[fe,Pe]),Fe=ue[0].data,Ge=ve.data;for(let de=1;de<ue.dims[0];++de){const Z=ue[de].data;for(let he=0;he<Z.length;++he)Z[he]>Fe[he]&&(Fe[he]=Z[he],Ge[he]=de)}const Re=new Array(ue.dims[0]);for(let de=0;de<Ge.length;++de){const Z=Ge[de];Re[Z]=Z}const ut=Re.filter(de=>de!==void 0);J.push({segmentation:ve,labels:ut})}return J}function K($,g,C,x){const J=[],Q=[],le=[];for(let ue=0;ue<$.dims[0];++ue){const fe=$[ue],Pe=g[ue],ve=(0,W.max)(fe.data)[1];if(ve===x)continue;const Ge=(0,W.softmax)(fe.data)[ve];Ge>C&&(J.push(Pe),Q.push(Ge),le.push(ve))}return[J,Q,le]}function re($,g,C,x=.5,J=.8){const Q=[];let le=0,ue=0;const fe=g[C].data;for(let ve=0;ve<$.length;++ve)$[ve]===C&&(Q.push(ve),++le),fe[ve]>=x&&++ue;let Pe=le>0&&ue>0;return Pe&&(Pe=le/ue>J),[Pe,Q]}function ae($,g,C,x,J,Q=null,le=null){const[ue,fe]=le??$[0].dims,Pe=new D.Tensor("int32",new Int32Array(ue*fe),[ue,fe]),ve=[];if(le!==null)for(let de=0;de<$.length;++de)$[de]=(0,D.interpolate)($[de],le,"bilinear",!1);const Fe=new Int32Array($[0].data.length),Ge=new Float32Array($[0].data.length);for(let de=0;de<$.length;++de){let Z=g[de];const he=$[de].data;for(let be=0;be<he.length;++be)he[be]*=Z,he[be]>Ge[be]&&(Fe[be]=de,Ge[be]=he[be])}let Re=0;const ut=Pe.data;for(let de=0;de<C.length;++de){const Z=C[de],[he,be]=re(Fe,$,de,x,J);if(he){++Re;for(const De of be)ut[De]=Re;ve.push({id:Re,label_id:Z,score:g[de]})}}return[Pe,ve]}function B($,g,C=28,x=3136,J=1003520){if($<C||g<C)throw new Error(`height:${$} or width:${g} must be larger than factor:${C}`);if(Math.max($,g)/Math.min($,g)>200)throw new Error(`absolute aspect ratio must be smaller than 200, got ${Math.max($,g)/Math.min($,g)}`);let Q=Math.round($/C)*C,le=Math.round(g/C)*C;if(Q*le>J){const ue=Math.sqrt($*g/J);Q=Math.floor($/ue/C)*C,le=Math.floor(g/ue/C)*C}else if(Q*le<x){const ue=Math.sqrt(x/($*g));Q=Math.ceil($*ue/C)*C,le=Math.ceil(g*ue/C)*C}return[Q,le]}function G($,g=.5,C=.5,x=.8,J=null,Q=null){J===null&&(console.warn("`label_ids_to_fuse` unset. No instance will be fused."),J=new Set);const le=$.class_queries_logits??$.logits,fe=($.masks_queries_logits??$.pred_masks).sigmoid();let[Pe,ve,Fe]=le.dims;if(Fe-=1,Q!==null&&Q.length!==Pe)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let Ge=[];for(let Re=0;Re<Pe;++Re){let ut=Q!==null?Q[Re]:null,de=le[Re],Z=fe[Re],[he,be,De]=K(de,Z,g,Fe);if(De.length===0){let[ne,Xe]=ut??Z.dims.slice(-2),$e=new D.Tensor("int32",new Int32Array(ne*Xe).fill(-1),[ne,Xe]);Ge.push({segmentation:$e,segments_info:[]});continue}let[Ze,Ke]=ae(he,be,De,C,x,J,ut);Ge.push({segmentation:Ze,segments_info:Ke})}return Ge}function X($,g=.5,C=null){throw new Error("`post_process_instance_segmentation` is not yet implemented.")}class I extends w.Callable{constructor(g){super(),this.image_mean=g.image_mean??g.mean,this.image_std=g.image_std??g.std,this.resample=g.resample??2,this.do_rescale=g.do_rescale??!0,this.rescale_factor=g.rescale_factor??.00392156862745098,this.do_normalize=g.do_normalize,this.do_thumbnail=g.do_thumbnail,this.size=g.size??g.image_size,this.do_resize=g.do_resize??this.size!==void 0,this.size_divisibility=g.size_divisibility??g.size_divisor,this.do_center_crop=g.do_center_crop,this.crop_size=g.crop_size,this.do_convert_rgb=g.do_convert_rgb??!0,this.do_crop_margin=g.do_crop_margin,this.pad_size=g.pad_size,this.do_pad=g.do_pad,this.do_pad&&!this.pad_size&&this.size&&this.size.width!==void 0&&this.size.height!==void 0&&(this.pad_size=this.size),this.do_flip_channel_order=g.do_flip_channel_order??!1,this.config=g}async thumbnail(g,C,x=2){const J=g.height,Q=g.width,le=C.height,ue=C.width;let fe=Math.min(J,le),Pe=Math.min(Q,ue);return fe===J&&Pe===Q?g:(J>Q?Pe=Math.floor(Q*fe/J):Q>J&&(fe=Math.floor(J*Pe/Q)),await g.resize(Pe,fe,{resample:x}))}async crop_margin(g,C=200){const x=g.clone().grayscale(),J=(0,W.min)(x.data)[0],le=(0,W.max)(x.data)[0]-J;if(le===0)return g;const ue=C/255;let fe=x.width,Pe=x.height,ve=0,Fe=0;const Ge=x.data;for(let Re=0;Re<x.height;++Re){const ut=Re*x.width;for(let de=0;de<x.width;++de)(Ge[ut+de]-J)/le<ue&&(fe=Math.min(fe,de),Pe=Math.min(Pe,Re),ve=Math.max(ve,de),Fe=Math.max(Fe,Re))}return g=await g.crop([fe,Pe,ve,Fe]),g}pad_image(g,C,x,{mode:J="constant",center:Q=!1,constant_values:le=0}={}){const[ue,fe,Pe]=C;let ve,Fe;if(typeof x=="number"?(ve=x,Fe=x):x==="square"?ve=Fe=Math.max(ue,fe):(ve=x.width,Fe=x.height),ve!==fe||Fe!==ue){const Ge=new Float32Array(ve*Fe*Pe);if(Array.isArray(le))for(let de=0;de<Ge.length;++de)Ge[de]=le[de%Pe];else le!==0&&Ge.fill(le);const[Re,ut]=Q?[Math.floor((ve-fe)/2),Math.floor((Fe-ue)/2)]:[0,0];for(let de=0;de<ue;++de){const Z=(de+ut)*ve,he=de*fe;for(let be=0;be<fe;++be){const De=(Z+be+Re)*Pe,Ze=(he+be)*Pe;for(let Ke=0;Ke<Pe;++Ke)Ge[De+Ke]=g[Ze+Ke]}}if(J==="symmetric"){if(Q)throw new Error("`center` padding is not supported when `mode` is set to `symmetric`.");const de=ue-1,Z=fe-1;for(let he=0;he<Fe;++he){const be=he*ve,De=(0,te.calculateReflectOffset)(he,de)*fe;for(let Ze=0;Ze<ve;++Ze){if(he<ue&&Ze<fe)continue;const Ke=(be+Ze)*Pe,ne=(De+(0,te.calculateReflectOffset)(Ze,Z))*Pe;for(let Xe=0;Xe<Pe;++Xe)Ge[Ke+Xe]=g[ne+Xe]}}}g=Ge,C=[Fe,ve,Pe]}return[g,C]}rescale(g){for(let C=0;C<g.length;++C)g[C]=this.rescale_factor*g[C]}get_resize_output_image_size(g,C){const[x,J]=g.size;let Q,le;if(this.do_thumbnail){const{height:ue,width:fe}=C;Q=Math.min(ue,fe)}else Number.isInteger(C)?(Q=C,le=this.config.max_size??Q):C!==void 0&&(Q=C.shortest_edge,le=C.longest_edge);if(Q!==void 0||le!==void 0){const ue=Q===void 0?1:Math.max(Q/x,Q/J),fe=x*ue,Pe=J*ue,ve=le===void 0?1:Math.min(le/fe,le/Pe);let Fe=Math.floor(Number((fe*ve).toFixed(2))),Ge=Math.floor(Number((Pe*ve).toFixed(2)));return this.size_divisibility!==void 0&&([Fe,Ge]=v([Fe,Ge],this.size_divisibility)),[Fe,Ge]}else if(C!==void 0&&C.width!==void 0&&C.height!==void 0){let ue=C.width,fe=C.height;if(this.config.keep_aspect_ratio&&this.config.ensure_multiple_of){let Pe=fe/J,ve=ue/x;Math.abs(1-ve)<Math.abs(1-Pe)?Pe=ve:ve=Pe,fe=P(Pe*J,this.config.ensure_multiple_of),ue=P(ve*x,this.config.ensure_multiple_of)}return[ue,fe]}else{if(this.size_divisibility!==void 0)return v([x,J],this.size_divisibility);if(C.min_pixels!==void 0&&C.max_pixels!==void 0){const{min_pixels:ue,max_pixels:fe}=C,Pe=this.config.patch_size*this.config.merge_size;return B(J,x,Pe,ue,fe)}else throw new Error(`Could not resize image due to unsupported \`this.size\` option in config: ${JSON.stringify(C)}`)}}async resize(g){const[C,x]=this.get_resize_output_image_size(g,this.size);return await g.resize(C,x,{resample:this.resample})}async preprocess(g,{do_normalize:C=null,do_pad:x=null,do_convert_rgb:J=null,do_convert_grayscale:Q=null,do_flip_channel_order:le=null}={}){this.do_crop_margin&&(g=await this.crop_margin(g));const[ue,fe]=g.size;if(J??this.do_convert_rgb?g=g.rgb():Q&&(g=g.grayscale()),this.do_resize&&(g=await this.resize(g)),this.do_thumbnail&&(g=await this.thumbnail(g,this.size,this.resample)),this.do_center_crop){let Re,ut;Number.isInteger(this.crop_size)?(Re=this.crop_size,ut=this.crop_size):(Re=this.crop_size.width,ut=this.crop_size.height),g=await g.center_crop(Re,ut)}const Pe=[g.height,g.width];let ve=Float32Array.from(g.data),Fe=[g.height,g.width,g.channels];if(this.do_rescale&&this.rescale(ve),C??this.do_normalize){let Re=this.image_mean;Array.isArray(this.image_mean)||(Re=new Array(g.channels).fill(Re));let ut=this.image_std;if(Array.isArray(this.image_std)||(ut=new Array(g.channels).fill(Re)),Re.length!==g.channels||ut.length!==g.channels)throw new Error(`When set to arrays, the length of \`image_mean\` (${Re.length}) and \`image_std\` (${ut.length}) must match the number of channels in the image (${g.channels}).`);for(let de=0;de<ve.length;de+=g.channels)for(let Z=0;Z<g.channels;++Z)ve[de+Z]=(ve[de+Z]-Re[Z])/ut[Z]}if(x??this.do_pad){if(this.pad_size)[ve,Fe]=this.pad_image(ve,[g.height,g.width,g.channels],this.pad_size);else if(this.size_divisibility){const[Re,ut]=v([Fe[1],Fe[0]],this.size_divisibility);[ve,Fe]=this.pad_image(ve,Fe,{width:Re,height:ut})}}if(le??this.do_flip_channel_order){if(Fe[2]!==3)throw new Error("Flipping channel order is only supported for RGB images.");for(let Re=0;Re<ve.length;Re+=3){const ut=ve[Re];ve[Re]=ve[Re+2],ve[Re+2]=ut}}const Ge=new D.Tensor("float32",ve,Fe).permute(2,0,1);return{original_size:[fe,ue],reshaped_input_size:Pe,pixel_values:Ge}}async _call(g,...C){Array.isArray(g)||(g=[g]);const x=await Promise.all(g.map(Q=>this.preprocess(Q)));return{pixel_values:(0,D.stack)(x.map(Q=>Q.pixel_values),0),original_sizes:x.map(Q=>Q.original_size),reshaped_input_sizes:x.map(Q=>Q.reshaped_input_size)}}static async from_pretrained(g,C){const x=await(0,j.getModelJSON)(g,y.IMAGE_PROCESSOR_NAME,!0,C);return new this(x)}}},"./src/base/processing_utils.js":(Ae,F,r)=>{r.r(F),r.d(F,{Processor:()=>te});var w=r("./src/utils/constants.js"),D=r("./src/utils/generic.js"),W=r("./src/utils/hub.js");class te extends D.Callable{static classes=["image_processor_class","tokenizer_class","feature_extractor_class"];static uses_processor_config=!1;constructor(y,P){super(),this.config=y,this.components=P}get image_processor(){return this.components.image_processor}get tokenizer(){return this.components.tokenizer}get feature_extractor(){return this.components.feature_extractor}apply_chat_template(y,P={}){if(!this.tokenizer)throw new Error("Unable to apply chat template without a tokenizer.");return this.tokenizer.apply_chat_template(y,{tokenize:!1,...P})}batch_decode(...y){if(!this.tokenizer)throw new Error("Unable to decode without a tokenizer.");return this.tokenizer.batch_decode(...y)}async _call(y,...P){for(const v of[this.image_processor,this.feature_extractor,this.tokenizer])if(v)return v(y,...P);throw new Error("No image processor, feature extractor, or tokenizer found.")}static async from_pretrained(y,P){const[v,T]=await Promise.all([this.uses_processor_config?(0,W.getModelJSON)(y,w.PROCESSOR_NAME,!0,P):{},Promise.all(this.classes.filter(b=>b in this).map(async b=>{const z=await this[b].from_pretrained(y,P);return[b.replace(/_class$/,""),z]})).then(Object.fromEntries)]);return new this(v,T)}}},"./src/configs.js":(Ae,F,r)=>{r.r(F),r.d(F,{AutoConfig:()=>P,PretrainedConfig:()=>y,getKeyValueShapes:()=>j});var w=r("./src/utils/core.js"),D=r("./src/utils/hub.js");async function W(v,T){return await(0,D.getModelJSON)(v,"config.json",!0,T)}function te(v){const T={};let b={};switch(v.model_type){case"llava":case"paligemma":case"florence2":case"llava_onevision":case"idefics3":b=te(v.text_config);break;case"moondream1":b=te(v.phi_config);break;case"musicgen":b=te(v.decoder);break;case"multi_modality":b=te(v.language_config);break;case"gpt2":case"gptj":case"jais":case"codegen":case"gpt_bigcode":T.num_heads="n_head",T.num_layers="n_layer",T.hidden_size="n_embd";break;case"gpt_neox":case"stablelm":case"opt":case"falcon":T.num_heads="num_attention_heads",T.num_layers="num_hidden_layers",T.hidden_size="hidden_size";break;case"llama":case"olmo":case"olmo2":case"mobilellm":case"granite":case"cohere":case"mistral":case"starcoder2":case"qwen2":case"qwen2_vl":case"phi":case"phi3":case"phi3_v":T.num_heads="num_key_value_heads",T.num_layers="num_hidden_layers",T.hidden_size="hidden_size",T.num_attention_heads="num_attention_heads";break;case"gemma":case"gemma2":T.num_heads="num_key_value_heads",T.num_layers="num_hidden_layers",T.dim_kv="head_dim";break;case"openelm":T.num_heads="num_kv_heads",T.num_layers="num_transformer_layers",T.dim_kv="head_dim";break;case"gpt_neo":case"donut-swin":T.num_heads="num_heads",T.num_layers="num_layers",T.hidden_size="hidden_size";break;case"bloom":T.num_heads="n_head",T.num_layers="n_layer",T.hidden_size="hidden_size";break;case"mpt":T.num_heads="n_heads",T.num_layers="n_layers",T.hidden_size="d_model";break;case"exaone":T.num_heads="num_key_value_heads",T.num_layers="num_layers",T.dim_kv="head_dim",T.num_attention_heads="num_attention_heads";break;case"t5":case"mt5":case"longt5":T.num_decoder_layers="num_decoder_layers",T.num_decoder_heads="num_heads",T.decoder_dim_kv="d_kv",T.num_encoder_layers="num_layers",T.num_encoder_heads="num_heads",T.encoder_dim_kv="d_kv";break;case"bart":case"mbart":case"marian":case"whisper":case"m2m_100":case"blenderbot":case"blenderbot-small":case"florence2_language":T.num_decoder_layers="decoder_layers",T.num_decoder_heads="decoder_attention_heads",T.decoder_hidden_size="d_model",T.num_encoder_layers="encoder_layers",T.num_encoder_heads="encoder_attention_heads",T.encoder_hidden_size="d_model";break;case"speecht5":T.num_decoder_layers="decoder_layers",T.num_decoder_heads="decoder_attention_heads",T.decoder_hidden_size="hidden_size",T.num_encoder_layers="encoder_layers",T.num_encoder_heads="encoder_attention_heads",T.encoder_hidden_size="hidden_size";break;case"trocr":T.num_encoder_layers=T.num_decoder_layers="decoder_layers",T.num_encoder_heads=T.num_decoder_heads="decoder_attention_heads",T.encoder_hidden_size=T.decoder_hidden_size="d_model";break;case"musicgen_decoder":case"moonshine":T.num_encoder_layers=T.num_decoder_layers="num_hidden_layers",T.num_encoder_heads=T.num_decoder_heads="num_attention_heads",T.encoder_hidden_size=T.decoder_hidden_size="hidden_size";break;case"vision-encoder-decoder":const K=te(v.decoder),re="num_decoder_layers"in K,ae=(0,w.pick)(v,["model_type","is_encoder_decoder"]);return re?(ae.num_decoder_layers=K.num_decoder_layers,ae.num_decoder_heads=K.num_decoder_heads,ae.decoder_hidden_size=K.decoder_hidden_size,ae.num_encoder_layers=K.num_encoder_layers,ae.num_encoder_heads=K.num_encoder_heads,ae.encoder_hidden_size=K.encoder_hidden_size):(ae.num_layers=K.num_layers,ae.num_heads=K.num_heads,ae.hidden_size=K.hidden_size),ae}const z={...b,...(0,w.pick)(v,["model_type","multi_query","is_encoder_decoder"])};for(const K in T)z[K]=v[T[K]];return z}function j(v,{prefix:T="past_key_values",batch_size:b=1}={}){const z={},K=v.normalized_config;if(K.is_encoder_decoder&&"num_encoder_heads"in K&&"num_decoder_heads"in K){const re=K.encoder_dim_kv??K.encoder_hidden_size/K.num_encoder_heads,ae=K.decoder_dim_kv??K.decoder_hidden_size/K.num_decoder_heads,B=[b,K.num_encoder_heads,0,re],G=[b,K.num_decoder_heads,0,ae];for(let X=0;X<K.num_decoder_layers;++X)z[`${T}.${X}.encoder.key`]=B,z[`${T}.${X}.encoder.value`]=B,z[`${T}.${X}.decoder.key`]=G,z[`${T}.${X}.decoder.value`]=G}else{const re=K.num_heads,ae=K.num_layers,B=K.dim_kv??K.hidden_size/(K.num_attention_heads??re);if(K.model_type==="falcon"){const G=[b*re,0,B];for(let X=0;X<ae;++X)z[`${T}.${X}.key`]=G,z[`${T}.${X}.value`]=G}else if(K.multi_query){const G=[b*re,0,2*B];for(let X=0;X<ae;++X)z[`${T}.${X}.key_value`]=G}else if(K.model_type==="bloom"){const G=[b*re,B,0],X=[b*re,0,B];for(let I=0;I<ae;++I)z[`${T}.${I}.key`]=G,z[`${T}.${I}.value`]=X}else if(K.model_type==="openelm")for(let G=0;G<ae;++G){const X=[b,re[G],0,B];z[`${T}.${G}.key`]=X,z[`${T}.${G}.value`]=X}else{const G=[b,re,0,B];for(let X=0;X<ae;++X)z[`${T}.${X}.key`]=G,z[`${T}.${X}.value`]=G}}return z}class y{model_type=null;is_encoder_decoder=!1;max_position_embeddings;"transformers.js_config";constructor(T){Object.assign(this,T),this.normalized_config=te(this)}static async from_pretrained(T,{progress_callback:b=null,config:z=null,cache_dir:K=null,local_files_only:re=!1,revision:ae="main"}={}){z&&!(z instanceof y)&&(z=new y(z));const B=z??await W(T,{progress_callback:b,config:z,cache_dir:K,local_files_only:re,revision:ae});return new this(B)}}class P{static async from_pretrained(...T){return y.from_pretrained(...T)}}},"./src/env.js":(Ae,F,r)=>{r.r(F),r.d(F,{apis:()=>ae,env:()=>g});var w=r("?569f"),D=r("?3f59"),W=r("?154a");const te="3.2.4",j=typeof window<"u"&&typeof window.document<"u",y=typeof self<"u"&&self.constructor?.name==="DedicatedWorkerGlobalScope",P=typeof self<"u"&&"caches"in self,v=typeof navigator<"u"&&"gpu"in navigator,T=typeof navigator<"u"&&"ml"in navigator,b=typeof process<"u",z=b&&process?.release?.name==="node",K=!C(w),re=!C(D),ae=Object.freeze({IS_BROWSER_ENV:j,IS_WEBWORKER_ENV:y,IS_WEB_CACHE_AVAILABLE:P,IS_WEBGPU_AVAILABLE:v,IS_WEBNN_AVAILABLE:T,IS_PROCESS_AVAILABLE:b,IS_NODE_ENV:z,IS_FS_AVAILABLE:K,IS_PATH_AVAILABLE:re}),B=K&&re;let G="./";if(B){const x=Object(import.meta).url;x?G=D.dirname(D.dirname(W.fileURLToPath(x))):typeof __dirname<"u"&&(G=D.dirname(__dirname))}const X=B?D.join(G,"/.cache/"):null,I="/models/",$=B?D.join(G,I):I,g={version:te,backends:{onnx:{}},allowRemoteModels:!0,remoteHost:"https://huggingface.co/",remotePathTemplate:"{model}/resolve/{revision}/",allowLocalModels:!(j||y),localModelPath:$,useFS:K,useBrowserCache:P,useFSCache:K,cacheDir:X,useCustomCache:!1,customCache:null};function C(x){return Object.keys(x).length===0}},"./src/generation/configuration_utils.js":(Ae,F,r)=>{r.r(F),r.d(F,{GenerationConfig:()=>D});var w=r("./src/utils/core.js");class D{max_length=20;max_new_tokens=null;min_length=0;min_new_tokens=null;early_stopping=!1;max_time=null;do_sample=!1;num_beams=1;num_beam_groups=1;penalty_alpha=null;use_cache=!0;temperature=1;top_k=50;top_p=1;typical_p=1;epsilon_cutoff=0;eta_cutoff=0;diversity_penalty=0;repetition_penalty=1;encoder_repetition_penalty=1;length_penalty=1;no_repeat_ngram_size=0;bad_words_ids=null;force_words_ids=null;renormalize_logits=!1;constraints=null;forced_bos_token_id=null;forced_eos_token_id=null;remove_invalid_values=!1;exponential_decay_length_penalty=null;suppress_tokens=null;streamer=null;begin_suppress_tokens=null;forced_decoder_ids=null;guidance_scale=null;num_return_sequences=1;output_attentions=!1;output_hidden_states=!1;output_scores=!1;return_dict_in_generate=!1;pad_token_id=null;bos_token_id=null;eos_token_id=null;encoder_no_repeat_ngram_size=0;decoder_start_token_id=null;generation_kwargs={};constructor(te){Object.assign(this,(0,w.pick)(te,Object.getOwnPropertyNames(this)))}}},"./src/generation/logits_process.js":(Ae,F,r)=>{r.r(F),r.d(F,{ClassifierFreeGuidanceLogitsProcessor:()=>B,ForcedBOSTokenLogitsProcessor:()=>y,ForcedEOSTokenLogitsProcessor:()=>P,LogitsProcessor:()=>W,LogitsProcessorList:()=>j,LogitsWarper:()=>te,MinLengthLogitsProcessor:()=>K,MinNewTokensLengthLogitsProcessor:()=>re,NoBadWordsLogitsProcessor:()=>ae,NoRepeatNGramLogitsProcessor:()=>b,RepetitionPenaltyLogitsProcessor:()=>z,SuppressTokensAtBeginLogitsProcessor:()=>v,TemperatureLogitsWarper:()=>G,TopKLogitsWarper:()=>I,TopPLogitsWarper:()=>X,WhisperTimeStampLogitsProcessor:()=>T});var w=r("./src/utils/generic.js");r("./src/utils/tensor.js");var D=r("./src/utils/maths.js");class W extends w.Callable{_call(g,C){throw Error("`_call` should be implemented in a subclass")}}class te extends w.Callable{_call(g,C){throw Error("`_call` should be implemented in a subclass")}}class j extends w.Callable{constructor(){super(),this.processors=[]}push(g){this.processors.push(g)}extend(g){this.processors.push(...g)}_call(g,C){let x=C;for(const J of this.processors)x=J(g,x);return x}[Symbol.iterator](){return this.processors.values()}}class y extends W{constructor(g){super(),this.bos_token_id=g}_call(g,C){for(let x=0;x<g.length;++x)if(g[x].length===1){const J=C[x].data;J.fill(-1/0),J[this.bos_token_id]=0}return C}}class P extends W{constructor(g,C){super(),this.max_length=g,this.eos_token_id=Array.isArray(C)?C:[C]}_call(g,C){for(let x=0;x<g.length;++x)if(g[x].length===this.max_length-1){const J=C[x].data;J.fill(-1/0);for(const Q of this.eos_token_id)J[Q]=0}return C}}class v extends W{constructor(g,C){super(),this.begin_suppress_tokens=g,this.begin_index=C}_call(g,C){for(let x=0;x<g.length;++x)if(g[x].length===this.begin_index){const J=C[x].data;for(const Q of this.begin_suppress_tokens)J[Q]=-1/0}return C}}class T extends W{constructor(g,C){super(),this.eos_token_id=Array.isArray(g.eos_token_id)?g.eos_token_id[0]:g.eos_token_id,this.no_timestamps_token_id=g.no_timestamps_token_id,this.timestamp_begin=this.no_timestamps_token_id+1,this.begin_index=C.length,C.at(-1)===this.no_timestamps_token_id&&(this.begin_index-=1),this.max_initial_timestamp_index=g.max_initial_timestamp_index}_call(g,C){for(let x=0;x<g.length;++x){const J=C[x].data;if(J[this.no_timestamps_token_id]=-1/0,g[x].length===this.begin_index-1){J.fill(-1/0),J[this.timestamp_begin]=0;continue}const Q=g[x].slice(this.begin_index),le=Q.length>=1&&Q[Q.length-1]>=this.timestamp_begin,ue=Q.length<2||Q[Q.length-2]>=this.timestamp_begin;if(le&&(ue?J.subarray(this.timestamp_begin).fill(-1/0):J.subarray(0,this.eos_token_id).fill(-1/0)),g[x].length===this.begin_index&&this.max_initial_timestamp_index!==null){const Fe=this.timestamp_begin+this.max_initial_timestamp_index;J.subarray(Fe+1).fill(-1/0)}const fe=(0,D.log_softmax)(J),Pe=Math.log(fe.subarray(this.timestamp_begin).map(Math.exp).reduce((Fe,Ge)=>Fe+Ge)),ve=(0,D.max)(fe.subarray(0,this.timestamp_begin))[0];Pe>ve&&J.subarray(0,this.timestamp_begin).fill(-1/0)}return C}}class b extends W{constructor(g){super(),this.no_repeat_ngram_size=g}getNgrams(g){const C=g.length,x=[];for(let Q=0;Q<C+1-this.no_repeat_ngram_size;++Q){const le=[];for(let ue=0;ue<this.no_repeat_ngram_size;++ue)le.push(g[Q+ue]);x.push(le.map(Number))}const J=new Map;for(const Q of x){const le=Q.slice(0,Q.length-1),ue=JSON.stringify(le),fe=J.get(ue)??[];fe.push(Q[Q.length-1]),J.set(ue,fe)}return J}getGeneratedNgrams(g,C){const x=C.slice(C.length+1-this.no_repeat_ngram_size,C.length);return g.get(JSON.stringify(x.map(Number)))??[]}calcBannedNgramTokens(g){const C=[];if(g.length+1<this.no_repeat_ngram_size)return C;{const x=this.getNgrams(g);return this.getGeneratedNgrams(x,g)}}_call(g,C){for(let x=0;x<g.length;++x){const J=C[x].data,Q=this.calcBannedNgramTokens(g[x]);for(const le of Q)J[le]=-1/0}return C}}class z extends W{constructor(g){super(),this.penalty=g}_call(g,C){for(let x=0;x<g.length;++x){const J=C[x].data;for(const Q of new Set(g[x])){const le=Number(Q);J[le]<0?J[le]*=this.penalty:J[le]/=this.penalty}}return C}}class K extends W{constructor(g,C){super(),this.min_length=g,this.eos_token_id=Array.isArray(C)?C:[C]}_call(g,C){for(let x=0;x<g.length;++x)if(g[x].length<this.min_length){const J=C[x].data;for(const Q of this.eos_token_id)J[Q]=-1/0}return C}}class re extends W{constructor(g,C,x){super(),this.prompt_length_to_skip=g,this.min_new_tokens=C,this.eos_token_id=Array.isArray(x)?x:[x]}_call(g,C){for(let x=0;x<g.length;++x)if(g[x].length-this.prompt_length_to_skip<this.min_new_tokens){const Q=C[x].data;for(const le of this.eos_token_id)Q[le]=-1/0}return C}}class ae extends W{constructor(g,C){super(),this.bad_words_ids=g,this.eos_token_id=Array.isArray(C)?C:[C]}_call(g,C){for(let x=0;x<g.length;++x){const J=C[x].data,Q=g[x];for(const le of this.bad_words_ids){let ue=!0;for(let fe=1;fe<=le.length-1&&le.length<Q.length;++fe)if(le.at(-fe-1)!=Q.at(-fe)){ue=!1;break}ue&&(J[le.at(-1)]=-1/0)}}return C}}class B extends W{constructor(g){if(super(),g<=1)throw new Error(`Require guidance scale >1 to use the classifier free guidance processor, got guidance scale ${g}.`);this.guidance_scale=g}_call(g,C){if(C.dims[0]!==2*g.length)throw new Error(`Logits should have twice the batch size of the input ids, the first half of batches corresponding to the conditional inputs, and the second half of batches corresponding to the unconditional inputs. Got batch size ${C.dims[0]} for the logits and ${g.length} for the input ids.`);const x=g.length,J=C.slice([0,x],null),Q=C.slice([x,C.dims[0]],null);for(let le=0;le<Q.data.length;++le)Q.data[le]+=(J.data[le]-Q.data[le])*this.guidance_scale;return Q}}class G extends te{constructor(g){super(),this.temperature=g}_call(g,C){const x=C.data;for(let J=0;J<x.length;++J)x[J]/=this.temperature;return C}}class X extends te{constructor(g,{filter_value:C=-1/0,min_tokens_to_keep:x=1}={}){if(super(),g<0||g>1)throw new Error(`\`top_p\` must be a float > 0 and < 1, but is ${g}`);if(!Number.isInteger(x)||x<1)throw new Error(`\`min_tokens_to_keep\` must be a positive integer, but is ${x}`);this.top_p=g,this.filter_value=C,this.min_tokens_to_keep=x}}class I extends te{constructor(g,{filter_value:C=-1/0,min_tokens_to_keep:x=1}={}){if(super(),!Number.isInteger(g)||g<0)throw new Error(`\`top_k\` must be a positive integer, but is ${g}`);this.top_k=Math.max(g,x),this.filter_value=C}}},"./src/generation/logits_sampler.js":(Ae,F,r)=>{r.r(F),r.d(F,{LogitsSampler:()=>te});var w=r("./src/utils/generic.js"),D=r("./src/utils/tensor.js"),W=r("./src/utils/maths.js");r("./src/generation/configuration_utils.js");class te extends w.Callable{constructor(T){super(),this.generation_config=T}async _call(T){return this.sample(T)}async sample(T){throw Error("sample should be implemented in subclasses.")}getLogits(T,b){let z=T.dims.at(-1),K=T.data;if(b===-1)K=K.slice(-z);else{let re=b*z;K=K.slice(re,re+z)}return K}randomSelect(T){let b=0;for(let K=0;K<T.length;++K)b+=T[K];let z=Math.random()*b;for(let K=0;K<T.length;++K)if(z-=T[K],z<=0)return K;return 0}static getSampler(T){if(T.do_sample)return new y(T);if(T.num_beams>1)return new P(T);if(T.num_return_sequences>1)throw Error(`num_return_sequences has to be 1 when doing greedy search, but is ${T.num_return_sequences}.`);return new j(T)}}class j extends te{async sample(T){const b=(0,W.max)(T.data)[1];return[[BigInt(b),0]]}}class y extends te{async sample(T){let b=T.dims.at(-1);this.generation_config.top_k>0&&(b=Math.min(this.generation_config.top_k,b));const[z,K]=await(0,D.topk)(T,b),re=(0,W.softmax)(z.data);return Array.from({length:this.generation_config.num_beams},()=>{const ae=this.randomSelect(re);return[K.data[ae],Math.log(re[ae])]})}}class P extends te{async sample(T){let b=T.dims.at(-1);this.generation_config.top_k>0&&(b=Math.min(this.generation_config.top_k,b));const[z,K]=await(0,D.topk)(T,b),re=(0,W.softmax)(z.data);return Array.from({length:this.generation_config.num_beams},(ae,B)=>[K.data[B],Math.log(re[B])])}}},"./src/generation/stopping_criteria.js":(Ae,F,r)=>{r.r(F),r.d(F,{EosTokenCriteria:()=>j,InterruptableStoppingCriteria:()=>y,MaxLengthCriteria:()=>te,StoppingCriteria:()=>D,StoppingCriteriaList:()=>W});var w=r("./src/utils/generic.js");class D extends w.Callable{_call(v,T){throw Error("StoppingCriteria needs to be subclassed")}}class W extends w.Callable{constructor(){super(),this.criteria=[]}push(v){this.criteria.push(v)}extend(v){v instanceof W?v=v.criteria:v instanceof D&&(v=[v]),this.criteria.push(...v)}_call(v,T){const b=new Array(v.length).fill(!1);for(const z of this.criteria){const K=z(v,T);for(let re=0;re<b.length;++re)b[re]||=K[re]}return b}[Symbol.iterator](){return this.criteria.values()}}class te extends D{constructor(v,T=null){super(),this.max_length=v,this.max_position_embeddings=T}_call(v){return v.map(T=>T.length>=this.max_length)}}class j extends D{constructor(v){super(),Array.isArray(v)||(v=[v]),this.eos_token_id=v}_call(v,T){return v.map(b=>{const z=b.at(-1);return this.eos_token_id.some(K=>z==K)})}}class y extends D{constructor(){super(),this.interrupted=!1}interrupt(){this.interrupted=!0}reset(){this.interrupted=!1}_call(v,T){return new Array(v.length).fill(this.interrupted)}}},"./src/generation/streamers.js":(Ae,F,r)=>{r.r(F),r.d(F,{BaseStreamer:()=>te,TextStreamer:()=>y,WhisperTextStreamer:()=>P});var w=r("./src/utils/core.js"),D=r("./src/tokenizers.js"),W=r("./src/env.js");class te{put(T){throw Error("Not implemented")}end(){throw Error("Not implemented")}}const j=W.apis.IS_PROCESS_AVAILABLE?v=>process.stdout.write(v):v=>console.log(v);class y extends te{constructor(T,{skip_prompt:b=!1,callback_function:z=null,token_callback_function:K=null,decode_kwargs:re={},...ae}={}){super(),this.tokenizer=T,this.skip_prompt=b,this.callback_function=z??j,this.token_callback_function=K,this.decode_kwargs={...re,...ae},this.token_cache=[],this.print_len=0,this.next_tokens_are_prompt=!0}put(T){if(T.length>1)throw Error("TextStreamer only supports batch size of 1");if(this.skip_prompt&&this.next_tokens_are_prompt){this.next_tokens_are_prompt=!1;return}const b=T[0];this.token_callback_function?.(b),this.token_cache=(0,w.mergeArrays)(this.token_cache,b);const z=this.tokenizer.decode(this.token_cache,this.decode_kwargs);let K;z.endsWith(`
`)?(K=z.slice(this.print_len),this.token_cache=[],this.print_len=0):z.length>0&&(0,D.is_chinese_char)(z.charCodeAt(z.length-1))?(K=z.slice(this.print_len),this.print_len+=K.length):(K=z.slice(this.print_len,z.lastIndexOf(" ")+1),this.print_len+=K.length),this.on_finalized_text(K,!1)}end(){let T;this.token_cache.length>0?(T=this.tokenizer.decode(this.token_cache,this.decode_kwargs).slice(this.print_len),this.token_cache=[],this.print_len=0):T="",this.next_tokens_are_prompt=!0,this.on_finalized_text(T,!0)}on_finalized_text(T,b){T.length>0&&this.callback_function?.(T),b&&this.callback_function===j&&W.apis.IS_PROCESS_AVAILABLE&&this.callback_function?.(`
`)}}class P extends y{constructor(T,{skip_prompt:b=!1,callback_function:z=null,token_callback_function:K=null,on_chunk_start:re=null,on_chunk_end:ae=null,on_finalize:B=null,time_precision:G=.02,skip_special_tokens:X=!0,decode_kwargs:I={}}={}){super(T,{skip_prompt:b,callback_function:z,token_callback_function:K,decode_kwargs:{skip_special_tokens:X,...I}}),this.timestamp_begin=T.timestamp_begin,this.on_chunk_start=re,this.on_chunk_end=ae,this.on_finalize=B,this.time_precision=G,this.waiting_for_timestamp=!1}put(T){if(T.length>1)throw Error("WhisperTextStreamer only supports batch size of 1");const b=T[0];if(b.length===1){const z=Number(b[0])-this.timestamp_begin;if(z>=0){const K=z*this.time_precision;this.waiting_for_timestamp?this.on_chunk_end?.(K):this.on_chunk_start?.(K),this.waiting_for_timestamp=!this.waiting_for_timestamp,T=[[]]}}return super.put(T)}end(){super.end(),this.on_finalize?.()}}},"./src/models.js":(Ae,F,r)=>{r.r(F),r.d(F,{ASTForAudioClassification:()=>er,ASTModel:()=>ga,ASTPreTrainedModel:()=>Lo,AlbertForMaskedLM:()=>Fn,AlbertForQuestionAnswering:()=>mn,AlbertForSequenceClassification:()=>In,AlbertModel:()=>hn,AlbertPreTrainedModel:()=>qs,AutoModel:()=>zc,AutoModelForAudioClassification:()=>Zc,AutoModelForAudioFrameClassification:()=>tp,AutoModelForCTC:()=>Ud,AutoModelForCausalLM:()=>Wc,AutoModelForDepthEstimation:()=>op,AutoModelForDocumentQuestionAnswering:()=>sp,AutoModelForImageClassification:()=>Kc,AutoModelForImageFeatureExtraction:()=>ap,AutoModelForImageMatting:()=>rp,AutoModelForImageSegmentation:()=>Hc,AutoModelForImageToImage:()=>np,AutoModelForMaskGeneration:()=>Jc,AutoModelForMaskedLM:()=>Uc,AutoModelForNormalEstimation:()=>Fp,AutoModelForObjectDetection:()=>Qc,AutoModelForPoseEstimation:()=>ip,AutoModelForQuestionAnswering:()=>Vc,AutoModelForSemanticSegmentation:()=>qc,AutoModelForSeq2SeqLM:()=>Rc,AutoModelForSequenceClassification:()=>Ap,AutoModelForSpeechSeq2Seq:()=>Nc,AutoModelForTextToSpectrogram:()=>jc,AutoModelForTextToWaveform:()=>Ip,AutoModelForTokenClassification:()=>Bc,AutoModelForUniversalSegmentation:()=>Xc,AutoModelForVision2Seq:()=>Gc,AutoModelForXVector:()=>ep,AutoModelForZeroShotObjectDetection:()=>Yc,BartForConditionalGeneration:()=>It,BartForSequenceClassification:()=>Xt,BartModel:()=>Ye,BartPretrainedModel:()=>yt,BaseModelOutput:()=>$e,BeitForImageClassification:()=>Jr,BeitModel:()=>uc,BeitPreTrainedModel:()=>bi,BertForMaskedLM:()=>je,BertForQuestionAnswering:()=>Be,BertForSequenceClassification:()=>Ne,BertForTokenClassification:()=>Ve,BertModel:()=>Me,BertPreTrainedModel:()=>ie,BlenderbotForConditionalGeneration:()=>Ls,BlenderbotModel:()=>Nt,BlenderbotPreTrainedModel:()=>ir,BlenderbotSmallForConditionalGeneration:()=>ls,BlenderbotSmallModel:()=>Zt,BlenderbotSmallPreTrainedModel:()=>hr,BloomForCausalLM:()=>yl,BloomModel:()=>wl,BloomPreTrainedModel:()=>ui,CLIPModel:()=>ka,CLIPPreTrainedModel:()=>Yr,CLIPSegForImageSegmentation:()=>La,CLIPSegModel:()=>Da,CLIPSegPreTrainedModel:()=>Uo,CLIPTextModel:()=>nc,CLIPTextModelWithProjection:()=>Sa,CLIPVisionModel:()=>oc,CLIPVisionModelWithProjection:()=>ic,CamembertForMaskedLM:()=>Vr,CamembertForQuestionAnswering:()=>xr,CamembertForSequenceClassification:()=>Tr,CamembertForTokenClassification:()=>Or,CamembertModel:()=>Bt,CamembertPreTrainedModel:()=>wr,CausalLMOutput:()=>tn,CausalLMOutputWithPast:()=>Co,ChineseCLIPModel:()=>Aa,ChineseCLIPPreTrainedModel:()=>_r,ClapAudioModelWithProjection:()=>sd,ClapModel:()=>ed,ClapPreTrainedModel:()=>Po,ClapTextModelWithProjection:()=>td,CodeGenForCausalLM:()=>ro,CodeGenModel:()=>Ka,CodeGenPreTrainedModel:()=>Ga,CohereForCausalLM:()=>ol,CohereModel:()=>nl,CoherePreTrainedModel:()=>si,ConvBertForMaskedLM:()=>Yt,ConvBertForQuestionAnswering:()=>ms,ConvBertForSequenceClassification:()=>ts,ConvBertForTokenClassification:()=>xs,ConvBertModel:()=>vt,ConvBertPreTrainedModel:()=>ct,ConvNextForImageClassification:()=>pu,ConvNextModel:()=>cu,ConvNextPreTrainedModel:()=>Ai,ConvNextV2ForImageClassification:()=>mu,ConvNextV2Model:()=>hu,ConvNextV2PreTrainedModel:()=>wo,DPTForDepthEstimation:()=>ou,DPTModel:()=>nu,DPTPreTrainedModel:()=>Ci,DebertaForMaskedLM:()=>cr,DebertaForQuestionAnswering:()=>nr,DebertaForSequenceClassification:()=>Er,DebertaForTokenClassification:()=>Gr,DebertaModel:()=>Pr,DebertaPreTrainedModel:()=>rr,DebertaV2ForMaskedLM:()=>St,DebertaV2ForQuestionAnswering:()=>rs,DebertaV2ForSequenceClassification:()=>ds,DebertaV2ForTokenClassification:()=>Kr,DebertaV2Model:()=>pt,DebertaV2PreTrainedModel:()=>nt,DecisionTransformerModel:()=>gd,DecisionTransformerPreTrainedModel:()=>fd,DeiTForImageClassification:()=>Yl,DeiTModel:()=>xi,DeiTPreTrainedModel:()=>uo,DepthAnythingForDepthEstimation:()=>iu,DepthAnythingPreTrainedModel:()=>cc,DepthProForDepthEstimation:()=>fo,DepthProPreTrainedModel:()=>lu,DetrForObjectDetection:()=>vi,DetrForSegmentation:()=>Rr,DetrModel:()=>Zr,DetrObjectDetectionOutput:()=>Ws,DetrPreTrainedModel:()=>Cr,DetrSegmentationOutput:()=>Hl,Dinov2ForImageClassification:()=>fu,Dinov2Model:()=>_u,Dinov2PreTrainedModel:()=>yo,Dinov2WithRegistersForImageClassification:()=>yu,Dinov2WithRegistersModel:()=>wu,Dinov2WithRegistersPreTrainedModel:()=>gu,DistilBertForMaskedLM:()=>Pn,DistilBertForQuestionAnswering:()=>Hr,DistilBertForSequenceClassification:()=>Yn,DistilBertForTokenClassification:()=>xn,DistilBertModel:()=>Tn,DistilBertPreTrainedModel:()=>pr,DonutSwinModel:()=>mc,DonutSwinPreTrainedModel:()=>du,EfficientNetForImageClassification:()=>ld,EfficientNetModel:()=>ad,EfficientNetPreTrainedModel:()=>Ri,ElectraForMaskedLM:()=>Hs,ElectraForQuestionAnswering:()=>Fr,ElectraForSequenceClassification:()=>sr,ElectraForTokenClassification:()=>Ur,ElectraModel:()=>Ss,ElectraPreTrainedModel:()=>Ps,EsmForMaskedLM:()=>Jn,EsmForSequenceClassification:()=>Lr,EsmForTokenClassification:()=>yr,EsmModel:()=>En,EsmPreTrainedModel:()=>Dr,ExaoneForCausalLM:()=>Qa,ExaoneModel:()=>Xa,ExaonePreTrainedModel:()=>fn,FalconForCausalLM:()=>Zu,FalconModel:()=>Ju,FalconPreTrainedModel:()=>Li,FastViTForImageClassification:()=>Dl,FastViTModel:()=>Ol,FastViTPreTrainedModel:()=>lr,Florence2ForConditionalGeneration:()=>xa,Florence2PreTrainedModel:()=>Ta,GLPNForDepthEstimation:()=>hc,GLPNModel:()=>$i,GLPNPreTrainedModel:()=>Si,GPT2LMHeadModel:()=>fr,GPT2Model:()=>za,GPT2PreTrainedModel:()=>Vo,GPTBigCodeForCausalLM:()=>Jo,GPTBigCodeModel:()=>Va,GPTBigCodePreTrainedModel:()=>Yo,GPTJForCausalLM:()=>Qo,GPTJModel:()=>Xo,GPTJPreTrainedModel:()=>qo,GPTNeoForCausalLM:()=>ja,GPTNeoModel:()=>Na,GPTNeoPreTrainedModel:()=>Ko,GPTNeoXForCausalLM:()=>Ua,GPTNeoXModel:()=>Wa,GPTNeoXPreTrainedModel:()=>Ho,Gemma2ForCausalLM:()=>ul,Gemma2Model:()=>ll,Gemma2PreTrainedModel:()=>ni,GemmaForCausalLM:()=>al,GemmaModel:()=>il,GemmaPreTrainedModel:()=>ri,GraniteForCausalLM:()=>is,GraniteModel:()=>rl,GranitePreTrainedModel:()=>sl,GroupViTModel:()=>Fl,GroupViTPreTrainedModel:()=>Il,HieraForImageClassification:()=>po,HieraModel:()=>Jl,HieraPreTrainedModel:()=>co,HubertForCTC:()=>Nu,HubertForSequenceClassification:()=>ju,HubertModel:()=>bc,HubertPreTrainedModel:()=>Mc,IJepaForImageClassification:()=>Pl,IJepaModel:()=>mi,IJepaPreTrainedModel:()=>io,Idefics3ForConditionalGeneration:()=>No,Idefics3PreTrainedModel:()=>Ea,ImageMattingOutput:()=>Gd,JAISLMHeadModel:()=>Ra,JAISModel:()=>Ba,JAISPreTrainedModel:()=>Go,JinaCLIPModel:()=>Ia,JinaCLIPPreTrainedModel:()=>so,JinaCLIPTextModel:()=>Fa,JinaCLIPVisionModel:()=>Oa,LlamaForCausalLM:()=>qa,LlamaModel:()=>Ha,LlamaPreTrainedModel:()=>Zo,LlavaForConditionalGeneration:()=>eo,LlavaOnevisionForConditionalGeneration:()=>ba,LlavaPreTrainedModel:()=>Ma,LongT5ForConditionalGeneration:()=>Ie,LongT5Model:()=>ge,LongT5PreTrainedModel:()=>pe,M2M100ForConditionalGeneration:()=>Cu,M2M100Model:()=>Eu,M2M100PreTrainedModel:()=>bo,MBartForCausalLM:()=>Ns,MBartForConditionalGeneration:()=>Es,MBartForSequenceClassification:()=>Vs,MBartModel:()=>Ce,MBartPreTrainedModel:()=>_s,MPNetForMaskedLM:()=>cn,MPNetForQuestionAnswering:()=>Sn,MPNetForSequenceClassification:()=>Cn,MPNetForTokenClassification:()=>kn,MPNetModel:()=>Lt,MPNetPreTrainedModel:()=>Mr,MT5ForConditionalGeneration:()=>wt,MT5Model:()=>_t,MT5PreTrainedModel:()=>qe,MarianMTModel:()=>Ln,MarianModel:()=>Mo,MarianPreTrainedModel:()=>Pu,MaskFormerForInstanceSegmentation:()=>uu,MaskFormerModel:()=>ki,MaskFormerPreTrainedModel:()=>go,MaskedLMOutput:()=>js,MgpstrForSceneTextRecognition:()=>kc,MgpstrModelOutput:()=>yd,MgpstrPreTrainedModel:()=>Md,MistralForCausalLM:()=>en,MistralModel:()=>kr,MistralPreTrainedModel:()=>gr,MobileBertForMaskedLM:()=>qr,MobileBertForQuestionAnswering:()=>Xr,MobileBertForSequenceClassification:()=>dn,MobileBertModel:()=>un,MobileBertPreTrainedModel:()=>or,MobileLLMForCausalLM:()=>Ja,MobileLLMModel:()=>Ya,MobileLLMPreTrainedModel:()=>no,MobileNetV1ForImageClassification:()=>cd,MobileNetV1Model:()=>dd,MobileNetV1PreTrainedModel:()=>Wi,MobileNetV2ForImageClassification:()=>pd,MobileNetV2Model:()=>Vi,MobileNetV2PreTrainedModel:()=>Ui,MobileNetV3ForImageClassification:()=>md,MobileNetV3Model:()=>Gi,MobileNetV3PreTrainedModel:()=>hd,MobileNetV4ForImageClassification:()=>Ec,MobileNetV4Model:()=>_d,MobileNetV4PreTrainedModel:()=>Ki,MobileViTForImageClassification:()=>Rl,MobileViTModel:()=>Bl,MobileViTPreTrainedModel:()=>wi,MobileViTV2ForImageClassification:()=>jl,MobileViTV2Model:()=>Nl,MobileViTV2PreTrainedModel:()=>yi,ModelOutput:()=>Xe,ModernBertForMaskedLM:()=>gt,ModernBertForSequenceClassification:()=>lt,ModernBertForTokenClassification:()=>dt,ModernBertModel:()=>ot,ModernBertPreTrainedModel:()=>Qe,Moondream1ForConditionalGeneration:()=>va,MoonshineForConditionalGeneration:()=>ya,MoonshineModel:()=>rc,MoonshinePreTrainedModel:()=>Bo,MptForCausalLM:()=>bl,MptModel:()=>Ml,MptPreTrainedModel:()=>di,MultiModalityCausalLM:()=>Cc,MultiModalityPreTrainedModel:()=>wd,MusicgenForCausalLM:()=>ud,MusicgenForConditionalGeneration:()=>ji,MusicgenModel:()=>Pc,MusicgenPreTrainedModel:()=>Ni,NomicBertModel:()=>oe,NomicBertPreTrainedModel:()=>A,OPTForCausalLM:()=>Tl,OPTModel:()=>vl,OPTPreTrainedModel:()=>ci,Olmo2ForCausalLM:()=>tl,Olmo2Model:()=>el,Olmo2PreTrainedModel:()=>ti,OlmoForCausalLM:()=>ac,OlmoModel:()=>Za,OlmoPreTrainedModel:()=>ei,OpenELMForCausalLM:()=>cl,OpenELMModel:()=>dl,OpenELMPreTrainedModel:()=>oi,OwlViTForObjectDetection:()=>Vl,OwlViTModel:()=>Ul,OwlViTPreTrainedModel:()=>Wl,Owlv2ForObjectDetection:()=>Kl,Owlv2Model:()=>Gl,Owlv2PreTrainedModel:()=>Mi,PaliGemmaForConditionalGeneration:()=>Pa,PaliGemmaPreTrainedModel:()=>mr,PatchTSMixerForPrediction:()=>Sc,PatchTSMixerModel:()=>Td,PatchTSMixerPreTrainedModel:()=>qi,PatchTSTForPrediction:()=>vd,PatchTSTModel:()=>bd,PatchTSTPreTrainedModel:()=>Hi,Phi3ForCausalLM:()=>gl,Phi3Model:()=>fl,Phi3PreTrainedModel:()=>li,Phi3VForCausalLM:()=>jo,Phi3VPreTrainedModel:()=>Ca,PhiForCausalLM:()=>_l,PhiModel:()=>ml,PhiPreTrainedModel:()=>ai,PreTrainedModel:()=>ne,PretrainedMixin:()=>fs,PvtForImageClassification:()=>Sl,PvtModel:()=>kl,PvtPreTrainedModel:()=>_i,PyAnnoteForAudioFrameClassification:()=>Au,PyAnnoteModel:()=>fc,PyAnnotePreTrainedModel:()=>Oi,QuestionAnsweringModelOutput:()=>Xs,Qwen2ForCausalLM:()=>On,Qwen2Model:()=>pl,Qwen2PreTrainedModel:()=>ii,Qwen2VLForConditionalGeneration:()=>oo,Qwen2VLPreTrainedModel:()=>hl,RTDetrForObjectDetection:()=>dc,RTDetrModel:()=>ql,RTDetrObjectDetectionOutput:()=>Dn,RTDetrPreTrainedModel:()=>ao,ResNetForImageClassification:()=>eu,ResNetModel:()=>Zl,ResNetPreTrainedModel:()=>ho,RoFormerForMaskedLM:()=>Se,RoFormerForQuestionAnswering:()=>it,RoFormerForSequenceClassification:()=>He,RoFormerForTokenClassification:()=>et,RoFormerModel:()=>_e,RoFormerPreTrainedModel:()=>q,RobertaForMaskedLM:()=>br,RobertaForQuestionAnswering:()=>Mt,RobertaForSequenceClassification:()=>Is,RobertaForTokenClassification:()=>Gs,RobertaModel:()=>cs,RobertaPreTrainedModel:()=>Tt,SamImageSegmentationOutput:()=>xu,SamModel:()=>Tu,SamPreTrainedModel:()=>vu,SapiensForDepthEstimation:()=>au,SapiensForNormalEstimation:()=>_o,SapiensForSemanticSegmentation:()=>pc,SapiensPreTrainedModel:()=>mo,SegformerForImageClassification:()=>od,SegformerForSemanticSegmentation:()=>zi,SegformerModel:()=>xc,SegformerPreTrainedModel:()=>Us,Seq2SeqLMOutput:()=>lp,SequenceClassifierOutput:()=>Vt,SiglipModel:()=>$a,SiglipPreTrainedModel:()=>ar,SiglipTextModel:()=>to,SiglipVisionModel:()=>Wo,SpeechT5ForSpeechToText:()=>Ku,SpeechT5ForTextToSpeech:()=>Hu,SpeechT5HifiGan:()=>qu,SpeechT5Model:()=>Sp,SpeechT5PreTrainedModel:()=>xo,SqueezeBertForMaskedLM:()=>pn,SqueezeBertForQuestionAnswering:()=>ns,SqueezeBertForSequenceClassification:()=>An,SqueezeBertModel:()=>$n,SqueezeBertPreTrainedModel:()=>zr,StableLmForCausalLM:()=>id,StableLmModel:()=>Bn,StableLmPreTrainedModel:()=>Bi,Starcoder2ForCausalLM:()=>Yu,Starcoder2Model:()=>Qu,Starcoder2PreTrainedModel:()=>jr,Swin2SRForImageSuperResolution:()=>Ei,Swin2SRModel:()=>ru,Swin2SRPreTrainedModel:()=>gn,SwinForImageClassification:()=>Pi,SwinModel:()=>su,SwinPreTrainedModel:()=>tu,T5ForConditionalGeneration:()=>Y,T5Model:()=>M,T5PreTrainedModel:()=>xe,TableTransformerForObjectDetection:()=>Xl,TableTransformerModel:()=>Ti,TableTransformerObjectDetectionOutput:()=>Ql,TableTransformerPreTrainedModel:()=>lo,TokenClassifierOutput:()=>zs,TrOCRForCausalLM:()=>Tc,TrOCRPreTrainedModel:()=>Xu,UniSpeechForCTC:()=>gc,UniSpeechForSequenceClassification:()=>Ou,UniSpeechModel:()=>Fu,UniSpeechPreTrainedModel:()=>vo,UniSpeechSatForAudioFrameClassification:()=>zu,UniSpeechSatForCTC:()=>Du,UniSpeechSatForSequenceClassification:()=>Lu,UniSpeechSatModel:()=>wc,UniSpeechSatPreTrainedModel:()=>zn,ViTForImageClassification:()=>xl,ViTMAEModel:()=>$l,ViTMAEPreTrainedModel:()=>fi,ViTMSNForImageClassification:()=>lc,ViTMSNModel:()=>Al,ViTMSNPreTrainedModel:()=>gi,ViTModel:()=>hi,ViTPreTrainedModel:()=>pi,VisionEncoderDecoderModel:()=>Ro,VitMatteForImageMatting:()=>zl,VitMattePreTrainedModel:()=>Ll,VitPoseForPoseEstimation:()=>Cl,VitPosePreTrainedModel:()=>El,VitsModel:()=>nd,VitsModelOutput:()=>sa,VitsPreTrainedModel:()=>rd,Wav2Vec2BertForCTC:()=>Bu,Wav2Vec2BertForSequenceClassification:()=>Ru,Wav2Vec2BertModel:()=>yc,Wav2Vec2BertPreTrainedModel:()=>To,Wav2Vec2ForAudioFrameClassification:()=>$u,Wav2Vec2ForCTC:()=>Fi,Wav2Vec2ForSequenceClassification:()=>Su,Wav2Vec2Model:()=>ku,Wav2Vec2PreTrainedModel:()=>Nr,WavLMForAudioFrameClassification:()=>Gu,WavLMForCTC:()=>vc,WavLMForSequenceClassification:()=>Uu,WavLMForXVector:()=>Vu,WavLMModel:()=>Wu,WavLMPreTrainedModel:()=>wn,WeSpeakerResNetModel:()=>Iu,WeSpeakerResNetPreTrainedModel:()=>Di,WhisperForConditionalGeneration:()=>Br,WhisperModel:()=>wa,WhisperPreTrainedModel:()=>zo,XLMForQuestionAnswering:()=>Zn,XLMForSequenceClassification:()=>Zs,XLMForTokenClassification:()=>Qr,XLMModel:()=>Le,XLMPreTrainedModel:()=>ws,XLMRobertaForMaskedLM:()=>ma,XLMRobertaForQuestionAnswering:()=>fa,XLMRobertaForSequenceClassification:()=>Do,XLMRobertaForTokenClassification:()=>_a,XLMRobertaModel:()=>Ht,XLMRobertaPreTrainedModel:()=>_n,XLMWithLMHeadModel:()=>ft,XVectorOutput:()=>Vd,YolosForObjectDetection:()=>Mu,YolosModel:()=>_c,YolosObjectDetectionOutput:()=>bu,YolosPreTrainedModel:()=>Ii});var w=r("./src/configs.js"),D=r("./src/backends/onnx.js"),W=r("./src/utils/dtypes.js"),te=r("./src/utils/generic.js"),j=r("./src/utils/core.js"),y=r("./src/utils/hub.js"),P=r("./src/utils/constants.js"),v=r("./src/generation/logits_process.js"),T=r("./src/generation/configuration_utils.js"),b=r("./src/utils/tensor.js"),z=r("./src/utils/image.js"),K=r("./src/utils/maths.js"),re=r("./src/generation/stopping_criteria.js"),ae=r("./src/generation/logits_sampler.js"),B=r("./src/env.js"),G=r("./src/models/whisper/generation_whisper.js"),X=r("./src/models/whisper/common_whisper.js");const I={EncoderOnly:0,EncoderDecoder:1,Seq2Seq:2,Vision2Seq:3,DecoderOnly:4,MaskGeneration:5,ImageTextToText:6,Musicgen:7,MultiModality:8,Phi3V:9},$=new Map,g=new Map,C=new Map;async function x(f,_,H){const Te=H.config?.["transformers.js_config"]??{};let ke=H.device??Te.device;ke&&typeof ke!="string"&&(ke.hasOwnProperty(_)?ke=ke[_]:(console.warn(`device not specified for "${_}". Using the default device.`),ke=null));const Oe=ke??(B.apis.IS_NODE_ENV?"cpu":"wasm"),st=(0,D.deviceToExecutionProviders)(Oe);let rt=H.dtype??Te.dtype;if(typeof rt!="string"&&(rt&&rt.hasOwnProperty(_)?rt=rt[_]:(rt=W.DEFAULT_DEVICE_DTYPE_MAPPING[Oe]??W.DATA_TYPES.fp32,console.warn(`dtype not specified for "${_}". Using the default dtype (${rt}) for this device (${Oe}).`))),rt===W.DATA_TYPES.auto){let es=Te.dtype;typeof es!="string"&&(es=es[_]),es&&es!==W.DATA_TYPES.auto&&W.DATA_TYPES.hasOwnProperty(es)?rt=es:rt=W.DEFAULT_DEVICE_DTYPE_MAPPING[Oe]??W.DATA_TYPES.fp32}const ht=rt;if(W.DEFAULT_DTYPE_SUFFIX_MAPPING.hasOwnProperty(ht)){if(ht===W.DATA_TYPES.fp16&&Oe==="webgpu"&&!await(0,W.isWebGpuFp16Supported)())throw new Error(`The device (${Oe}) does not support fp16.`)}else throw new Error(`Invalid dtype: ${ht}. Should be one of: ${Object.keys(W.DATA_TYPES).join(", ")}`);const kt=Te.kv_cache_dtype?typeof Te.kv_cache_dtype=="string"?Te.kv_cache_dtype:Te.kv_cache_dtype[ht]??"float32":void 0;if(kt&&!["float32","float16"].includes(kt))throw new Error(`Invalid kv_cache_dtype: ${kt}. Should be one of: float32, float16`);const Qt={dtype:ht,kv_cache_dtype:kt},Wt=W.DEFAULT_DTYPE_SUFFIX_MAPPING[ht],Dt=`${H.subfolder??""}/${_}${Wt}.onnx`,At={...H.session_options};At.executionProviders??=st;const bs=Te.free_dimension_overrides;bs?At.freeDimensionOverrides??=bs:Oe.startsWith("webnn")&&!At.freeDimensionOverrides&&console.warn('WebNN does not currently support dynamic shapes and requires `free_dimension_overrides` to be set in config.json as a field within "transformers.js_config". When `free_dimension_overrides` is not set, you may experience significant performance degradation.');const Gt=(0,y.getModelFile)(f,Dt,!0,H),Ut=H.use_external_data_format??Te.use_external_data_format;let ps=[];if(Ut&&(Ut===!0||typeof Ut=="object"&&Ut.hasOwnProperty(_)&&Ut[_]===!0)){if(B.apis.IS_NODE_ENV)throw new Error("External data format is not yet supported in Node.js");const es=`${_}${Wt}.onnx_data`,Fs=`${H.subfolder??""}/${es}`;ps.push(new Promise(async(Bs,ks)=>{const Rs=await(0,y.getModelFile)(f,Fs,!0,H);Bs({path:es,data:Rs})}))}else At.externalData!==void 0&&(ps=At.externalData.map(async es=>{if(typeof es.data=="string"){const Fs=await(0,y.getModelFile)(f,es.data,!0,H);return{...es,data:Fs}}return es}));if(ps.length>0&&(At.externalData=await Promise.all(ps)),Oe==="webgpu"){const es=(0,w.getKeyValueShapes)(H.config,{prefix:"present"});if(Object.keys(es).length>0&&!(0,D.isONNXProxy)()){const Fs={};for(const Bs in es)Fs[Bs]="gpu-buffer";At.preferredOutputLocation=Fs}}return{buffer:await Gt,session_options:At,session_config:Qt}}async function J(f,_,H){return Object.fromEntries(await Promise.all(Object.keys(_).map(async Te=>{const{buffer:ke,session_options:Oe,session_config:st}=await x(f,_[Te],H),rt=await(0,D.createInferenceSession)(ke,Oe,st);return[Te,rt]})))}async function Q(f,_,H){return Object.fromEntries(await Promise.all(Object.keys(_).map(async Te=>{const ke=await(0,y.getModelJSON)(f,_[Te],!1,H);return[Te,ke]})))}function le(f,_){const H=Object.create(null),Te=[];for(const st of f.inputNames){const rt=_[st];if(!(rt instanceof b.Tensor)){Te.push(st);continue}H[st]=(0,D.isONNXProxy)()?rt.clone():rt}if(Te.length>0)throw new Error(`An error occurred during model execution: "Missing the following inputs: ${Te.join(", ")}.`);const ke=Object.keys(_).length,Oe=f.inputNames.length;if(ke>Oe){let st=Object.keys(_).filter(rt=>!f.inputNames.includes(rt));console.warn(`WARNING: Too many inputs were provided (${ke} > ${Oe}). The following inputs will be ignored: "${st.join(", ")}".`)}return H}async function ue(f,_){const H=le(f,_);try{const Te=Object.fromEntries(Object.entries(H).map(([Oe,st])=>[Oe,st.ort_tensor]));let ke=await f.run(Te);return ke=fe(ke),ke}catch(Te){const ke=Object.fromEntries(Object.entries(H).map(([Oe,{type:st,dims:rt,data:ht}])=>[Oe,{type:st,dims:rt,data:ht}]));throw console.error(`An error occurred during model execution: "${Te}".`),console.error("Inputs given to model:",ke),Te}}function fe(f){for(let _ in f)(0,D.isONNXTensor)(f[_])?f[_]=new b.Tensor(f[_]):typeof f[_]=="object"&&fe(f[_]);return f}function Pe(f){if(f instanceof b.Tensor)return f;if(f.length===0)throw Error("items must be non-empty");if(Array.isArray(f[0])){if(f.some(_=>_.length!==f[0].length))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=True' and/or 'truncation=True' to have batched tensors with the same length.");return new b.Tensor("int64",BigInt64Array.from(f.flat().map(_=>BigInt(_))),[f.length,f[0].length])}else return new b.Tensor("int64",BigInt64Array.from(f.map(_=>BigInt(_))),[1,f.length])}function ve(f){return new b.Tensor("bool",[f],[1])}async function Fe(f,_){let{encoder_outputs:H,input_ids:Te,decoder_input_ids:ke,...Oe}=_;if(!H){const rt=(0,j.pick)(_,f.sessions.model.inputNames);H=(await Ge(f,rt)).last_hidden_state}return Oe.input_ids=ke,Oe.encoder_hidden_states=H,f.sessions.decoder_model_merged.inputNames.includes("encoder_attention_mask")&&(Oe.encoder_attention_mask=_.attention_mask),await Re(f,Oe,!0)}async function Ge(f,_){const H=f.sessions.model,Te=(0,j.pick)(_,H.inputNames);if(H.inputNames.includes("inputs_embeds")&&!Te.inputs_embeds){if(!_.input_ids)throw new Error("Both `input_ids` and `inputs_embeds` are missing in the model inputs.");Te.inputs_embeds=await f.encode_text({input_ids:_.input_ids})}return H.inputNames.includes("token_type_ids")&&!Te.token_type_ids&&(Te.token_type_ids=new b.Tensor("int64",new BigInt64Array(Te.input_ids.data.length),Te.input_ids.dims)),await ue(H,Te)}async function Re(f,_,H=!1){const Te=f.sessions[H?"decoder_model_merged":"model"],{past_key_values:ke,...Oe}=_;if(Te.inputNames.includes("use_cache_branch")&&(Oe.use_cache_branch=ve(!!ke)),Te.inputNames.includes("position_ids")&&Oe.attention_mask&&!Oe.position_ids){const rt=f.config.model_type==="paligemma"?1:0;Oe.position_ids=he(Oe,ke,rt)}f.addPastKeyValues(Oe,ke);const st=(0,j.pick)(Oe,Te.inputNames);return await ue(Te,st)}function ut({image_token_id:f,inputs_embeds:_,image_features:H,input_ids:Te,attention_mask:ke}){const Oe=Te.tolist().map(kt=>kt.reduce((Qt,Wt,Dt)=>(Wt==f&&Qt.push(Dt),Qt),[])),st=Oe.reduce((kt,Qt)=>kt+Qt.length,0),rt=H.dims[0];if(st!==rt)throw new Error(`Image features and image tokens do not match: tokens: ${st}, features ${rt}`);let ht=0;for(let kt=0;kt<Oe.length;++kt){const Qt=Oe[kt],Wt=_[kt];for(let Dt=0;Dt<Qt.length;++Dt)Wt[Qt[Dt]].data.set(H[ht++].data)}return{inputs_embeds:_,attention_mask:ke}}async function de(f,{input_ids:_=null,attention_mask:H=null,pixel_values:Te=null,position_ids:ke=null,inputs_embeds:Oe=null,past_key_values:st=null,generation_config:rt=null,logits_processor:ht=null,...kt}){if(!Oe){if(Oe=await f.encode_text({input_ids:_,...kt}),Te&&_.dims[1]!==1){const Wt=await f.encode_image({pixel_values:Te,...kt});({inputs_embeds:Oe,attention_mask:H}=f._merge_input_ids_with_image_features({image_features:Wt,inputs_embeds:Oe,input_ids:_,attention_mask:H}))}else if(st&&Te&&_.dims[1]===1){const Wt=_.dims[1],Dt=Object.values(st)[0].dims.at(-2);H=(0,b.cat)([(0,b.ones)([_.dims[0],Dt]),H.slice(null,[H.dims[1]-Wt,H.dims[1]])],1)}}if(!ke&&f.config.model_type==="qwen2_vl"){const{image_grid_thw:Wt,video_grid_thw:Dt}=kt;[ke]=f.get_rope_index(_,Wt,Dt,H)}return await Re(f,{inputs_embeds:Oe,past_key_values:st,attention_mask:H,position_ids:ke,generation_config:rt,logits_processor:ht},!0)}function Z(f,_=0){const[H,Te]=f.dims,ke=f.data,Oe=new BigInt64Array(ke.length);for(let st=0;st<H;++st){const rt=st*Te;let ht=BigInt(_);for(let kt=0;kt<Te;++kt){const Qt=rt+kt;ke[Qt]===0n?Oe[Qt]=BigInt(1):(Oe[Qt]=ht,ht+=ke[Qt])}}return{data:Oe,dims:f.dims}}function he(f,_=null,H=0){const{input_ids:Te,inputs_embeds:ke,attention_mask:Oe}=f,{data:st,dims:rt}=Z(Oe,H);let ht=new b.Tensor("int64",st,rt);if(_){const kt=-(Te??ke).dims.at(1);ht=ht.slice(null,[kt,null])}return ht}function be(f,_,H,Te){if(H.past_key_values){const ke=Object.values(H.past_key_values)[0].dims.at(-2),{input_ids:Oe,attention_mask:st}=H;if(!(st&&st.dims[1]>Oe.dims[1])){if(ke<Oe.dims[1])H.input_ids=Oe.slice(null,[ke,null]);else if(f.config.image_token_index!=null&&Oe.data.some(rt=>rt==f.config.image_token_index)){const rt=f.config.num_image_tokens;if(!rt)throw new Error("`num_image_tokens` is missing in the model configuration.");const ht=Oe.dims[1]-(ke-rt);H.input_ids=Oe.slice(null,[-ht,null]),H.attention_mask=(0,b.ones)([1,ke+ht])}}}return H}function De(f,_,H,Te){return H.past_key_values&&(_=_.map(ke=>[ke.at(-1)])),{...H,decoder_input_ids:Pe(_)}}function Ze(f,..._){return f.config.is_encoder_decoder?De(f,..._):be(f,..._)}function Ke(f,_,H,Te){const ke=!!H.past_key_values;return Te.guidance_scale!==null&&Te.guidance_scale>1&&(ke?H.input_ids=(0,b.cat)([H.input_ids,H.input_ids],0):(H.input_ids=(0,b.cat)([H.input_ids,(0,b.full_like)(H.input_ids,BigInt(Te.pad_token_id))],0),H.attention_mask=(0,b.cat)([H.attention_mask,(0,b.full_like)(H.attention_mask,0n)],0))),(ke||!H.pixel_values)&&(H.pixel_values=(0,b.full)([0,0,3,384,384],1)),ke&&(H.images_seq_mask=new b.Tensor("bool",new Array(1).fill(!0).fill(!1,0,1),[1,1]),H.images_emb_mask=new b.Tensor("bool",new Array(0).fill(!1),[1,1,0])),H}class ne extends te.Callable{main_input_name="input_ids";forward_params=["input_ids","attention_mask"];constructor(_,H,Te){super(),this.config=_,this.sessions=H,this.configs=Te;const ke=C.get(this.constructor),Oe=$.get(ke);switch(this.can_generate=!1,this._forward=null,this._prepare_inputs_for_generation=null,Oe){case I.DecoderOnly:this.can_generate=!0,this._forward=Re,this._prepare_inputs_for_generation=be;break;case I.Seq2Seq:case I.Vision2Seq:case I.Musicgen:this.can_generate=!0,this._forward=Fe,this._prepare_inputs_for_generation=De;break;case I.EncoderDecoder:this._forward=Fe;break;case I.ImageTextToText:this.can_generate=!0,this._forward=de,this._prepare_inputs_for_generation=Ze;break;case I.Phi3V:this.can_generate=!0,this._prepare_inputs_for_generation=Ze;break;case I.MultiModality:this.can_generate=!0,this._prepare_inputs_for_generation=Ke;break;default:this._forward=Ge;break}this.can_generate&&this.forward_params.push("past_key_values"),this.custom_config=this.config["transformers.js_config"]??{}}async dispose(){const _=[];for(const H of Object.values(this.sessions))H?.handler?.dispose&&_.push(H.handler.dispose());return await Promise.all(_)}static async from_pretrained(_,{progress_callback:H=null,config:Te=null,cache_dir:ke=null,local_files_only:Oe=!1,revision:st="main",model_file_name:rt=null,subfolder:ht="onnx",device:kt=null,dtype:Qt=null,use_external_data_format:Wt=null,session_options:Dt={}}={}){let At={progress_callback:H,config:Te,cache_dir:ke,local_files_only:Oe,revision:st,model_file_name:rt,subfolder:ht,device:kt,dtype:Qt,use_external_data_format:Wt,session_options:Dt};const bs=C.get(this),Gt=$.get(bs);Te=At.config=await w.AutoConfig.from_pretrained(_,At);let Ut;if(Gt===I.DecoderOnly)Ut=await Promise.all([J(_,{model:At.model_file_name??"model"},At),Q(_,{generation_config:"generation_config.json"},At)]);else if(Gt===I.Seq2Seq||Gt===I.Vision2Seq)Ut=await Promise.all([J(_,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},At),Q(_,{generation_config:"generation_config.json"},At)]);else if(Gt===I.MaskGeneration)Ut=await Promise.all([J(_,{model:"vision_encoder",prompt_encoder_mask_decoder:"prompt_encoder_mask_decoder"},At)]);else if(Gt===I.EncoderDecoder)Ut=await Promise.all([J(_,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},At)]);else if(Gt===I.ImageTextToText){const ps={embed_tokens:"embed_tokens",vision_encoder:"vision_encoder",decoder_model_merged:"decoder_model_merged"};Te.is_encoder_decoder&&(ps.model="encoder_model"),Ut=await Promise.all([J(_,ps,At),Q(_,{generation_config:"generation_config.json"},At)])}else if(Gt===I.Musicgen)Ut=await Promise.all([J(_,{model:"text_encoder",decoder_model_merged:"decoder_model_merged",encodec_decode:"encodec_decode"},At),Q(_,{generation_config:"generation_config.json"},At)]);else if(Gt===I.MultiModality)Ut=await Promise.all([J(_,{prepare_inputs_embeds:"prepare_inputs_embeds",model:"language_model",lm_head:"lm_head",gen_head:"gen_head",gen_img_embeds:"gen_img_embeds",image_decode:"image_decode"},At),Q(_,{generation_config:"generation_config.json"},At)]);else if(Gt===I.Phi3V)Ut=await Promise.all([J(_,{prepare_inputs_embeds:"prepare_inputs_embeds",model:"model",vision_encoder:"vision_encoder"},At),Q(_,{generation_config:"generation_config.json"},At)]);else{if(Gt!==I.EncoderOnly){const ps=bs??Te?.model_type;ps!=="custom"&&console.warn(`Model type for '${ps}' not found, assuming encoder-only architecture. Please report this at ${P.GITHUB_ISSUE_URL}.`)}Ut=await Promise.all([J(_,{model:At.model_file_name??"model"},At)])}return new this(Te,...Ut)}async _call(_){return await this.forward(_)}async forward(_){return await this._forward(this,_)}get generation_config(){return this.configs?.generation_config??null}_get_logits_warper(_){const H=new v.LogitsProcessorList;return _.temperature!==null&&_.temperature!==1&&H.push(new v.TemperatureLogitsWarper(_.temperature)),_.top_k!==null&&_.top_k!==0&&H.push(new v.TopKLogitsWarper(_.top_k)),_.top_p!==null&&_.top_p<1&&H.push(new v.TopPLogitsWarper(_.top_p)),H}_get_logits_processor(_,H,Te=null){const ke=new v.LogitsProcessorList;if(_.repetition_penalty!==null&&_.repetition_penalty!==1&&ke.push(new v.RepetitionPenaltyLogitsProcessor(_.repetition_penalty)),_.no_repeat_ngram_size!==null&&_.no_repeat_ngram_size>0&&ke.push(new v.NoRepeatNGramLogitsProcessor(_.no_repeat_ngram_size)),_.bad_words_ids!==null&&ke.push(new v.NoBadWordsLogitsProcessor(_.bad_words_ids,_.eos_token_id)),_.min_length!==null&&_.eos_token_id!==null&&_.min_length>0&&ke.push(new v.MinLengthLogitsProcessor(_.min_length,_.eos_token_id)),_.min_new_tokens!==null&&_.eos_token_id!==null&&_.min_new_tokens>0&&ke.push(new v.MinNewTokensLengthLogitsProcessor(H,_.min_new_tokens,_.eos_token_id)),_.forced_bos_token_id!==null&&ke.push(new v.ForcedBOSTokenLogitsProcessor(_.forced_bos_token_id)),_.forced_eos_token_id!==null&&ke.push(new v.ForcedEOSTokenLogitsProcessor(_.max_length,_.forced_eos_token_id)),_.begin_suppress_tokens!==null){const Oe=H>1||_.forced_bos_token_id===null?H:H+1;ke.push(new v.SuppressTokensAtBeginLogitsProcessor(_.begin_suppress_tokens,Oe))}return _.guidance_scale!==null&&_.guidance_scale>1&&ke.push(new v.ClassifierFreeGuidanceLogitsProcessor(_.guidance_scale)),Te!==null&&ke.extend(Te),ke}_prepare_generation_config(_,H,Te=T.GenerationConfig){const ke={...this.config};for(const st of["decoder","generator","text_config"])st in ke&&Object.assign(ke,ke[st]);const Oe=new Te(ke);return Object.assign(Oe,this.generation_config??{}),_&&Object.assign(Oe,_),H&&Object.assign(Oe,(0,j.pick)(H,Object.getOwnPropertyNames(Oe))),Oe}_get_stopping_criteria(_,H=null){const Te=new re.StoppingCriteriaList;return _.max_length!==null&&Te.push(new re.MaxLengthCriteria(_.max_length,this.config.max_position_embeddings??null)),_.eos_token_id!==null&&Te.push(new re.EosTokenCriteria(_.eos_token_id)),H&&Te.extend(H),Te}_validate_model_class(){if(!this.can_generate){const _=[yn,Eo,kd,Xi],H=C.get(this.constructor),Te=new Set,ke=this.config.model_type;for(const st of _){const rt=st.get(ke);rt&&Te.add(rt[0])}let Oe=`The current model class (${H}) is not compatible with \`.generate()\`, as it doesn't have a language model head.`;throw Te.size>0&&(Oe+=` Please use the following class instead: ${[...Te].join(", ")}`),Error(Oe)}}prepare_inputs_for_generation(..._){return this._prepare_inputs_for_generation(this,..._)}_update_model_kwargs_for_generation({generated_input_ids:_,outputs:H,model_inputs:Te,is_encoder_decoder:ke}){return Te.past_key_values=this.getPastKeyValues(H,Te.past_key_values),Te.input_ids=new b.Tensor("int64",_.flat(),[_.length,1]),ke||(Te.attention_mask=(0,b.cat)([Te.attention_mask,(0,b.ones)([Te.attention_mask.dims[0],1])],1)),Te.position_ids=null,Te}_prepare_model_inputs({inputs:_,bos_token_id:H,model_kwargs:Te}){const ke=(0,j.pick)(Te,this.forward_params),Oe=this.main_input_name;if(Oe in ke){if(_)throw new Error("`inputs`: {inputs}` were passed alongside {input_name} which is not allowed. Make sure to either pass {inputs} or {input_name}=...")}else ke[Oe]=_;return{inputs_tensor:ke[Oe],model_inputs:ke,model_input_name:Oe}}async _prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:_,model_inputs:H,model_input_name:Te,generation_config:ke}){if(this.sessions.model.inputNames.includes("inputs_embeds")&&!H.inputs_embeds&&"_prepare_inputs_embeds"in this){const{input_ids:st,pixel_values:rt,attention_mask:ht,...kt}=H,Qt=await this._prepare_inputs_embeds(H);H={...kt,...(0,j.pick)(Qt,["inputs_embeds","attention_mask"])}}let{last_hidden_state:Oe}=await Ge(this,H);if(ke.guidance_scale!==null&&ke.guidance_scale>1)Oe=(0,b.cat)([Oe,(0,b.full_like)(Oe,0)],0),"attention_mask"in H&&(H.attention_mask=(0,b.cat)([H.attention_mask,(0,b.zeros_like)(H.attention_mask)],0));else if(H.decoder_input_ids){const st=Pe(H.decoder_input_ids).dims[0];if(st!==Oe.dims[0]){if(Oe.dims[0]!==1)throw new Error(`The encoder outputs have a different batch size (${Oe.dims[0]}) than the decoder inputs (${st}).`);Oe=(0,b.cat)(Array.from({length:st},()=>Oe),0)}}return H.encoder_outputs=Oe,H}_prepare_decoder_input_ids_for_generation({batch_size:_,model_input_name:H,model_kwargs:Te,decoder_start_token_id:ke,bos_token_id:Oe,generation_config:st}){let{decoder_input_ids:rt,...ht}=Te;if(!(rt instanceof b.Tensor)){if(rt)Array.isArray(rt[0])||(rt=Array.from({length:_},()=>rt));else if(ke??=Oe,this.config.model_type==="musicgen")rt=Array.from({length:_*this.config.decoder.num_codebooks},()=>[ke]);else if(Array.isArray(ke)){if(ke.length!==_)throw new Error(`\`decoder_start_token_id\` expcted to have length ${_} but got ${ke.length}`);rt=ke}else rt=Array.from({length:_},()=>[ke]);rt=Pe(rt)}return Te.decoder_attention_mask=(0,b.ones_like)(rt),{input_ids:rt,model_inputs:ht}}async generate({inputs:_=null,generation_config:H=null,logits_processor:Te=null,stopping_criteria:ke=null,streamer:Oe=null,...st}){this._validate_model_class(),H=this._prepare_generation_config(H,st);let{inputs_tensor:rt,model_inputs:ht,model_input_name:kt}=this._prepare_model_inputs({inputs:_,model_kwargs:st});const Qt=this.config.is_encoder_decoder;Qt&&("encoder_outputs"in ht||(ht=await this._prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:rt,model_inputs:ht,model_input_name:kt,generation_config:H})));let Wt;Qt?{input_ids:Wt,model_inputs:ht}=this._prepare_decoder_input_ids_for_generation({batch_size:ht[kt].dims.at(0),model_input_name:kt,model_kwargs:ht,decoder_start_token_id:H.decoder_start_token_id,bos_token_id:H.bos_token_id,generation_config:H}):Wt=ht[kt];let Dt=Wt.dims.at(-1);H.max_new_tokens!==null&&(H.max_length=Dt+H.max_new_tokens);const At=this._get_logits_processor(H,Dt,Te),bs=this._get_stopping_criteria(H,ke),Gt=ht[kt].dims.at(0),Ut=ae.LogitsSampler.getSampler(H),ps=new Array(Gt).fill(0),Ms=Wt.tolist();Oe&&Oe.put(Ms);let es,Fs={};for(;;){if(ht=this.prepare_inputs_for_generation(Ms,ht,H),es=await this.forward(ht),H.output_attentions&&H.return_dict_in_generate){const tr=this.getAttentions(es);for(const Sr in tr)Sr in Fs||(Fs[Sr]=[]),Fs[Sr].push(tr[Sr])}const Rs=es.logits.slice(null,-1,null),Qs=At(Ms,Rs),ur=[];for(let tr=0;tr<Qs.dims.at(0);++tr){const Sr=Qs[tr],ko=await Ut(Sr);for(const[na,Rn]of ko){const Nn=BigInt(na);ps[tr]+=Rn,Ms[tr].push(Nn),ur.push([Nn]);break}}if(Oe&&Oe.put(ur),bs(Ms).every(tr=>tr))break;ht=this._update_model_kwargs_for_generation({generated_input_ids:ur,outputs:es,model_inputs:ht,is_encoder_decoder:Qt})}Oe&&Oe.end();const Bs=this.getPastKeyValues(es,ht.past_key_values,!0),ks=new b.Tensor("int64",Ms.flat(),[Ms.length,Ms[0].length]);if(H.return_dict_in_generate)return{sequences:ks,past_key_values:Bs,...Fs};for(const Rs of Object.values(es))Rs.location==="gpu-buffer"&&Rs.dispose();return ks}getPastKeyValues(_,H,Te=!1){const ke=Object.create(null);for(const Oe in _)if(Oe.startsWith("present")){const st=Oe.replace("present","past_key_values"),rt=Oe.includes("encoder");if(rt&&H?ke[st]=H[st]:ke[st]=_[Oe],H&&(!rt||Te)){const ht=H[st];ht.location==="gpu-buffer"&&ht.dispose()}}return ke}getAttentions(_){const H={};for(const Te of["cross_attentions","encoder_attentions","decoder_attentions"])for(const ke in _)ke.startsWith(Te)&&(Te in H||(H[Te]=[]),H[Te].push(_[ke]));return H}addPastKeyValues(_,H){if(H)Object.assign(_,H);else{const ke=(this.sessions.decoder_model_merged??this.sessions.model)?.config?.kv_cache_dtype??"float32",Oe=ke==="float16"?new Uint16Array:[],st=(_[this.main_input_name]??_.attention_mask)?.dims?.[0]??1,rt=(0,w.getKeyValueShapes)(this.config,{batch_size:st});for(const ht in rt)_[ht]=new b.Tensor(ke,Oe,rt[ht])}}async encode_image({pixel_values:_}){const H=(await ue(this.sessions.vision_encoder,{pixel_values:_})).image_features;return this.config.num_image_tokens||(console.warn(`The number of image tokens was not set in the model configuration. Setting it to the number of features detected by the vision encoder (${H.dims[1]}).`),this.config.num_image_tokens=H.dims[1]),H}async encode_text({input_ids:_}){return(await ue(this.sessions.embed_tokens,{input_ids:_})).inputs_embeds}}class Xe{}class $e extends Xe{constructor({last_hidden_state:_,hidden_states:H=null,attentions:Te=null}){super(),this.last_hidden_state=_,this.hidden_states=H,this.attentions=Te}}class ie extends ne{}class Me extends ie{}class je extends ie{async _call(_){return new js(await super._call(_))}}class Ne extends ie{async _call(_){return new Vt(await super._call(_))}}class Ve extends ie{async _call(_){return new zs(await super._call(_))}}class Be extends ie{async _call(_){return new Xs(await super._call(_))}}class Qe extends ne{}class ot extends Qe{}class gt extends Qe{async _call(_){return new js(await super._call(_))}}class lt extends Qe{async _call(_){return new Vt(await super._call(_))}}class dt extends Qe{async _call(_){return new zs(await super._call(_))}}class A extends ne{}class oe extends A{}class q extends ne{}class _e extends q{}class Se extends q{async _call(_){return new js(await super._call(_))}}class He extends q{async _call(_){return new Vt(await super._call(_))}}class et extends q{async _call(_){return new zs(await super._call(_))}}class it extends q{async _call(_){return new Xs(await super._call(_))}}class ct extends ne{}class vt extends ct{}class Yt extends ct{async _call(_){return new js(await super._call(_))}}class ts extends ct{async _call(_){return new Vt(await super._call(_))}}class xs extends ct{async _call(_){return new zs(await super._call(_))}}class ms extends ct{async _call(_){return new Xs(await super._call(_))}}class Ps extends ne{}class Ss extends Ps{}class Hs extends Ps{async _call(_){return new js(await super._call(_))}}class sr extends Ps{async _call(_){return new Vt(await super._call(_))}}class Ur extends Ps{async _call(_){return new zs(await super._call(_))}}class Fr extends Ps{async _call(_){return new Xs(await super._call(_))}}class wr extends ne{}class Bt extends wr{}class Vr extends wr{async _call(_){return new js(await super._call(_))}}class Tr extends wr{async _call(_){return new Vt(await super._call(_))}}class Or extends wr{async _call(_){return new zs(await super._call(_))}}class xr extends wr{async _call(_){return new Xs(await super._call(_))}}class rr extends ne{}class Pr extends rr{}class cr extends rr{async _call(_){return new js(await super._call(_))}}class Er extends rr{async _call(_){return new Vt(await super._call(_))}}class Gr extends rr{async _call(_){return new zs(await super._call(_))}}class nr extends rr{async _call(_){return new Xs(await super._call(_))}}class nt extends ne{}class pt extends nt{}class St extends nt{async _call(_){return new js(await super._call(_))}}class ds extends nt{async _call(_){return new Vt(await super._call(_))}}class Kr extends nt{async _call(_){return new zs(await super._call(_))}}class rs extends nt{async _call(_){return new Xs(await super._call(_))}}class pr extends ne{}class Tn extends pr{}class Yn extends pr{async _call(_){return new Vt(await super._call(_))}}class xn extends pr{async _call(_){return new zs(await super._call(_))}}class Hr extends pr{async _call(_){return new Xs(await super._call(_))}}class Pn extends pr{async _call(_){return new js(await super._call(_))}}class Dr extends ne{}class En extends Dr{}class Jn extends Dr{async _call(_){return new js(await super._call(_))}}class Lr extends Dr{async _call(_){return new Vt(await super._call(_))}}class yr extends Dr{async _call(_){return new zs(await super._call(_))}}class or extends ne{}class un extends or{}class qr extends or{async _call(_){return new js(await super._call(_))}}class dn extends or{async _call(_){return new Vt(await super._call(_))}}class Xr extends or{async _call(_){return new Xs(await super._call(_))}}class Mr extends ne{}class Lt extends Mr{}class cn extends Mr{async _call(_){return new js(await super._call(_))}}class Cn extends Mr{async _call(_){return new Vt(await super._call(_))}}class kn extends Mr{async _call(_){return new zs(await super._call(_))}}class Sn extends Mr{async _call(_){return new Xs(await super._call(_))}}class zr extends ne{}class $n extends zr{}class pn extends zr{async _call(_){return new js(await super._call(_))}}class An extends zr{async _call(_){return new Vt(await super._call(_))}}class ns extends zr{async _call(_){return new Xs(await super._call(_))}}class qs extends ne{}class hn extends qs{}class In extends qs{async _call(_){return new Vt(await super._call(_))}}class mn extends qs{async _call(_){return new Xs(await super._call(_))}}class Fn extends qs{async _call(_){return new js(await super._call(_))}}class xe extends ne{forward_params=["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"]}class M extends xe{}class Y extends xe{}class pe extends ne{}class ge extends pe{}class Ie extends pe{}class qe extends ne{}class _t extends qe{}class wt extends qe{}class yt extends ne{}class Ye extends yt{}class It extends yt{}class Xt extends yt{async _call(_){return new Vt(await super._call(_))}}class _s extends ne{}class Ce extends _s{}class Es extends _s{}class Vs extends _s{async _call(_){return new Vt(await super._call(_))}}class Ns extends _s{}class ir extends ne{}class Nt extends ir{}class Ls extends ir{}class hr extends ne{}class Zt extends hr{}class ls extends hr{}class Tt extends ne{}class cs extends Tt{}class br extends Tt{async _call(_){return new js(await super._call(_))}}class Is extends Tt{async _call(_){return new Vt(await super._call(_))}}class Gs extends Tt{async _call(_){return new zs(await super._call(_))}}class Mt extends Tt{async _call(_){return new Xs(await super._call(_))}}class ws extends ne{}class Le extends ws{}class ft extends ws{async _call(_){return new js(await super._call(_))}}class Zs extends ws{async _call(_){return new Vt(await super._call(_))}}class Qr extends ws{async _call(_){return new zs(await super._call(_))}}class Zn extends ws{async _call(_){return new Xs(await super._call(_))}}class _n extends ne{}class Ht extends _n{}class ma extends _n{async _call(_){return new js(await super._call(_))}}class Do extends _n{async _call(_){return new Vt(await super._call(_))}}class _a extends _n{async _call(_){return new zs(await super._call(_))}}class fa extends _n{async _call(_){return new Xs(await super._call(_))}}class Lo extends ne{}class ga extends Lo{}class er extends Lo{}class zo extends ne{requires_attention_mask=!1;main_input_name="input_features";forward_params=["input_features","attention_mask","decoder_input_ids","decoder_attention_mask","past_key_values"]}class wa extends zo{}class Br extends zo{_prepare_generation_config(_,H){return super._prepare_generation_config(_,H,G.WhisperGenerationConfig)}_retrieve_init_tokens(_){const H=[_.decoder_start_token_id];let Te=_.language;const ke=_.task;if(_.is_multilingual){Te||(console.warn("No language specified - defaulting to English (en)."),Te="en");const st=`<|${(0,X.whisper_language_to_code)(Te)}|>`;H.push(_.lang_to_id[st]),H.push(_.task_to_id[ke??"transcribe"])}else if(Te||ke)throw new Error("Cannot specify `task` or `language` for an English-only model. If the model is intended to be multilingual, pass `is_multilingual=true` to generate, or update the generation config.");return!_.return_timestamps&&_.no_timestamps_token_id&&H.at(-1)!==_.no_timestamps_token_id?H.push(_.no_timestamps_token_id):_.return_timestamps&&H.at(-1)===_.no_timestamps_token_id&&(console.warn("<|notimestamps|> prompt token is removed from generation_config since `return_timestamps` is set to `true`."),H.pop()),H.filter(Oe=>Oe!=null)}async generate({inputs:_=null,generation_config:H=null,logits_processor:Te=null,stopping_criteria:ke=null,...Oe}){H=this._prepare_generation_config(H,Oe);const st=Oe.decoder_input_ids??this._retrieve_init_tokens(H);if(H.return_timestamps&&(Te??=new v.LogitsProcessorList,Te.push(new v.WhisperTimeStampLogitsProcessor(H,st))),H.begin_suppress_tokens&&(Te??=new v.LogitsProcessorList,Te.push(new v.SuppressTokensAtBeginLogitsProcessor(H.begin_suppress_tokens,st.length))),H.return_token_timestamps){if(!H.alignment_heads)throw new Error("Model generation config has no `alignment_heads`, token-level timestamps not available. See https://gist.github.com/hollance/42e32852f24243b748ae6bc1f985b13a on how to add this property to the generation config.");H.task==="translate"&&console.warn("Token-level timestamps may not be reliable for task 'translate'."),H.output_attentions=!0,H.return_dict_in_generate=!0}const rt=await super.generate({inputs:_,generation_config:H,logits_processor:Te,decoder_input_ids:st,...Oe});return H.return_token_timestamps&&(rt.token_timestamps=this._extract_token_timestamps(rt,H.alignment_heads,H.num_frames)),rt}_extract_token_timestamps(_,H,Te=null,ke=.02){if(!_.cross_attentions)throw new Error("Model outputs must contain cross attentions to extract timestamps. This is most likely because the model was not exported with `output_attentions=True`.");Te==null&&console.warn("`num_frames` has not been set, meaning the entire audio will be analyzed. This may lead to inaccurate token-level timestamps for short audios (< 30 seconds).");let Oe=this.config.median_filter_width;Oe===void 0&&(console.warn("Model config has no `median_filter_width`, using default value of 7."),Oe=7);const st=_.cross_attentions,rt=Array.from({length:this.config.decoder_layers},(Gt,Ut)=>(0,b.cat)(st.map(ps=>ps[Ut]),2)),ht=(0,b.stack)(H.map(([Gt,Ut])=>{if(Gt>=rt.length)throw new Error(`Layer index ${Gt} is out of bounds for cross attentions (length ${rt.length}).`);return Te?rt[Gt].slice(null,Ut,null,[0,Te]):rt[Gt].slice(null,Ut)})).transpose(1,0,2,3),[kt,Qt]=(0,b.std_mean)(ht,-2,0,!0),Wt=ht.clone();for(let Gt=0;Gt<Wt.dims[0];++Gt){const Ut=Wt[Gt];for(let ps=0;ps<Ut.dims[0];++ps){const Ms=Ut[ps],es=kt[Gt][ps][0].data,Fs=Qt[Gt][ps][0].data;for(let Bs=0;Bs<Ms.dims[0];++Bs){let ks=Ms[Bs].data;for(let Rs=0;Rs<ks.length;++Rs)ks[Rs]=(ks[Rs]-Fs[Rs])/es[Rs];ks.set((0,K.medianFilter)(ks,Oe))}}}const Dt=[(0,b.mean)(Wt,1)],At=_.sequences.dims,bs=new b.Tensor("float32",new Float32Array(At[0]*At[1]),At);for(let Gt=0;Gt<At[0];++Gt){const Ut=Dt[Gt].neg().squeeze_(0),[ps,Ms]=(0,K.dynamic_time_warping)(Ut.tolist()),es=Array.from({length:ps.length-1},(ks,Rs)=>ps[Rs+1]-ps[Rs]),Fs=(0,j.mergeArrays)([1],es).map(ks=>!!ks),Bs=[];for(let ks=0;ks<Fs.length;++ks)Fs[ks]&&Bs.push(Ms[ks]*ke);bs[Gt].data.set(Bs,1)}return bs}}class Bo extends ne{requires_attention_mask=!1;main_input_name="input_values";forward_params=["input_values","decoder_input_ids","past_key_values"]}class rc extends Bo{}class ya extends Bo{}class Ro extends ne{main_input_name="pixel_values";forward_params=["pixel_values","decoder_input_ids","encoder_hidden_states","past_key_values"]}class Ma extends ne{forward_params=["input_ids","attention_mask","pixel_values","position_ids","past_key_values"]}class eo extends Ma{_merge_input_ids_with_image_features({inputs_embeds:_,image_features:H,input_ids:Te,attention_mask:ke}){const Oe=this.config.image_token_index,rt=Te.tolist().map(Dt=>Dt.findIndex(At=>At==Oe)),ht=rt.every(Dt=>Dt===-1),kt=rt.every(Dt=>Dt!==-1);if(!ht&&!kt)throw new Error("Every input should contain either 0 or 1 image token.");if(ht)return{inputs_embeds:_,attention_mask:ke};const Qt=[],Wt=[];for(let Dt=0;Dt<rt.length;++Dt){const At=rt[Dt],bs=_[Dt],Gt=H[Dt],Ut=ke[Dt];Qt.push((0,b.cat)([bs.slice([0,At]),Gt,bs.slice([At+1,bs.dims[0]])],0)),Wt.push((0,b.cat)([Ut.slice([0,At]),(0,b.ones)([Gt.dims[0]]),Ut.slice([At+1,Ut.dims[0]])],0))}return{inputs_embeds:(0,b.stack)(Qt,0),attention_mask:(0,b.stack)(Wt,0)}}}class ba extends eo{}class va extends eo{}class Ta extends ne{forward_params=["input_ids","inputs_embeds","attention_mask","pixel_values","encoder_outputs","decoder_input_ids","decoder_inputs_embeds","decoder_attention_mask","past_key_values"];main_input_name="inputs_embeds"}class xa extends Ta{_merge_input_ids_with_image_features({inputs_embeds:_,image_features:H,input_ids:Te,attention_mask:ke}){return{inputs_embeds:(0,b.cat)([H,_],1),attention_mask:(0,b.cat)([(0,b.ones)(H.dims.slice(0,2)),ke],1)}}async _prepare_inputs_embeds({input_ids:_,pixel_values:H,inputs_embeds:Te,attention_mask:ke}){if(!_&&!H)throw new Error("Either `input_ids` or `pixel_values` should be provided.");let Oe,st;return _&&(Oe=await this.encode_text({input_ids:_})),H&&(st=await this.encode_image({pixel_values:H})),Oe&&st?{inputs_embeds:Te,attention_mask:ke}=this._merge_input_ids_with_image_features({inputs_embeds:Oe,image_features:st,input_ids:_,attention_mask:ke}):Te=Oe||st,{inputs_embeds:Te,attention_mask:ke}}async forward({input_ids:_,pixel_values:H,attention_mask:Te,decoder_input_ids:ke,decoder_attention_mask:Oe,encoder_outputs:st,past_key_values:rt,inputs_embeds:ht,decoder_inputs_embeds:kt}){if(ht||({inputs_embeds:ht,attention_mask:Te}=await this._prepare_inputs_embeds({input_ids:_,pixel_values:H,inputs_embeds:ht,attention_mask:Te})),!st){let{last_hidden_state:Dt}=await Ge(this,{inputs_embeds:ht,attention_mask:Te});st=Dt}if(!kt){if(!ke)throw new Error("Either `decoder_input_ids` or `decoder_inputs_embeds` should be provided.");kt=await this.encode_text({input_ids:ke})}return await Re(this,{inputs_embeds:kt,attention_mask:Oe,encoder_attention_mask:Te,encoder_hidden_states:st,past_key_values:rt},!0)}}class mr extends ne{forward_params=["input_ids","attention_mask","pixel_values","position_ids","past_key_values"]}class Pa extends mr{_merge_input_ids_with_image_features(_){const H=_.image_features.dims.at(-1),Te=_.image_features.view(-1,H);return ut({image_token_id:this.config.image_token_index,..._,image_features:Te})}}class Ea extends ne{forward_params=["input_ids","attention_mask","pixel_values","pixel_attention_mask","position_ids","past_key_values"]}class No extends Ea{async encode_image({pixel_values:_,pixel_attention_mask:H}){return(await ue(this.sessions.vision_encoder,{pixel_values:_,pixel_attention_mask:H})).image_features}_merge_input_ids_with_image_features(_){const H=_.image_features.dims.at(-1),Te=_.image_features.view(-1,H);return ut({image_token_id:this.config.image_token_id,..._,image_features:Te})}}class Ca extends ne{forward_params=["input_ids","inputs_embeds","attention_mask","position_ids","pixel_values","image_sizes","past_key_values"]}class jo extends Ca{async forward({input_ids:_=null,attention_mask:H=null,pixel_values:Te=null,image_sizes:ke=null,position_ids:Oe=null,inputs_embeds:st=null,past_key_values:rt=null,generation_config:ht=null,logits_processor:kt=null,...Qt}){if(!st){let Dt;if(Te&&_.dims[1]!==1){if(!ke)throw new Error("`image_sizes` must be provided when `pixel_values` is provided.");({image_features:Dt}=await ue(this.sessions.vision_encoder,{pixel_values:Te,image_sizes:ke}))}else{const At=this.config.normalized_config.hidden_size;Dt=new b.Tensor("float32",[],[0,At])}({inputs_embeds:st}=await ue(this.sessions.prepare_inputs_embeds,{input_ids:_,image_features:Dt}))}return await Re(this,{inputs_embeds:st,past_key_values:rt,attention_mask:H,position_ids:Oe,generation_config:ht,logits_processor:kt},!1)}}class Yr extends ne{}class ka extends Yr{}class nc extends Yr{static async from_pretrained(_,H={}){return super.from_pretrained(_,{...H,model_file_name:H.model_file_name??"text_model"})}}class Sa extends Yr{static async from_pretrained(_,H={}){return super.from_pretrained(_,{...H,model_file_name:H.model_file_name??"text_model"})}}class oc extends Yr{static async from_pretrained(_,H={}){return super.from_pretrained(_,{...H,model_file_name:H.model_file_name??"vision_model"})}}class ic extends Yr{static async from_pretrained(_,H={}){return super.from_pretrained(_,{...H,model_file_name:H.model_file_name??"vision_model"})}}class ar extends ne{}class $a extends ar{}class to extends ar{static async from_pretrained(_,H={}){return super.from_pretrained(_,{...H,model_file_name:H.model_file_name??"text_model"})}}class Wo extends Yr{static async from_pretrained(_,H={}){return super.from_pretrained(_,{...H,model_file_name:H.model_file_name??"vision_model"})}}class _r extends ne{}class Aa extends _r{}class so extends ne{}class Ia extends so{async forward(_){const H=!_.input_ids,Te=!_.pixel_values;if(H&&Te)throw new Error("Either `input_ids` or `pixel_values` should be provided.");if(H&&(_.input_ids=(0,b.ones)([_.pixel_values.dims[0],1])),Te){const{image_size:kt}=this.config.vision_config;_.pixel_values=(0,b.full)([0,3,kt,kt],0)}const{text_embeddings:ke,image_embeddings:Oe,l2norm_text_embeddings:st,l2norm_image_embeddings:rt}=await super.forward(_),ht={};return H||(ht.text_embeddings=ke,ht.l2norm_text_embeddings=st),Te||(ht.image_embeddings=Oe,ht.l2norm_image_embeddings=rt),ht}}class Fa extends so{static async from_pretrained(_,H={}){return super.from_pretrained(_,{...H,model_file_name:H.model_file_name??"text_model"})}}class Oa extends so{static async from_pretrained(_,H={}){return super.from_pretrained(_,{...H,model_file_name:H.model_file_name??"vision_model"})}}class Uo extends ne{}class Da extends Uo{}class La extends Uo{}class Vo extends ne{}class za extends Vo{}class fr extends Vo{}class Go extends ne{}class Ba extends Go{}class Ra extends Go{}class Ko extends ne{}class Na extends Ko{}class ja extends Ko{}class Ho extends ne{}class Wa extends Ho{}class Ua extends Ho{}class qo extends ne{}class Xo extends qo{}class Qo extends qo{}class Yo extends ne{}class Va extends Yo{}class Jo extends Yo{}class Ga extends ne{}class Ka extends Ga{}class ro extends Ga{}class Zo extends ne{}class Ha extends Zo{}class qa extends Zo{}class fn extends ne{}class Xa extends fn{}class Qa extends fn{}class no extends ne{}class Ya extends no{}class Ja extends no{}class ei extends ne{}class Za extends ei{}class ac extends ei{}class ti extends ne{}class el extends ti{}class tl extends ti{}class sl extends ne{}class rl extends sl{}class is extends sl{}class si extends ne{}class nl extends si{}class ol extends si{}class ri extends ne{}class il extends ri{}class al extends ri{}class ni extends ne{}class ll extends ni{}class ul extends ni{}class oi extends ne{}class dl extends oi{}class cl extends oi{}class ii extends ne{}class pl extends ii{}class On extends ii{}class hl extends ne{forward_params=["input_ids","attention_mask","position_ids","past_key_values","pixel_values","image_grid_thw"]}class oo extends hl{get_rope_index(_,H,Te,ke){const{vision_config:Oe,image_token_id:st,video_token_id:rt,vision_start_token_id:ht}=this.config,kt=Oe.spatial_merge_size??2,Qt=[];if(H||Te){let Wt=_.tolist();ke||(ke=(0,b.ones_like)(_));const Dt=ke.tolist(),At=Array.from({length:3},Ms=>Array.from({length:_.dims[0]},es=>Array.from({length:_.dims[1]},Fs=>1))),bs=H?H.tolist():[],Gt=Te?Te.tolist():[];let Ut=0,ps=0;for(let Ms=0;Ms<Wt.length;++Ms){const es=Wt[Ms].filter((ys,$s)=>Dt[Ms][$s]==1),Bs=es.reduce((ys,$s,Wr)=>($s==ht&&ys.push(Wr),ys),[]).map(ys=>es[ys+1]),ks=Bs.filter(ys=>ys==st).length,Rs=Bs.filter(ys=>ys==rt).length;let Qs=[],ur=0,ra=ks,tr=Rs;for(let ys=0;ys<Bs.length;++ys){const $s=es.findIndex(($r,dr)=>dr>ur&&$r==st),Wr=es.findIndex(($r,dr)=>dr>ur&&$r==rt),sn=ra>0&&$s!==-1?$s:es.length+1,jn=tr>0&&Wr!==-1?Wr:es.length+1;let Wn,oa,ia,Hd;sn<jn?([oa,ia,Hd]=bs[Ut],++Ut,--ra,Wn=sn):([oa,ia,Hd]=Gt[ps],++ps,--tr,Wn=jn);const[up,Un,So]=[Number(oa),Math.floor(Number(ia)/kt),Math.floor(Number(Hd)/kt)],aa=Wn-ur,dp=Qs.length>0?(0,K.max)(Qs.at(-1))[0]+1:0;Qs.push(Array.from({length:3*aa},($r,dr)=>dp+dr%aa));const la=aa+dp,Vn=up*Un*So,qd=Array.from({length:Vn},($r,dr)=>la+Math.floor(dr/(Un*So))),rn=Array.from({length:Vn},($r,dr)=>la+Math.floor(dr/So)%Un),cp=Array.from({length:Vn},($r,dr)=>la+dr%So);Qs.push([qd,rn,cp].flat()),ur=Wn+Vn}if(ur<es.length){const ys=Qs.length>0?(0,K.max)(Qs.at(-1))[0]+1:0,$s=es.length-ur;Qs.push(Array.from({length:3*$s},(Wr,sn)=>ys+sn%$s))}const Sr=Qs.reduce((ys,$s)=>ys+$s.length,0),ko=new Array(Sr);let na=0;for(let ys=0;ys<3;++ys)for(let $s=0;$s<Qs.length;++$s){const Wr=Qs[$s],sn=Wr.length/3;for(let jn=ys*sn;jn<(ys+1)*sn;++jn)ko[na++]=Wr[jn]}let Rn=0;const Nn=Dt[Ms];for(let ys=0;ys<Nn.length;++ys)if(Nn[ys]==1){for(let $s=0;$s<3;++$s)At[$s][Ms][ys]=ko[$s*Sr/3+Rn];++Rn}const Kd=(0,K.max)(ko)[0];Qt.push(Kd+1-Wt[Ms].length)}return[new b.Tensor("int64",At.flat(1/0),[3,_.dims[0],_.dims[1]]),new b.Tensor("int64",Qt,[Qt.length,1])]}else if(ke){const{data:Wt,dims:Dt}=Z(ke),At=BigInt64Array.from({length:3*Wt.length},(Gt,Ut)=>Wt[Ut%Wt.length]),bs=Array.from({length:Dt[0]},(Gt,Ut)=>(0,K.max)(Wt.subarray(Dt[1]*Ut,Dt[1]*(Ut+1)))[0]+1n+BigInt(Dt[1]));return[new b.Tensor("int64",At,[3,...Dt]),new b.Tensor("int64",bs,[bs.length,1])]}else{const[Wt,Dt]=_.dims,At=BigInt64Array.from({length:3*Wt*Dt},(bs,Gt)=>BigInt(Math.floor(Gt%Dt/Wt)));return[new b.Tensor("int64",At,[3,..._.dims]),(0,b.zeros)([Wt,1])]}}async encode_image({pixel_values:_,image_grid_thw:H}){return(await ue(this.sessions.vision_encoder,{pixel_values:_,grid_thw:H})).image_features}_merge_input_ids_with_image_features(_){return ut({image_token_id:this.config.image_token_id,..._})}prepare_inputs_for_generation(_,H,Te){if(H.attention_mask&&!H.position_ids)if(!H.past_key_values)[H.position_ids,H.rope_deltas]=this.get_rope_index(H.input_ids,H.image_grid_thw,H.video_grid_thw,H.attention_mask);else{H.pixel_values=null;const ke=BigInt(Object.values(H.past_key_values)[0].dims.at(-2)),Oe=H.rope_deltas.map(st=>ke+st);H.position_ids=(0,b.stack)([Oe,Oe,Oe],0)}return H}}class ai extends ne{}class ml extends ai{}class _l extends ai{}class li extends ne{}class fl extends li{}class gl extends li{}class ui extends ne{}class wl extends ui{}class yl extends ui{}class di extends ne{}class Ml extends di{}class bl extends di{}class ci extends ne{}class vl extends ci{}class Tl extends ci{}class pi extends ne{}class hi extends pi{}class xl extends pi{async _call(_){return new Vt(await super._call(_))}}class io extends ne{}class mi extends io{}class Pl extends io{async _call(_){return new Vt(await super._call(_))}}class El extends ne{}class Cl extends El{}class _i extends ne{}class kl extends _i{}class Sl extends _i{async _call(_){return new Vt(await super._call(_))}}class fi extends ne{}class $l extends fi{}class gi extends ne{}class Al extends gi{}class lc extends gi{async _call(_){return new Vt(await super._call(_))}}class Il extends ne{}class Fl extends Il{}class lr extends ne{}class Ol extends lr{}class Dl extends lr{async _call(_){return new Vt(await super._call(_))}}class Ll extends ne{}class zl extends Ll{async _call(_){return new Gd(await super._call(_))}}class wi extends ne{}class Bl extends wi{}class Rl extends wi{async _call(_){return new Vt(await super._call(_))}}class yi extends ne{}class Nl extends yi{}class jl extends yi{async _call(_){return new Vt(await super._call(_))}}class Wl extends ne{}class Ul extends Wl{}class Vl extends Wl{}class Mi extends ne{}class Gl extends Mi{}class Kl extends Mi{}class bi extends ne{}class uc extends bi{}class Jr extends bi{async _call(_){return new Vt(await super._call(_))}}class Cr extends ne{}class Zr extends Cr{}class vi extends Cr{async _call(_){return new Ws(await super._call(_))}}class Rr extends Cr{async _call(_){return new Hl(await super._call(_))}}class Ws extends Xe{constructor({logits:_,pred_boxes:H}){super(),this.logits=_,this.pred_boxes=H}}class Hl extends Xe{constructor({logits:_,pred_boxes:H,pred_masks:Te}){super(),this.logits=_,this.pred_boxes=H,this.pred_masks=Te}}class ao extends ne{}class ql extends ao{}class dc extends ao{async _call(_){return new Dn(await super._call(_))}}class Dn extends Xe{constructor({logits:_,pred_boxes:H}){super(),this.logits=_,this.pred_boxes=H}}class lo extends ne{}class Ti extends lo{}class Xl extends lo{async _call(_){return new Ql(await super._call(_))}}class Ql extends Ws{}class uo extends ne{}class xi extends uo{}class Yl extends uo{async _call(_){return new Vt(await super._call(_))}}class co extends ne{}class Jl extends co{}class po extends co{async _call(_){return new Vt(await super._call(_))}}class ho extends ne{}class Zl extends ho{}class eu extends ho{async _call(_){return new Vt(await super._call(_))}}class tu extends ne{}class su extends tu{}class Pi extends tu{async _call(_){return new Vt(await super._call(_))}}class gn extends ne{}class ru extends gn{}class Ei extends gn{}class Ci extends ne{}class nu extends Ci{}class ou extends Ci{}class cc extends ne{}class iu extends cc{}class mo extends ne{}class pc extends mo{}class au extends mo{}class _o extends mo{}class lu extends ne{}class fo extends lu{}class go extends ne{}class ki extends go{}class uu extends go{}class Si extends ne{}class $i extends Si{}class hc extends Si{}class du extends ne{}class mc extends du{}class Ai extends ne{}class cu extends Ai{}class pu extends Ai{async _call(_){return new Vt(await super._call(_))}}class wo extends ne{}class hu extends wo{}class mu extends wo{async _call(_){return new Vt(await super._call(_))}}class yo extends ne{}class _u extends yo{}class fu extends yo{async _call(_){return new Vt(await super._call(_))}}class gu extends ne{}class wu extends gu{}class yu extends gu{async _call(_){return new Vt(await super._call(_))}}class Ii extends ne{}class _c extends Ii{}class Mu extends Ii{async _call(_){return new bu(await super._call(_))}}class bu extends Xe{constructor({logits:_,pred_boxes:H}){super(),this.logits=_,this.pred_boxes=H}}class vu extends ne{}class Tu extends vu{async get_image_embeddings({pixel_values:_}){return await Ge(this,{pixel_values:_})}async forward(_){if((!_.image_embeddings||!_.image_positional_embeddings)&&(_={..._,...await this.get_image_embeddings(_)}),!_.input_labels&&_.input_points){const Te=_.input_points.dims.slice(0,-1),ke=Te.reduce((Oe,st)=>Oe*st,1);_.input_labels=new b.Tensor("int64",new BigInt64Array(ke).fill(1n),Te)}const H={image_embeddings:_.image_embeddings,image_positional_embeddings:_.image_positional_embeddings};return _.input_points&&(H.input_points=_.input_points),_.input_labels&&(H.input_labels=_.input_labels),_.input_boxes&&(H.input_boxes=_.input_boxes),await ue(this.sessions.prompt_encoder_mask_decoder,H)}async _call(_){return new xu(await super._call(_))}}class xu extends Xe{constructor({iou_scores:_,pred_masks:H}){super(),this.iou_scores=_,this.pred_masks=H}}class Pu extends ne{}class Mo extends Pu{}class Ln extends Pu{}class bo extends ne{}class Eu extends bo{}class Cu extends bo{}class Nr extends ne{}class ku extends Nr{}class Fi extends Nr{async _call(_){return new tn(await super._call(_))}}class Su extends Nr{async _call(_){return new Vt(await super._call(_))}}class $u extends Nr{async _call(_){return new zs(await super._call(_))}}class Oi extends ne{}class fc extends Oi{}class Au extends Oi{async _call(_){return new zs(await super._call(_))}}class Di extends ne{}class Iu extends Di{}class vo extends ne{}class Fu extends vo{}class gc extends vo{async _call(_){return new tn(await super._call(_))}}class Ou extends vo{async _call(_){return new Vt(await super._call(_))}}class zn extends ne{}class wc extends zn{}class Du extends zn{async _call(_){return new tn(await super._call(_))}}class Lu extends zn{async _call(_){return new Vt(await super._call(_))}}class zu extends zn{async _call(_){return new zs(await super._call(_))}}class To extends ne{}class yc extends To{}class Bu extends To{async _call(_){return new tn(await super._call(_))}}class Ru extends To{async _call(_){return new Vt(await super._call(_))}}class Mc extends ne{}class bc extends Nr{}class Nu extends Nr{async _call(_){return new tn(await super._call(_))}}class ju extends Nr{async _call(_){return new Vt(await super._call(_))}}class wn extends ne{}class Wu extends wn{}class vc extends wn{async _call(_){return new tn(await super._call(_))}}class Uu extends wn{async _call(_){return new Vt(await super._call(_))}}class Vu extends wn{async _call(_){return new Vd(await super._call(_))}}class Gu extends wn{async _call(_){return new zs(await super._call(_))}}class xo extends ne{}class Sp extends xo{}class Ku extends xo{}class Hu extends xo{async generate_speech(_,H,{threshold:Te=.5,minlenratio:ke=0,maxlenratio:Oe=20,vocoder:st=null}={}){const rt={input_ids:_},{encoder_outputs:ht,encoder_attention_mask:kt}=await Ge(this,rt),Qt=ht.dims[1]/this.config.reduction_factor,Wt=Math.floor(Qt*Oe),Dt=Math.floor(Qt*ke),At=this.config.num_mel_bins;let bs=[],Gt=null,Ut=null,ps=0;for(;;){++ps;const Fs=ve(!!Ut);let Bs;Ut?Bs=Ut.output_sequence_out:Bs=new b.Tensor("float32",new Float32Array(At),[1,1,At]);let ks={use_cache_branch:Fs,output_sequence:Bs,encoder_attention_mask:kt,speaker_embeddings:H,encoder_hidden_states:ht};this.addPastKeyValues(ks,Gt),Ut=await ue(this.sessions.decoder_model_merged,ks),Gt=this.getPastKeyValues(Ut,Gt);const{prob:Rs,spectrum:Qs}=Ut;if(bs.push(Qs),ps>=Dt&&(Array.from(Rs.data).filter(ur=>ur>=Te).length>0||ps>=Wt))break}const Ms=(0,b.cat)(bs),{waveform:es}=await ue(st.sessions.model,{spectrogram:Ms});return{spectrogram:Ms,waveform:es}}}class qu extends ne{main_input_name="spectrogram"}class Xu extends ne{}class Tc extends Xu{}class gr extends ne{}class kr extends gr{}class en extends gr{}class jr extends ne{}class Qu extends jr{}class Yu extends jr{}class Li extends ne{}class Ju extends Li{}class Zu extends Li{}class Po extends ne{}class ed extends Po{}class td extends Po{static async from_pretrained(_,H={}){return super.from_pretrained(_,{...H,model_file_name:H.model_file_name??"text_model"})}}class sd extends Po{static async from_pretrained(_,H={}){return super.from_pretrained(_,{...H,model_file_name:H.model_file_name??"audio_model"})}}class rd extends ne{}class nd extends rd{async _call(_){return new sa(await super._call(_))}}class Us extends ne{}class xc extends Us{}class od extends Us{}class zi extends Us{}class Bi extends ne{}class Bn extends Bi{}class id extends Bi{}class Ri extends ne{}class ad extends Ri{}class ld extends Ri{async _call(_){return new Vt(await super._call(_))}}class Ni extends ne{}class Pc extends Ni{}class ud extends Ni{}class ji extends ne{forward_params=["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"];_apply_and_filter_by_delay_pattern_mask(_){const[H,Te]=_.dims,ke=this.config.decoder.num_codebooks,Oe=Te-ke;let st=0;for(let kt=0;kt<_.size;++kt){if(_.data[kt]===this.config.decoder.pad_token_id)continue;const Qt=kt%Te,Wt=Math.floor(kt/Te)%ke,Dt=Qt-Wt;Dt>0&&Dt<=Oe&&(_.data[st++]=_.data[kt])}const rt=Math.floor(H/ke),ht=st/(rt*ke);return new b.Tensor(_.type,_.data.slice(0,st),[rt,ke,ht])}prepare_inputs_for_generation(_,H,Te){let ke=structuredClone(_);for(let st=0;st<ke.length;++st)for(let rt=0;rt<ke[st].length;++rt)st%this.config.decoder.num_codebooks>=rt&&(ke[st][rt]=BigInt(this.config.decoder.pad_token_id));return Te.guidance_scale!==null&&Te.guidance_scale>1&&(ke=ke.concat(ke)),super.prepare_inputs_for_generation(ke,H,Te)}async generate(_){const H=await super.generate(_),Te=this._apply_and_filter_by_delay_pattern_mask(H).unsqueeze_(0),{audio_values:ke}=await ue(this.sessions.encodec_decode,{audio_codes:Te});return ke}}class Wi extends ne{}class dd extends Wi{}class cd extends Wi{async _call(_){return new Vt(await super._call(_))}}class Ui extends ne{}class Vi extends Ui{}class pd extends Ui{async _call(_){return new Vt(await super._call(_))}}class hd extends ne{}class Gi extends hd{}class md extends hd{async _call(_){return new Vt(await super._call(_))}}class Ki extends ne{}class _d extends Ki{}class Ec extends Ki{async _call(_){return new Vt(await super._call(_))}}class fd extends ne{}class gd extends fd{}class wd extends ne{}class Cc extends wd{forward_params=["input_ids","pixel_values","images_seq_mask","images_emb_mask","attention_mask","position_ids","past_key_values"];constructor(..._){super(..._),this._generation_mode="text"}async forward(_){const H=this._generation_mode??"text";let Te;if(H==="text"||!_.past_key_values){const ht=this.sessions.prepare_inputs_embeds,kt=(0,j.pick)(_,ht.inputNames);Te=await ue(ht,kt)}else{const ht=this.sessions.gen_img_embeds,kt=(0,j.pick)({image_ids:_.input_ids},ht.inputNames);Te=await ue(ht,kt)}const ke={..._,...Te},Oe=await Re(this,ke),st=this.sessions[H==="text"?"lm_head":"gen_head"];if(!st)throw new Error(`Unable to find "${st}" generation head`);const rt=await ue(st,(0,j.pick)(Oe,st.inputNames));return{...Te,...Oe,...rt}}async generate(_){return this._generation_mode="text",super.generate(_)}async generate_images(_){this._generation_mode="image";const H=(_.inputs??_[this.main_input_name]).dims[1],ke=(await super.generate(_)).slice(null,[H,null]),Oe=this.sessions.image_decode,{decoded_image:st}=await ue(Oe,{generated_tokens:ke}),rt=st.add_(1).mul_(255/2).clamp_(0,255).to("uint8"),ht=[];for(const kt of rt){const Qt=z.RawImage.fromTensor(kt);ht.push(Qt)}return ht}}class yd extends Xe{constructor({char_logits:_,bpe_logits:H,wp_logits:Te}){super(),this.char_logits=_,this.bpe_logits=H,this.wp_logits=Te}get logits(){return[this.char_logits,this.bpe_logits,this.wp_logits]}}class Md extends ne{}class kc extends Md{async _call(_){return new yd(await super._call(_))}}class Hi extends ne{}class bd extends Hi{}class vd extends Hi{}class qi extends ne{}class Td extends qi{}class Sc extends qi{}class fs{static MODEL_CLASS_MAPPINGS=null;static BASE_IF_FAIL=!1;static async from_pretrained(_,{progress_callback:H=null,config:Te=null,cache_dir:ke=null,local_files_only:Oe=!1,revision:st="main",model_file_name:rt=null,subfolder:ht="onnx",device:kt=null,dtype:Qt=null,use_external_data_format:Wt=null,session_options:Dt={}}={}){const At={progress_callback:H,config:Te,cache_dir:ke,local_files_only:Oe,revision:st,model_file_name:rt,subfolder:ht,device:kt,dtype:Qt,use_external_data_format:Wt,session_options:Dt};if(At.config=await w.AutoConfig.from_pretrained(_,At),!this.MODEL_CLASS_MAPPINGS)throw new Error("`MODEL_CLASS_MAPPINGS` not implemented for this type of `AutoClass`: "+this.name);for(const bs of this.MODEL_CLASS_MAPPINGS){const Gt=bs.get(At.config.model_type);if(Gt)return await Gt[1].from_pretrained(_,At)}if(this.BASE_IF_FAIL)return console.warn(`Unknown model class "${At.config.model_type}", attempting to construct from base class.`),await ne.from_pretrained(_,At);throw Error(`Unsupported model type: ${At.config.model_type}`)}}const $c=new Map([["bert",["BertModel",Me]],["modernbert",["ModernBertModel",ot]],["nomic_bert",["NomicBertModel",oe]],["roformer",["RoFormerModel",_e]],["electra",["ElectraModel",Ss]],["esm",["EsmModel",En]],["convbert",["ConvBertModel",vt]],["camembert",["CamembertModel",Bt]],["deberta",["DebertaModel",Pr]],["deberta-v2",["DebertaV2Model",pt]],["mpnet",["MPNetModel",Lt]],["albert",["AlbertModel",hn]],["distilbert",["DistilBertModel",Tn]],["roberta",["RobertaModel",cs]],["xlm",["XLMModel",Le]],["xlm-roberta",["XLMRobertaModel",Ht]],["clap",["ClapModel",ed]],["clip",["CLIPModel",ka]],["clipseg",["CLIPSegModel",Da]],["chinese_clip",["ChineseCLIPModel",Aa]],["siglip",["SiglipModel",$a]],["jina_clip",["JinaCLIPModel",Ia]],["mobilebert",["MobileBertModel",un]],["squeezebert",["SqueezeBertModel",$n]],["wav2vec2",["Wav2Vec2Model",ku]],["wav2vec2-bert",["Wav2Vec2BertModel",yc]],["unispeech",["UniSpeechModel",Fu]],["unispeech-sat",["UniSpeechSatModel",wc]],["hubert",["HubertModel",bc]],["wavlm",["WavLMModel",Wu]],["audio-spectrogram-transformer",["ASTModel",ga]],["vits",["VitsModel",nd]],["pyannote",["PyAnnoteModel",fc]],["wespeaker-resnet",["WeSpeakerResNetModel",Iu]],["detr",["DetrModel",Zr]],["rt_detr",["RTDetrModel",ql]],["table-transformer",["TableTransformerModel",Ti]],["vit",["ViTModel",hi]],["ijepa",["IJepaModel",mi]],["pvt",["PvtModel",kl]],["vit_msn",["ViTMSNModel",Al]],["vit_mae",["ViTMAEModel",$l]],["groupvit",["GroupViTModel",Fl]],["fastvit",["FastViTModel",Ol]],["mobilevit",["MobileViTModel",Bl]],["mobilevitv2",["MobileViTV2Model",Nl]],["owlvit",["OwlViTModel",Ul]],["owlv2",["Owlv2Model",Gl]],["beit",["BeitModel",uc]],["deit",["DeiTModel",xi]],["hiera",["HieraModel",Jl]],["convnext",["ConvNextModel",cu]],["convnextv2",["ConvNextV2Model",hu]],["dinov2",["Dinov2Model",_u]],["dinov2_with_registers",["Dinov2WithRegistersModel",wu]],["resnet",["ResNetModel",Zl]],["swin",["SwinModel",su]],["swin2sr",["Swin2SRModel",ru]],["donut-swin",["DonutSwinModel",mc]],["yolos",["YolosModel",_c]],["dpt",["DPTModel",nu]],["glpn",["GLPNModel",$i]],["hifigan",["SpeechT5HifiGan",qu]],["efficientnet",["EfficientNetModel",ad]],["decision_transformer",["DecisionTransformerModel",gd]],["patchtst",["PatchTSTForPrediction",bd]],["patchtsmixer",["PatchTSMixerForPrediction",Td]],["mobilenet_v1",["MobileNetV1Model",dd]],["mobilenet_v2",["MobileNetV2Model",Vi]],["mobilenet_v3",["MobileNetV3Model",Gi]],["mobilenet_v4",["MobileNetV4Model",_d]],["maskformer",["MaskFormerModel",ki]],["mgp-str",["MgpstrForSceneTextRecognition",kc]]]),Ac=new Map([["t5",["T5Model",M]],["longt5",["LongT5Model",ge]],["mt5",["MT5Model",_t]],["bart",["BartModel",Ye]],["mbart",["MBartModel",Ce]],["marian",["MarianModel",Mo]],["whisper",["WhisperModel",wa]],["m2m_100",["M2M100Model",Eu]],["blenderbot",["BlenderbotModel",Nt]],["blenderbot-small",["BlenderbotSmallModel",Zt]]]),Ic=new Map([["bloom",["BloomModel",wl]],["jais",["JAISModel",Ba]],["gpt2",["GPT2Model",za]],["gptj",["GPTJModel",Xo]],["gpt_bigcode",["GPTBigCodeModel",Va]],["gpt_neo",["GPTNeoModel",Na]],["gpt_neox",["GPTNeoXModel",Wa]],["codegen",["CodeGenModel",Ka]],["llama",["LlamaModel",Ha]],["exaone",["ExaoneModel",Xa]],["olmo",["OlmoModel",Za]],["olmo2",["Olmo2Model",el]],["mobilellm",["MobileLLMModel",Ya]],["granite",["GraniteModel",rl]],["cohere",["CohereModel",nl]],["gemma",["GemmaModel",il]],["gemma2",["Gemma2Model",ll]],["openelm",["OpenELMModel",dl]],["qwen2",["Qwen2Model",pl]],["phi",["PhiModel",ml]],["phi3",["Phi3Model",fl]],["mpt",["MptModel",Ml]],["opt",["OPTModel",vl]],["mistral",["MistralModel",kr]],["starcoder2",["Starcoder2Model",Qu]],["falcon",["FalconModel",Ju]],["stablelm",["StableLmModel",Bn]]]),Xi=new Map([["speecht5",["SpeechT5ForSpeechToText",Ku]],["whisper",["WhisperForConditionalGeneration",Br]],["moonshine",["MoonshineForConditionalGeneration",ya]]]),xd=new Map([["speecht5",["SpeechT5ForTextToSpeech",Hu]]]),Pd=new Map([["vits",["VitsModel",nd]],["musicgen",["MusicgenForConditionalGeneration",ji]]]),Ed=new Map([["bert",["BertForSequenceClassification",Ne]],["modernbert",["ModernBertForSequenceClassification",lt]],["roformer",["RoFormerForSequenceClassification",He]],["electra",["ElectraForSequenceClassification",sr]],["esm",["EsmForSequenceClassification",Lr]],["convbert",["ConvBertForSequenceClassification",ts]],["camembert",["CamembertForSequenceClassification",Tr]],["deberta",["DebertaForSequenceClassification",Er]],["deberta-v2",["DebertaV2ForSequenceClassification",ds]],["mpnet",["MPNetForSequenceClassification",Cn]],["albert",["AlbertForSequenceClassification",In]],["distilbert",["DistilBertForSequenceClassification",Yn]],["roberta",["RobertaForSequenceClassification",Is]],["xlm",["XLMForSequenceClassification",Zs]],["xlm-roberta",["XLMRobertaForSequenceClassification",Do]],["bart",["BartForSequenceClassification",Xt]],["mbart",["MBartForSequenceClassification",Vs]],["mobilebert",["MobileBertForSequenceClassification",dn]],["squeezebert",["SqueezeBertForSequenceClassification",An]]]),Cd=new Map([["bert",["BertForTokenClassification",Ve]],["modernbert",["ModernBertForTokenClassification",dt]],["roformer",["RoFormerForTokenClassification",et]],["electra",["ElectraForTokenClassification",Ur]],["esm",["EsmForTokenClassification",yr]],["convbert",["ConvBertForTokenClassification",xs]],["camembert",["CamembertForTokenClassification",Or]],["deberta",["DebertaForTokenClassification",Gr]],["deberta-v2",["DebertaV2ForTokenClassification",Kr]],["mpnet",["MPNetForTokenClassification",kn]],["distilbert",["DistilBertForTokenClassification",xn]],["roberta",["RobertaForTokenClassification",Gs]],["xlm",["XLMForTokenClassification",Qr]],["xlm-roberta",["XLMRobertaForTokenClassification",_a]]]),kd=new Map([["t5",["T5ForConditionalGeneration",Y]],["longt5",["LongT5ForConditionalGeneration",Ie]],["mt5",["MT5ForConditionalGeneration",wt]],["bart",["BartForConditionalGeneration",It]],["mbart",["MBartForConditionalGeneration",Es]],["marian",["MarianMTModel",Ln]],["m2m_100",["M2M100ForConditionalGeneration",Cu]],["blenderbot",["BlenderbotForConditionalGeneration",Ls]],["blenderbot-small",["BlenderbotSmallForConditionalGeneration",ls]]]),yn=new Map([["bloom",["BloomForCausalLM",yl]],["gpt2",["GPT2LMHeadModel",fr]],["jais",["JAISLMHeadModel",Ra]],["gptj",["GPTJForCausalLM",Qo]],["gpt_bigcode",["GPTBigCodeForCausalLM",Jo]],["gpt_neo",["GPTNeoForCausalLM",ja]],["gpt_neox",["GPTNeoXForCausalLM",Ua]],["codegen",["CodeGenForCausalLM",ro]],["llama",["LlamaForCausalLM",qa]],["exaone",["ExaoneForCausalLM",Qa]],["olmo",["OlmoForCausalLM",ac]],["olmo2",["Olmo2ForCausalLM",tl]],["mobilellm",["MobileLLMForCausalLM",Ja]],["granite",["GraniteForCausalLM",is]],["cohere",["CohereForCausalLM",ol]],["gemma",["GemmaForCausalLM",al]],["gemma2",["Gemma2ForCausalLM",ul]],["openelm",["OpenELMForCausalLM",cl]],["qwen2",["Qwen2ForCausalLM",On]],["phi",["PhiForCausalLM",_l]],["phi3",["Phi3ForCausalLM",gl]],["mpt",["MptForCausalLM",bl]],["opt",["OPTForCausalLM",Tl]],["mbart",["MBartForCausalLM",Ns]],["mistral",["MistralForCausalLM",en]],["starcoder2",["Starcoder2ForCausalLM",Yu]],["falcon",["FalconForCausalLM",Zu]],["trocr",["TrOCRForCausalLM",Tc]],["stablelm",["StableLmForCausalLM",id]],["phi3_v",["Phi3VForCausalLM",jo]]]),Sd=new Map([["multi_modality",["MultiModalityCausalLM",Cc]]]),Qi=new Map([["bert",["BertForMaskedLM",je]],["modernbert",["ModernBertForMaskedLM",gt]],["roformer",["RoFormerForMaskedLM",Se]],["electra",["ElectraForMaskedLM",Hs]],["esm",["EsmForMaskedLM",Jn]],["convbert",["ConvBertForMaskedLM",Yt]],["camembert",["CamembertForMaskedLM",Vr]],["deberta",["DebertaForMaskedLM",cr]],["deberta-v2",["DebertaV2ForMaskedLM",St]],["mpnet",["MPNetForMaskedLM",cn]],["albert",["AlbertForMaskedLM",Fn]],["distilbert",["DistilBertForMaskedLM",Pn]],["roberta",["RobertaForMaskedLM",br]],["xlm",["XLMWithLMHeadModel",ft]],["xlm-roberta",["XLMRobertaForMaskedLM",ma]],["mobilebert",["MobileBertForMaskedLM",qr]],["squeezebert",["SqueezeBertForMaskedLM",pn]]]),Yi=new Map([["bert",["BertForQuestionAnswering",Be]],["roformer",["RoFormerForQuestionAnswering",it]],["electra",["ElectraForQuestionAnswering",Fr]],["convbert",["ConvBertForQuestionAnswering",ms]],["camembert",["CamembertForQuestionAnswering",xr]],["deberta",["DebertaForQuestionAnswering",nr]],["deberta-v2",["DebertaV2ForQuestionAnswering",rs]],["mpnet",["MPNetForQuestionAnswering",Sn]],["albert",["AlbertForQuestionAnswering",mn]],["distilbert",["DistilBertForQuestionAnswering",Hr]],["roberta",["RobertaForQuestionAnswering",Mt]],["xlm",["XLMForQuestionAnswering",Zn]],["xlm-roberta",["XLMRobertaForQuestionAnswering",fa]],["mobilebert",["MobileBertForQuestionAnswering",Xr]],["squeezebert",["SqueezeBertForQuestionAnswering",ns]]]),Eo=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",Ro]],["idefics3",["Idefics3ForConditionalGeneration",No]]]),Fc=new Map([["llava",["LlavaForConditionalGeneration",eo]],["llava_onevision",["LlavaOnevisionForConditionalGeneration",ba]],["moondream1",["Moondream1ForConditionalGeneration",va]],["florence2",["Florence2ForConditionalGeneration",xa]],["qwen2-vl",["Qwen2VLForConditionalGeneration",oo]],["idefics3",["Idefics3ForConditionalGeneration",No]],["paligemma",["PaliGemmaForConditionalGeneration",Pa]]]),Oc=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",Ro]]]),Ji=new Map([["vit",["ViTForImageClassification",xl]],["ijepa",["IJepaForImageClassification",Pl]],["pvt",["PvtForImageClassification",Sl]],["vit_msn",["ViTMSNForImageClassification",lc]],["fastvit",["FastViTForImageClassification",Dl]],["mobilevit",["MobileViTForImageClassification",Rl]],["mobilevitv2",["MobileViTV2ForImageClassification",jl]],["beit",["BeitForImageClassification",Jr]],["deit",["DeiTForImageClassification",Yl]],["hiera",["HieraForImageClassification",po]],["convnext",["ConvNextForImageClassification",pu]],["convnextv2",["ConvNextV2ForImageClassification",mu]],["dinov2",["Dinov2ForImageClassification",fu]],["dinov2_with_registers",["Dinov2WithRegistersForImageClassification",yu]],["resnet",["ResNetForImageClassification",eu]],["swin",["SwinForImageClassification",Pi]],["segformer",["SegformerForImageClassification",od]],["efficientnet",["EfficientNetForImageClassification",ld]],["mobilenet_v1",["MobileNetV1ForImageClassification",cd]],["mobilenet_v2",["MobileNetV2ForImageClassification",pd]],["mobilenet_v3",["MobileNetV3ForImageClassification",md]],["mobilenet_v4",["MobileNetV4ForImageClassification",Ec]]]),Zi=new Map([["detr",["DetrForObjectDetection",vi]],["rt_detr",["RTDetrForObjectDetection",dc]],["table-transformer",["TableTransformerForObjectDetection",Xl]],["yolos",["YolosForObjectDetection",Mu]]]),$d=new Map([["owlvit",["OwlViTForObjectDetection",Vl]],["owlv2",["Owlv2ForObjectDetection",Kl]]]),Ad=new Map([["detr",["DetrForSegmentation",Rr]],["clipseg",["CLIPSegForImageSegmentation",La]]]),ea=new Map([["segformer",["SegformerForSemanticSegmentation",zi]],["sapiens",["SapiensForSemanticSegmentation",pc]]]),Id=new Map([["detr",["DetrForSegmentation",Rr]],["maskformer",["MaskFormerForInstanceSegmentation",uu]]]),Fd=new Map([["sam",["SamModel",Tu]]]),ta=new Map([["wav2vec2",["Wav2Vec2ForCTC",Fi]],["wav2vec2-bert",["Wav2Vec2BertForCTC",Bu]],["unispeech",["UniSpeechForCTC",gc]],["unispeech-sat",["UniSpeechSatForCTC",Du]],["wavlm",["WavLMForCTC",vc]],["hubert",["HubertForCTC",Nu]]]),Od=new Map([["wav2vec2",["Wav2Vec2ForSequenceClassification",Su]],["wav2vec2-bert",["Wav2Vec2BertForSequenceClassification",Ru]],["unispeech",["UniSpeechForSequenceClassification",Ou]],["unispeech-sat",["UniSpeechSatForSequenceClassification",Lu]],["wavlm",["WavLMForSequenceClassification",Uu]],["hubert",["HubertForSequenceClassification",ju]],["audio-spectrogram-transformer",["ASTForAudioClassification",er]]]),Dd=new Map([["wavlm",["WavLMForXVector",Vu]]]),Ld=new Map([["unispeech-sat",["UniSpeechSatForAudioFrameClassification",zu]],["wavlm",["WavLMForAudioFrameClassification",Gu]],["wav2vec2",["Wav2Vec2ForAudioFrameClassification",$u]],["pyannote",["PyAnnoteForAudioFrameClassification",Au]]]),zd=new Map([["vitmatte",["VitMatteForImageMatting",zl]]]),$p=new Map([["patchtst",["PatchTSTForPrediction",vd]],["patchtsmixer",["PatchTSMixerForPrediction",Sc]]]),Bd=new Map([["swin2sr",["Swin2SRForImageSuperResolution",Ei]]]),Rd=new Map([["dpt",["DPTForDepthEstimation",ou]],["depth_anything",["DepthAnythingForDepthEstimation",iu]],["glpn",["GLPNForDepthEstimation",hc]],["sapiens",["SapiensForDepthEstimation",au]],["depth_pro",["DepthProForDepthEstimation",fo]]]),Nd=new Map([["sapiens",["SapiensForNormalEstimation",_o]]]),jd=new Map([["vitpose",["VitPoseForPoseEstimation",Cl]]]),Dc=new Map([["clip",["CLIPVisionModelWithProjection",ic]],["siglip",["SiglipVisionModel",Wo]],["jina_clip",["JinaCLIPVisionModel",Oa]]]),Wd=[[$c,I.EncoderOnly],[Ac,I.EncoderDecoder],[Ic,I.DecoderOnly],[Ed,I.EncoderOnly],[Cd,I.EncoderOnly],[kd,I.Seq2Seq],[Xi,I.Seq2Seq],[yn,I.DecoderOnly],[Sd,I.MultiModality],[Qi,I.EncoderOnly],[Yi,I.EncoderOnly],[Eo,I.Vision2Seq],[Fc,I.ImageTextToText],[Ji,I.EncoderOnly],[Ad,I.EncoderOnly],[Id,I.EncoderOnly],[ea,I.EncoderOnly],[zd,I.EncoderOnly],[$p,I.EncoderOnly],[Bd,I.EncoderOnly],[Rd,I.EncoderOnly],[Nd,I.EncoderOnly],[jd,I.EncoderOnly],[Zi,I.EncoderOnly],[$d,I.EncoderOnly],[Fd,I.MaskGeneration],[ta,I.EncoderOnly],[Od,I.EncoderOnly],[xd,I.Seq2Seq],[Pd,I.EncoderOnly],[Dd,I.EncoderOnly],[Ld,I.EncoderOnly],[Dc,I.EncoderOnly]];for(const[f,_]of Wd)for(const[H,Te]of f.values())$.set(H,_),C.set(Te,H),g.set(H,Te);const Lc=[["MusicgenForConditionalGeneration",ji,I.Musicgen],["Phi3VForCausalLM",jo,I.Phi3V],["CLIPTextModelWithProjection",Sa,I.EncoderOnly],["SiglipTextModel",to,I.EncoderOnly],["JinaCLIPTextModel",Fa,I.EncoderOnly],["ClapTextModelWithProjection",td,I.EncoderOnly],["ClapAudioModelWithProjection",sd,I.EncoderOnly]];for(const[f,_,H]of Lc)$.set(f,H),C.set(_,f),g.set(f,_);class zc extends fs{static MODEL_CLASS_MAPPINGS=Wd.map(_=>_[0]);static BASE_IF_FAIL=!0}class Ap extends fs{static MODEL_CLASS_MAPPINGS=[Ed]}class Bc extends fs{static MODEL_CLASS_MAPPINGS=[Cd]}class Rc extends fs{static MODEL_CLASS_MAPPINGS=[kd]}class Nc extends fs{static MODEL_CLASS_MAPPINGS=[Xi]}class jc extends fs{static MODEL_CLASS_MAPPINGS=[xd]}class Ip extends fs{static MODEL_CLASS_MAPPINGS=[Pd]}class Wc extends fs{static MODEL_CLASS_MAPPINGS=[yn]}class Uc extends fs{static MODEL_CLASS_MAPPINGS=[Qi]}class Vc extends fs{static MODEL_CLASS_MAPPINGS=[Yi]}class Gc extends fs{static MODEL_CLASS_MAPPINGS=[Eo]}class Kc extends fs{static MODEL_CLASS_MAPPINGS=[Ji]}class Hc extends fs{static MODEL_CLASS_MAPPINGS=[Ad]}class qc extends fs{static MODEL_CLASS_MAPPINGS=[ea]}class Xc extends fs{static MODEL_CLASS_MAPPINGS=[Id]}class Qc extends fs{static MODEL_CLASS_MAPPINGS=[Zi]}class Yc extends fs{static MODEL_CLASS_MAPPINGS=[$d]}class Jc extends fs{static MODEL_CLASS_MAPPINGS=[Fd]}class Ud extends fs{static MODEL_CLASS_MAPPINGS=[ta]}class Zc extends fs{static MODEL_CLASS_MAPPINGS=[Od]}class ep extends fs{static MODEL_CLASS_MAPPINGS=[Dd]}class tp extends fs{static MODEL_CLASS_MAPPINGS=[Ld]}class sp extends fs{static MODEL_CLASS_MAPPINGS=[Oc]}class rp extends fs{static MODEL_CLASS_MAPPINGS=[zd]}class np extends fs{static MODEL_CLASS_MAPPINGS=[Bd]}class op extends fs{static MODEL_CLASS_MAPPINGS=[Rd]}class Fp extends fs{static MODEL_CLASS_MAPPINGS=[Nd]}class ip extends fs{static MODEL_CLASS_MAPPINGS=[jd]}class ap extends fs{static MODEL_CLASS_MAPPINGS=[Dc]}class lp extends Xe{constructor({logits:_,past_key_values:H,encoder_outputs:Te,decoder_attentions:ke=null,cross_attentions:Oe=null}){super(),this.logits=_,this.past_key_values=H,this.encoder_outputs=Te,this.decoder_attentions=ke,this.cross_attentions=Oe}}class Vt extends Xe{constructor({logits:_,...H}){super(),this.logits=_;const Te=Object.values(H);Te.length>0&&(this.attentions=Te)}}class Vd extends Xe{constructor({logits:_,embeddings:H}){super(),this.logits=_,this.embeddings=H}}class zs extends Xe{constructor({logits:_}){super(),this.logits=_}}class js extends Xe{constructor({logits:_}){super(),this.logits=_}}class Xs extends Xe{constructor({start_logits:_,end_logits:H}){super(),this.start_logits=_,this.end_logits=H}}class tn extends Xe{constructor({logits:_}){super(),this.logits=_}}class Co extends Xe{constructor({logits:_,past_key_values:H}){super(),this.logits=_,this.past_key_values=H}}class Gd extends Xe{constructor({alphas:_}){super(),this.alphas=_}}class sa extends Xe{constructor({waveform:_,spectrogram:H}){super(),this.waveform=_,this.spectrogram=H}}},"./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js":(Ae,F,r)=>{r.r(F),r.d(F,{ASTFeatureExtractor:()=>W});var w=r("./src/base/feature_extraction_utils.js");r("./src/utils/tensor.js");var D=r("./src/utils/audio.js");class W extends w.FeatureExtractor{constructor(j){super(j);const y=this.config.sampling_rate,P=(0,D.mel_filter_bank)(256,this.config.num_mel_bins,20,Math.floor(y/2),y,null,"kaldi",!0);for(let v=0;v<P.length;++v)P[v].push(0);this.mel_filters=P,this.window=(0,D.window_function)(400,"hann",{periodic:!1}),this.mean=this.config.mean,this.std=this.config.std}async _extract_fbank_features(j,y){return(0,D.spectrogram)(j,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:y,transpose:!0})}async _call(j){(0,w.validate_audio_inputs)(j,"ASTFeatureExtractor");const y=await this._extract_fbank_features(j,this.config.max_length);if(this.config.do_normalize){const P=this.std*2,v=y.data;for(let T=0;T<v.length;++T)v[T]=(v[T]-this.mean)/P}return{input_values:y.unsqueeze_(0)}}}},"./src/models/auto/feature_extraction_auto.js":(Ae,F,r)=>{r.r(F),r.d(F,{AutoFeatureExtractor:()=>te});var w=r("./src/utils/constants.js"),D=r("./src/utils/hub.js");r("./src/base/feature_extraction_utils.js");var W=r("./src/models/feature_extractors.js");class te{static async from_pretrained(y,P={}){const v=await(0,D.getModelJSON)(y,w.FEATURE_EXTRACTOR_NAME,!0,P),T=v.feature_extractor_type,b=W[T];if(!b)throw new Error(`Unknown feature_extractor_type: '${T}'. Please report this at ${w.GITHUB_ISSUE_URL}.`);return new b(v)}}},"./src/models/auto/image_processing_auto.js":(Ae,F,r)=>{r.r(F),r.d(F,{AutoImageProcessor:()=>j});var w=r("./src/utils/constants.js"),D=r("./src/utils/hub.js"),W=r("./src/base/image_processors_utils.js"),te=r("./src/models/image_processors.js");class j{static async from_pretrained(P,v={}){const T=await(0,D.getModelJSON)(P,w.IMAGE_PROCESSOR_NAME,!0,v),b=T.image_processor_type??T.feature_extractor_type;let z=te[b];return z||(b!==void 0&&console.warn(`Image processor type '${b}' not found, assuming base ImageProcessor. Please report this at ${w.GITHUB_ISSUE_URL}.`),z=W.ImageProcessor),new z(T)}}},"./src/models/auto/processing_auto.js":(Ae,F,r)=>{r.r(F),r.d(F,{AutoProcessor:()=>P});var w=r("./src/utils/constants.js"),D=r("./src/utils/hub.js"),W=r("./src/base/processing_utils.js"),te=r("./src/models/processors.js"),j=r("./src/models/image_processors.js"),y=r("./src/models/feature_extractors.js");class P{static async from_pretrained(T,b={}){const z=await(0,D.getModelJSON)(T,w.IMAGE_PROCESSOR_NAME,!0,b),{image_processor_type:K,feature_extractor_type:re,processor_class:ae}=z;if(ae&&te[ae])return te[ae].from_pretrained(T,b);if(!K&&!re)throw new Error("No `image_processor_type` or `feature_extractor_type` found in the config.");const B={};if(K){const X=j[K];if(!X)throw new Error(`Unknown image_processor_type: '${K}'.`);B.image_processor=new X(z)}if(re){const X=j[re];if(X)B.image_processor=new X(z);else{const I=y[re];if(!I)throw new Error(`Unknown feature_extractor_type: '${re}'.`);B.feature_extractor=new I(z)}}const G={};return new W.Processor(G,B)}}},"./src/models/beit/image_processing_beit.js":(Ae,F,r)=>{r.r(F),r.d(F,{BeitFeatureExtractor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{}},"./src/models/bit/image_processing_bit.js":(Ae,F,r)=>{r.r(F),r.d(F,{BitImageProcessor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{}},"./src/models/chinese_clip/image_processing_chinese_clip.js":(Ae,F,r)=>{r.r(F),r.d(F,{ChineseCLIPFeatureExtractor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{}},"./src/models/clap/feature_extraction_clap.js":(Ae,F,r)=>{r.r(F),r.d(F,{ClapFeatureExtractor:()=>W});var w=r("./src/base/feature_extraction_utils.js");r("./src/utils/tensor.js");var D=r("./src/utils/audio.js");class W extends w.FeatureExtractor{constructor(j){super(j),this.mel_filters=(0,D.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,null,"htk"),this.mel_filters_slaney=(0,D.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,"slaney","slaney"),this.window=(0,D.window_function)(this.config.fft_window_size,"hann")}async _get_input_mel(j,y,P,v){let T;const b=j.length-y;if(b>0)if(P==="rand_trunc"){const z=Math.floor(Math.random()*(b+1));j=j.subarray(z,z+y),T=await this._extract_fbank_features(j,this.mel_filters_slaney,this.config.nb_max_samples)}else throw new Error(`Truncation strategy "${P}" not implemented`);else{if(b<0){let z=new Float64Array(y);if(z.set(j),v==="repeat")for(let K=j.length;K<y;K+=j.length)z.set(j.subarray(0,Math.min(j.length,y-K)),K);else if(v==="repeatpad")for(let K=j.length;K<-b;K+=j.length)z.set(j,K);j=z}if(P==="fusion")throw new Error(`Truncation strategy "${P}" not implemented`);T=await this._extract_fbank_features(j,this.mel_filters_slaney,this.config.nb_max_samples)}return T.unsqueeze_(0)}async _extract_fbank_features(j,y,P=null){return(0,D.spectrogram)(j,this.window,this.config.fft_window_size,this.config.hop_length,{power:2,mel_filters:y,log_mel:"dB",max_num_frames:P,do_pad:!1,transpose:!0})}async _call(j,{max_length:y=null}={}){return(0,w.validate_audio_inputs)(j,"ClapFeatureExtractor"),{input_features:(await this._get_input_mel(j,y??this.config.nb_max_samples,this.config.truncation,this.config.padding)).unsqueeze_(0)}}}},"./src/models/clip/image_processing_clip.js":(Ae,F,r)=>{r.r(F),r.d(F,{CLIPFeatureExtractor:()=>W,CLIPImageProcessor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{}class W extends D{}},"./src/models/convnext/image_processing_convnext.js":(Ae,F,r)=>{r.r(F),r.d(F,{ConvNextFeatureExtractor:()=>W,ConvNextImageProcessor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{constructor(j){super(j),this.crop_pct=this.config.crop_pct??.875}async resize(j){const y=this.size?.shortest_edge;if(y===void 0)throw new Error("Size dictionary must contain 'shortest_edge' key.");if(y<384){const P=Math.floor(y/this.crop_pct),[v,T]=this.get_resize_output_image_size(j,{shortest_edge:P});j=await j.resize(v,T,{resample:this.resample}),j=await j.center_crop(y,y)}else j=await j.resize(y,y,{resample:this.resample});return j}}class W extends D{}},"./src/models/deit/image_processing_deit.js":(Ae,F,r)=>{r.r(F),r.d(F,{DeiTFeatureExtractor:()=>W,DeiTImageProcessor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{}class W extends D{}},"./src/models/detr/image_processing_detr.js":(Ae,F,r)=>{r.r(F),r.d(F,{DetrFeatureExtractor:()=>te,DetrImageProcessor:()=>W});var w=r("./src/base/image_processors_utils.js"),D=r("./src/utils/tensor.js");class W extends w.ImageProcessor{async _call(y){const P=await super._call(y),v=[P.pixel_values.dims[0],64,64],T=(0,D.full)(v,1n);return{...P,pixel_mask:T}}post_process_object_detection(...y){return(0,w.post_process_object_detection)(...y)}post_process_panoptic_segmentation(...y){return(0,w.post_process_panoptic_segmentation)(...y)}post_process_instance_segmentation(...y){return(0,w.post_process_instance_segmentation)(...y)}}class te extends W{}},"./src/models/donut/image_processing_donut.js":(Ae,F,r)=>{r.r(F),r.d(F,{DonutFeatureExtractor:()=>W,DonutImageProcessor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{pad_image(j,y,P,v={}){const[T,b,z]=y;let K=this.image_mean;Array.isArray(this.image_mean)||(K=new Array(z).fill(K));let re=this.image_std;Array.isArray(re)||(re=new Array(z).fill(K));const ae=K.map((B,G)=>-B/re[G]);return super.pad_image(j,y,P,{center:!0,constant_values:ae,...v})}}class W extends D{}},"./src/models/dpt/image_processing_dpt.js":(Ae,F,r)=>{r.r(F),r.d(F,{DPTFeatureExtractor:()=>W,DPTImageProcessor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{}class W extends D{}},"./src/models/efficientnet/image_processing_efficientnet.js":(Ae,F,r)=>{r.r(F),r.d(F,{EfficientNetImageProcessor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{constructor(te){super(te),this.include_top=this.config.include_top??!0,this.include_top&&(this.image_std=this.image_std.map(j=>j*j))}}},"./src/models/feature_extractors.js":(Ae,F,r)=>{r.r(F),r.d(F,{ASTFeatureExtractor:()=>w.ASTFeatureExtractor,ClapFeatureExtractor:()=>D.ClapFeatureExtractor,ImageFeatureExtractor:()=>b.ImageProcessor,MoonshineFeatureExtractor:()=>W.MoonshineFeatureExtractor,PyAnnoteFeatureExtractor:()=>te.PyAnnoteFeatureExtractor,SeamlessM4TFeatureExtractor:()=>j.SeamlessM4TFeatureExtractor,SpeechT5FeatureExtractor:()=>y.SpeechT5FeatureExtractor,Wav2Vec2FeatureExtractor:()=>P.Wav2Vec2FeatureExtractor,WeSpeakerFeatureExtractor:()=>v.WeSpeakerFeatureExtractor,WhisperFeatureExtractor:()=>T.WhisperFeatureExtractor});var w=r("./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js"),D=r("./src/models/clap/feature_extraction_clap.js"),W=r("./src/models/moonshine/feature_extraction_moonshine.js"),te=r("./src/models/pyannote/feature_extraction_pyannote.js"),j=r("./src/models/seamless_m4t/feature_extraction_seamless_m4t.js"),y=r("./src/models/speecht5/feature_extraction_speecht5.js"),P=r("./src/models/wav2vec2/feature_extraction_wav2vec2.js"),v=r("./src/models/wespeaker/feature_extraction_wespeaker.js"),T=r("./src/models/whisper/feature_extraction_whisper.js"),b=r("./src/base/image_processors_utils.js")},"./src/models/florence2/processing_florence2.js":(Ae,F,r)=>{r.r(F),r.d(F,{Florence2Processor:()=>te});var w=r("./src/base/processing_utils.js"),D=r("./src/models/auto/image_processing_auto.js"),W=r("./src/tokenizers.js");class te extends w.Processor{static tokenizer_class=W.AutoTokenizer;static image_processor_class=D.AutoImageProcessor;constructor(y,P){super(y,P);const{tasks_answer_post_processing_type:v,task_prompts_without_inputs:T,task_prompts_with_input:b}=this.image_processor.config;this.tasks_answer_post_processing_type=new Map(Object.entries(v??{})),this.task_prompts_without_inputs=new Map(Object.entries(T??{})),this.task_prompts_with_input=new Map(Object.entries(b??{})),this.regexes={quad_boxes:/(.+?)<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm,bboxes:/([^<]+)?<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm},this.size_per_bin=1e3}construct_prompts(y){typeof y=="string"&&(y=[y]);const P=[];for(const v of y)if(this.task_prompts_without_inputs.has(v))P.push(this.task_prompts_without_inputs.get(v));else{for(const[T,b]of this.task_prompts_with_input)if(v.includes(T)){P.push(b.replaceAll("{input}",v).replaceAll(T,""));break}P.length!==y.length&&P.push(v)}return P}post_process_generation(y,P,v){const T=this.tasks_answer_post_processing_type.get(P)??"pure_text";y=y.replaceAll("<s>","").replaceAll("</s>","");let b;switch(T){case"pure_text":b=y;break;case"description_with_bboxes":case"bboxes":case"phrase_grounding":case"ocr":const z=T==="ocr"?"quad_boxes":"bboxes",K=y.matchAll(this.regexes[z]),re=[],ae=[];for(const[B,G,...X]of K)re.push(G?G.trim():re.at(-1)??""),ae.push(X.map((I,$)=>(Number(I)+.5)/this.size_per_bin*v[$%2]));b={labels:re,[z]:ae};break;default:throw new Error(`Task "${P}" (of type "${T}") not yet implemented.`)}return{[P]:b}}async _call(y,P=null,v={}){if(!y&&!P)throw new Error("Either text or images must be provided");const T=await this.image_processor(y,v),b=P?this.tokenizer(P,v):{};return{...T,...b}}}},"./src/models/glpn/image_processing_glpn.js":(Ae,F,r)=>{r.r(F),r.d(F,{GLPNFeatureExtractor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{}},"./src/models/idefics3/image_processing_idefics3.js":(Ae,F,r)=>{r.r(F),r.d(F,{Idefics3ImageProcessor:()=>W});var w=r("./src/base/image_processors_utils.js"),D=r("./src/utils/tensor.js");class W extends w.ImageProcessor{constructor(j){super(j),this.do_image_splitting=j.do_image_splitting??!0,this.max_image_size=j.max_image_size}get_resize_for_vision_encoder(j,y){let[P,v]=j.dims.slice(-2);const T=v/P;return v>=P?(v=Math.ceil(v/y)*y,P=Math.floor(v/T),P=Math.ceil(P/y)*y):(P=Math.ceil(P/y)*y,v=Math.floor(P*T),v=Math.ceil(v/y)*y),{height:P,width:v}}async _call(j,{do_image_splitting:y=null,return_row_col_info:P=!1}={}){let v;if(!Array.isArray(j))v=[[j]];else{if(j.length===0||!j[0])throw new Error("No images provided.");Array.isArray(j[0])?v=j:v=[j]}let T=[],b=[],z=[];const K=[],re=[];for(const C of v){let x=await Promise.all(C.map(le=>this.preprocess(le)));K.push(...x.map(le=>le.original_size)),re.push(...x.map(le=>le.reshaped_input_size)),x.forEach(le=>le.pixel_values.unsqueeze_(0));const{longest_edge:J}=this.max_image_size;let Q;if(y??this.do_image_splitting){let le=new Array(x.length),ue=new Array(x.length);Q=await Promise.all(x.map(async(fe,Pe)=>{const ve=this.get_resize_for_vision_encoder(fe.pixel_values,J),Fe=await(0,D.interpolate_4d)(fe.pixel_values,{size:[ve.height,ve.width]}),{frames:Ge,num_splits_h:Re,num_splits_w:ut}=await this.split_image(Fe,this.max_image_size);return le[Pe]=Re,ue[Pe]=ut,(0,D.cat)(Ge,0)})),b.push(le),z.push(ue)}else{const le=[J,J];Q=await Promise.all(x.map(ue=>(0,D.interpolate_4d)(ue.pixel_values,{size:le}))),b.push(new Array(x.length).fill(0)),z.push(new Array(x.length).fill(0))}T.push((0,D.cat)(Q,0))}const ae=T.length,[B,G,X,I]=T[0].dims;let $,g;if(ae===1)$=T[0].unsqueeze_(0),g=(0,D.full)([ae,B,X,I],!0);else{const C=Math.max(...T.map(Q=>Q.dims.at(0)));g=(0,D.full)([ae,C,X,I],!0);const x=g.data,J=C*X*I;for(let Q=0;Q<ae;++Q){const le=T[Q].dims[0];if(le<C){T[Q]=(0,D.cat)([T[Q],(0,D.full)([C-le,G,X,I],0)],0);const ue=Q*J+le*X*I,fe=(Q+1)*J;x.fill(!1,ue,fe)}}$=(0,D.stack)(T,0)}return{pixel_values:$,pixel_attention_mask:g,original_sizes:K,reshaped_input_sizes:re,...P?{rows:b,cols:z}:{}}}async split_image(j,{longest_edge:y}){const P=y,v=y,T=[],[b,z]=j.dims.slice(-2);let K=0,re=0;if(b>P||z>v){K=Math.ceil(b/P),re=Math.ceil(z/v);const ae=Math.ceil(b/K),B=Math.ceil(z/re);for(let I=0;I<K;++I)for(let $=0;$<re;++$){let g,C,x,J;I===K-1?(C=b-ae,J=b):(C=I*ae,J=(I+1)*ae),$===re-1?(g=z-B,x=z):(g=$*B,x=($+1)*B);const Q=[C,g],le=[J,x],ue=await(0,D.slice)(j,Q,le,[2,3]);T.push(ue)}const G=P,X=v;(b!==G||z!==X)&&(j=await(0,D.interpolate_4d)(j,{size:[G,X]}))}return T.push(j),{frames:T,num_splits_h:K,num_splits_w:re}}}},"./src/models/idefics3/processing_idefics3.js":(Ae,F,r)=>{r.r(F),r.d(F,{Idefics3Processor:()=>v});var w=r("./src/base/processing_utils.js"),D=r("./src/models/auto/image_processing_auto.js"),W=r("./src/tokenizers.js");r("./src/utils/image.js");var te=r("./src/utils/core.js");function j(T,b,z,K,re,ae){let B="";for(let G=0;G<b;++G){for(let X=0;X<z;++X)B+=K+`<row_${G+1}_col_${X+1}>`+re.repeat(T);B+=`
`}return B+=`
${K}${ae}`+re.repeat(T)+`${K}`,B}function y(T,b,z,K){return`${b}${K}`+z.repeat(T)+`${b}`}function P(T,b,z,K,re,ae){return T===0&&b===0?y(z,K,re,ae):j(z,T,b,K,re,ae)}class v extends w.Processor{static image_processor_class=D.AutoImageProcessor;static tokenizer_class=W.AutoTokenizer;static uses_processor_config=!0;fake_image_token="<fake_token_around_image>";image_token="<image>";global_img_token="<global-img>";async _call(b,z=null,K={}){K.return_row_col_info??=!0;let re;z&&(re=await this.image_processor(z,K)),Array.isArray(b)||(b=[b]);const ae=re.rows??[new Array(b.length).fill(0)],B=re.cols??[new Array(b.length).fill(0)],G=this.config.image_seq_len,X=[],I=[];for(let g=0;g<b.length;++g){const C=b[g],x=ae[g],J=B[g];X.push((0,te.count)(C,this.image_token));const Q=x.map((fe,Pe)=>P(fe,J[Pe],G,this.fake_image_token,this.image_token,this.global_img_token)),le=C.split(this.image_token);if(le.length===0)throw new Error("The image token should be present in the text.");let ue=le[0];for(let fe=0;fe<Q.length;++fe)ue+=Q[fe]+le[fe+1];I.push(ue)}return{...this.tokenizer(I),...re}}}},"./src/models/image_processors.js":(Ae,F,r)=>{r.r(F),r.d(F,{BeitFeatureExtractor:()=>w.BeitFeatureExtractor,BitImageProcessor:()=>D.BitImageProcessor,CLIPFeatureExtractor:()=>te.CLIPFeatureExtractor,CLIPImageProcessor:()=>te.CLIPImageProcessor,ChineseCLIPFeatureExtractor:()=>W.ChineseCLIPFeatureExtractor,ConvNextFeatureExtractor:()=>j.ConvNextFeatureExtractor,ConvNextImageProcessor:()=>j.ConvNextImageProcessor,DPTFeatureExtractor:()=>T.DPTFeatureExtractor,DPTImageProcessor:()=>T.DPTImageProcessor,DeiTFeatureExtractor:()=>y.DeiTFeatureExtractor,DeiTImageProcessor:()=>y.DeiTImageProcessor,DetrFeatureExtractor:()=>P.DetrFeatureExtractor,DetrImageProcessor:()=>P.DetrImageProcessor,DonutFeatureExtractor:()=>v.DonutFeatureExtractor,DonutImageProcessor:()=>v.DonutImageProcessor,EfficientNetImageProcessor:()=>b.EfficientNetImageProcessor,GLPNFeatureExtractor:()=>z.GLPNFeatureExtractor,Idefics3ImageProcessor:()=>K.Idefics3ImageProcessor,JinaCLIPImageProcessor:()=>ae.JinaCLIPImageProcessor,LlavaOnevisionImageProcessor:()=>B.LlavaOnevisionImageProcessor,Mask2FormerImageProcessor:()=>G.Mask2FormerImageProcessor,MaskFormerFeatureExtractor:()=>X.MaskFormerFeatureExtractor,MaskFormerImageProcessor:()=>X.MaskFormerImageProcessor,MobileNetV1FeatureExtractor:()=>I.MobileNetV1FeatureExtractor,MobileNetV1ImageProcessor:()=>I.MobileNetV1ImageProcessor,MobileNetV2FeatureExtractor:()=>$.MobileNetV2FeatureExtractor,MobileNetV2ImageProcessor:()=>$.MobileNetV2ImageProcessor,MobileNetV3FeatureExtractor:()=>g.MobileNetV3FeatureExtractor,MobileNetV3ImageProcessor:()=>g.MobileNetV3ImageProcessor,MobileNetV4FeatureExtractor:()=>C.MobileNetV4FeatureExtractor,MobileNetV4ImageProcessor:()=>C.MobileNetV4ImageProcessor,MobileViTFeatureExtractor:()=>x.MobileViTFeatureExtractor,MobileViTImageProcessor:()=>x.MobileViTImageProcessor,NougatImageProcessor:()=>J.NougatImageProcessor,OwlViTFeatureExtractor:()=>le.OwlViTFeatureExtractor,OwlViTImageProcessor:()=>le.OwlViTImageProcessor,Owlv2ImageProcessor:()=>Q.Owlv2ImageProcessor,Phi3VImageProcessor:()=>ue.Phi3VImageProcessor,PvtImageProcessor:()=>fe.PvtImageProcessor,Qwen2VLImageProcessor:()=>Pe.Qwen2VLImageProcessor,RTDetrImageProcessor:()=>ve.RTDetrImageProcessor,SamImageProcessor:()=>Fe.SamImageProcessor,SegformerFeatureExtractor:()=>Ge.SegformerFeatureExtractor,SegformerImageProcessor:()=>Ge.SegformerImageProcessor,SiglipImageProcessor:()=>Re.SiglipImageProcessor,Swin2SRImageProcessor:()=>ut.Swin2SRImageProcessor,VLMImageProcessor:()=>re.VLMImageProcessor,ViTFeatureExtractor:()=>de.ViTFeatureExtractor,ViTImageProcessor:()=>de.ViTImageProcessor,VitMatteImageProcessor:()=>Z.VitMatteImageProcessor,VitPoseImageProcessor:()=>he.VitPoseImageProcessor,YolosFeatureExtractor:()=>be.YolosFeatureExtractor,YolosImageProcessor:()=>be.YolosImageProcessor});var w=r("./src/models/beit/image_processing_beit.js"),D=r("./src/models/bit/image_processing_bit.js"),W=r("./src/models/chinese_clip/image_processing_chinese_clip.js"),te=r("./src/models/clip/image_processing_clip.js"),j=r("./src/models/convnext/image_processing_convnext.js"),y=r("./src/models/deit/image_processing_deit.js"),P=r("./src/models/detr/image_processing_detr.js"),v=r("./src/models/donut/image_processing_donut.js"),T=r("./src/models/dpt/image_processing_dpt.js"),b=r("./src/models/efficientnet/image_processing_efficientnet.js"),z=r("./src/models/glpn/image_processing_glpn.js"),K=r("./src/models/idefics3/image_processing_idefics3.js"),re=r("./src/models/janus/image_processing_janus.js"),ae=r("./src/models/jina_clip/image_processing_jina_clip.js"),B=r("./src/models/llava_onevision/image_processing_llava_onevision.js"),G=r("./src/models/mask2former/image_processing_mask2former.js"),X=r("./src/models/maskformer/image_processing_maskformer.js"),I=r("./src/models/mobilenet_v1/image_processing_mobilenet_v1.js"),$=r("./src/models/mobilenet_v2/image_processing_mobilenet_v2.js"),g=r("./src/models/mobilenet_v3/image_processing_mobilenet_v3.js"),C=r("./src/models/mobilenet_v4/image_processing_mobilenet_v4.js"),x=r("./src/models/mobilevit/image_processing_mobilevit.js"),J=r("./src/models/nougat/image_processing_nougat.js"),Q=r("./src/models/owlv2/image_processing_owlv2.js"),le=r("./src/models/owlvit/image_processing_owlvit.js"),ue=r("./src/models/phi3_v/image_processing_phi3_v.js"),fe=r("./src/models/pvt/image_processing_pvt.js"),Pe=r("./src/models/qwen2_vl/image_processing_qwen2_vl.js"),ve=r("./src/models/rt_detr/image_processing_rt_detr.js"),Fe=r("./src/models/sam/image_processing_sam.js"),Ge=r("./src/models/segformer/image_processing_segformer.js"),Re=r("./src/models/siglip/image_processing_siglip.js"),ut=r("./src/models/swin2sr/image_processing_swin2sr.js"),de=r("./src/models/vit/image_processing_vit.js"),Z=r("./src/models/vitmatte/image_processing_vitmatte.js"),he=r("./src/models/vitpose/image_processing_vitpose.js"),be=r("./src/models/yolos/image_processing_yolos.js")},"./src/models/janus/image_processing_janus.js":(Ae,F,r)=>{r.r(F),r.d(F,{VLMImageProcessor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{constructor(te){super({do_pad:!0,pad_size:{width:te.image_size,height:te.image_size},...te}),this.constant_values=this.config.background_color.map(j=>j*this.rescale_factor)}pad_image(te,j,y,P){return super.pad_image(te,j,y,{constant_values:this.constant_values,center:!0,...P})}}},"./src/models/janus/processing_janus.js":(Ae,F,r)=>{r.r(F),r.d(F,{VLChatProcessor:()=>P});var w=r("./src/base/processing_utils.js"),D=r("./src/models/auto/image_processing_auto.js"),W=r("./src/tokenizers.js"),te=r("./src/utils/core.js"),j=r("./src/utils/tensor.js"),y=r("./src/utils/image.js");class P extends w.Processor{static image_processor_class=D.AutoImageProcessor;static tokenizer_class=W.AutoTokenizer;static uses_processor_config=!0;constructor(T,b){super(T,b),this.image_tag=this.config.image_tag,this.image_start_tag=this.config.image_start_tag,this.image_end_tag=this.config.image_end_tag,this.num_image_tokens=this.config.num_image_tokens}async _call(T,{images:b=null,chat_template:z="default"}={}){b?Array.isArray(b)||(b=[b]):b=await Promise.all(T.filter(Q=>Q.images).flatMap(Q=>Q.images).map(Q=>y.RawImage.read(Q)));const K=this.tokenizer,re=K.apply_chat_template(T,{tokenize:!1,add_generation_prompt:!0,chat_template:z}),ae=Q=>K.encode(Q,{add_special_tokens:!1}),B=re.split(this.image_tag),G=B.length-1;if(b.length!==G)throw new Error(`Number of images provided (${b.length}) does not match number of "${this.image_tag}" image tags (${G})`);const[X,I,$]=K.model.convert_tokens_to_ids([this.image_tag,this.image_start_tag,this.image_end_tag]);let g=ae(B[0]),C=new Array(g.length).fill(!1);for(let Q=1;Q<B.length;++Q){const le=new Array(this.num_image_tokens).fill(X),ue=ae(B[Q]);g=(0,te.mergeArrays)(g,[I],le,[$],ue);const fe=new Array(this.num_image_tokens).fill(!0);C=(0,te.mergeArrays)(C,[!1],fe,[!1],new Array(ue.length).fill(!1))}const x=[1,g.length],J={input_ids:new j.Tensor("int64",g,x),attention_mask:new j.Tensor("int64",new Array(g.length).fill(1),x),images_seq_mask:new j.Tensor("bool",C,x),images_emb_mask:new j.Tensor("bool",new Array(G*this.num_image_tokens).fill(!0),[1,G,this.num_image_tokens])};if(b&&b.length>0){const Q=await this.image_processor(b);return Q.pixel_values.unsqueeze_(0),{...J,...Q}}return J}}},"./src/models/jina_clip/image_processing_jina_clip.js":(Ae,F,r)=>{r.r(F),r.d(F,{JinaCLIPImageProcessor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{constructor(te){const{resize_mode:j,fill_color:y,interpolation:P,size:v,...T}=te,b=j==="squash"?{width:v,height:v}:j==="shortest"?{shortest_edge:v}:{longest_edge:v},z=P==="bicubic"?3:2;super({...T,size:b,resample:z,do_center_crop:!0,crop_size:v,do_normalize:!0})}}},"./src/models/jina_clip/processing_jina_clip.js":(Ae,F,r)=>{r.r(F),r.d(F,{JinaCLIPProcessor:()=>te});var w=r("./src/base/processing_utils.js"),D=r("./src/models/auto/image_processing_auto.js"),W=r("./src/tokenizers.js");class te extends w.Processor{static tokenizer_class=W.AutoTokenizer;static image_processor_class=D.AutoImageProcessor;async _call(y=null,P=null,v={}){if(!y&&!P)throw new Error("Either text or images must be provided");const T=y?this.tokenizer(y,v):{},b=P?await this.image_processor(P,v):{};return{...T,...b}}}},"./src/models/llava_onevision/image_processing_llava_onevision.js":(Ae,F,r)=>{r.r(F),r.d(F,{LlavaOnevisionImageProcessor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{}},"./src/models/mask2former/image_processing_mask2former.js":(Ae,F,r)=>{r.r(F),r.d(F,{Mask2FormerImageProcessor:()=>D});var w=r("./src/models/maskformer/image_processing_maskformer.js");class D extends w.MaskFormerImageProcessor{}},"./src/models/maskformer/image_processing_maskformer.js":(Ae,F,r)=>{r.r(F),r.d(F,{MaskFormerFeatureExtractor:()=>W,MaskFormerImageProcessor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{post_process_panoptic_segmentation(...j){return(0,w.post_process_panoptic_segmentation)(...j)}post_process_instance_segmentation(...j){return(0,w.post_process_instance_segmentation)(...j)}}class W extends D{}},"./src/models/mgp_str/processing_mgp_str.js":(Ae,F,r)=>{r.r(F),r.d(F,{MgpstrProcessor:()=>y});var w=r("./src/base/processing_utils.js"),D=r("./src/models/auto/image_processing_auto.js"),W=r("./src/tokenizers.js"),te=r("./src/utils/maths.js");const j={char:["char_decode",1],bpe:["bpe_decode",2],wp:["wp_decode",102]};class y extends w.Processor{static tokenizer_class=W.AutoTokenizer;static image_processor_class=D.AutoImageProcessor;get char_tokenizer(){return this.components.char_tokenizer}get bpe_tokenizer(){return this.components.bpe_tokenizer}get wp_tokenizer(){return this.components.wp_tokenizer}_decode_helper(v,T){if(!j.hasOwnProperty(T))throw new Error(`Format ${T} is not supported.`);const[b,z]=j[T],K=this[b].bind(this),[re,ae]=v.dims,B=[],G=[],X=v.tolist();for(let $=0;$<re;++$){const g=X[$],C=[],x=[];for(let Q=1;Q<ae;++Q){const[le,ue]=(0,te.max)((0,te.softmax)(g[Q]));if(x.push(le),ue==z)break;C.push(ue)}const J=x.length>0?x.reduce((Q,le)=>Q*le,1):0;G.push(C),B.push(J)}return[K(G),B]}char_decode(v){return this.char_tokenizer.batch_decode(v).map(T=>T.replaceAll(" ",""))}bpe_decode(v){return this.bpe_tokenizer.batch_decode(v)}wp_decode(v){return this.wp_tokenizer.batch_decode(v).map(T=>T.replaceAll(" ",""))}batch_decode([v,T,b]){const[z,K]=this._decode_helper(v,"char"),[re,ae]=this._decode_helper(T,"bpe"),[B,G]=this._decode_helper(b,"wp"),X=[],I=[];for(let $=0;$<z.length;++$){const[g,C]=(0,te.max)([K[$],ae[$],G[$]]);X.push([z[$],re[$],B[$]][C]),I.push(g)}return{generated_text:X,scores:I,char_preds:z,bpe_preds:re,wp_preds:B}}static async from_pretrained(...v){const T=await super.from_pretrained(...v),b=await W.AutoTokenizer.from_pretrained("Xenova/gpt2"),z=await W.AutoTokenizer.from_pretrained("Xenova/bert-base-uncased");return T.components={image_processor:T.image_processor,char_tokenizer:T.tokenizer,bpe_tokenizer:b,wp_tokenizer:z},T}async _call(v,T=null){const b=await this.image_processor(v);return T&&(b.labels=this.tokenizer(T).input_ids),b}}},"./src/models/mobilenet_v1/image_processing_mobilenet_v1.js":(Ae,F,r)=>{r.r(F),r.d(F,{MobileNetV1FeatureExtractor:()=>W,MobileNetV1ImageProcessor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{}class W extends D{}},"./src/models/mobilenet_v2/image_processing_mobilenet_v2.js":(Ae,F,r)=>{r.r(F),r.d(F,{MobileNetV2FeatureExtractor:()=>W,MobileNetV2ImageProcessor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{}class W extends D{}},"./src/models/mobilenet_v3/image_processing_mobilenet_v3.js":(Ae,F,r)=>{r.r(F),r.d(F,{MobileNetV3FeatureExtractor:()=>W,MobileNetV3ImageProcessor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{}class W extends D{}},"./src/models/mobilenet_v4/image_processing_mobilenet_v4.js":(Ae,F,r)=>{r.r(F),r.d(F,{MobileNetV4FeatureExtractor:()=>W,MobileNetV4ImageProcessor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{}class W extends D{}},"./src/models/mobilevit/image_processing_mobilevit.js":(Ae,F,r)=>{r.r(F),r.d(F,{MobileViTFeatureExtractor:()=>W,MobileViTImageProcessor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{}class W extends D{}},"./src/models/moonshine/feature_extraction_moonshine.js":(Ae,F,r)=>{r.r(F),r.d(F,{MoonshineFeatureExtractor:()=>W});var w=r("./src/base/feature_extraction_utils.js"),D=r("./src/utils/tensor.js");class W extends w.FeatureExtractor{async _call(j){(0,w.validate_audio_inputs)(j,"MoonshineFeatureExtractor"),j instanceof Float64Array&&(j=new Float32Array(j));const y=[1,j.length];return{input_values:new D.Tensor("float32",j,y)}}}},"./src/models/moonshine/processing_moonshine.js":(Ae,F,r)=>{r.r(F),r.d(F,{MoonshineProcessor:()=>te});var w=r("./src/models/auto/feature_extraction_auto.js"),D=r("./src/tokenizers.js"),W=r("./src/base/processing_utils.js");class te extends W.Processor{static tokenizer_class=D.AutoTokenizer;static feature_extractor_class=w.AutoFeatureExtractor;async _call(y){return await this.feature_extractor(y)}}},"./src/models/nougat/image_processing_nougat.js":(Ae,F,r)=>{r.r(F),r.d(F,{NougatImageProcessor:()=>D});var w=r("./src/models/donut/image_processing_donut.js");class D extends w.DonutImageProcessor{}},"./src/models/owlv2/image_processing_owlv2.js":(Ae,F,r)=>{r.r(F),r.d(F,{Owlv2ImageProcessor:()=>D});var w=r("./src/models/owlvit/image_processing_owlvit.js");class D extends w.OwlViTImageProcessor{}},"./src/models/owlvit/image_processing_owlvit.js":(Ae,F,r)=>{r.r(F),r.d(F,{OwlViTFeatureExtractor:()=>W,OwlViTImageProcessor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{post_process_object_detection(...j){return(0,w.post_process_object_detection)(...j)}}class W extends D{}},"./src/models/owlvit/processing_owlvit.js":(Ae,F,r)=>{r.r(F),r.d(F,{OwlViTProcessor:()=>te});var w=r("./src/base/processing_utils.js"),D=r("./src/models/auto/image_processing_auto.js"),W=r("./src/tokenizers.js");class te extends w.Processor{static tokenizer_class=W.AutoTokenizer;static image_processor_class=D.AutoImageProcessor}},"./src/models/paligemma/processing_paligemma.js":(Ae,F,r)=>{r.r(F),r.d(F,{PaliGemmaProcessor:()=>y});var w=r("./src/base/processing_utils.js"),D=r("./src/models/auto/image_processing_auto.js"),W=r("./src/tokenizers.js");const te="<image>";function j(P,v,T,b,z){return`${b.repeat(T*z)}${v}${P}
`}class y extends w.Processor{static tokenizer_class=W.AutoTokenizer;static image_processor_class=D.AutoImageProcessor;static uses_processor_config=!1;async _call(v,T=null,b={}){T||(console.warn("You are using PaliGemma without a text prefix. It will perform as a picture-captioning model."),T=""),Array.isArray(v)||(v=[v]),Array.isArray(T)||(T=[T]);const z=this.tokenizer.bos_token,K=this.image_processor.config.image_seq_length;let re;T.some(G=>G.includes(te))?re=T.map(G=>{const X=G.replaceAll(te,te.repeat(K)),I=X.lastIndexOf(te),$=I===-1?0:I+te.length;return X.slice(0,$)+z+X.slice($)+`
`}):(console.warn("You are passing both `text` and `images` to `PaliGemmaProcessor`. The processor expects special image tokens in the text, as many tokens as there are images per each text. It is recommended to add `<image>` tokens in the very beginning of your text. For this call, we will infer how many images each text has and add special tokens."),re=T.map(G=>j(G,z,K,te,v.length)));const ae=this.tokenizer(re,b);return{...await this.image_processor(v,b),...ae}}}},"./src/models/phi3_v/image_processing_phi3_v.js":(Ae,F,r)=>{r.r(F),r.d(F,{Phi3VImageProcessor:()=>v});var w=r("./src/base/image_processors_utils.js"),D=r("./src/utils/tensor.js");const W=336,te=[2,3],{ceil:j,floor:y,sqrt:P}=Math;class v extends w.ImageProcessor{constructor(b){super({...b,do_normalize:!0,do_pad:!0,pad_size:"custom",do_convert_rgb:!0,do_resize:!0}),this._num_crops=b.num_crops}calc_num_image_tokens_from_image_size(b,z){const{num_img_tokens:K}=this.config;return y((y(z/W)*y(b/W)+1)*K+1+(y(z/W)+1)*P(K))}get_resize_output_image_size(b,z){const K=this._num_crops,[re,ae]=b.size;let B=re/ae,G=1;for(;G*Math.ceil(G/B)<=K;)G+=1;G-=1;const X=Math.floor(G*336),I=Math.floor(X/B);return[X,I]}pad_image(b,z,K,re={}){const[ae,B]=z,G=W*j(ae/W),X=W*j(B/W),I=[1,1,1].map(($,g)=>($-this.image_mean[g])/this.image_std[g]);return super.pad_image(b,z,{width:X,height:G},{center:!0,constant_values:I,...re})}async _call(b,{num_crops:z=null}={}){if(this._num_crops=z??=this.config.num_crops,z<4||P(z)%1!==0)throw new Error("num_crops must be a square number >= 4");Array.isArray(b)||(b=[b]);const K=b.length,re=await Promise.all(b.map(C=>this.preprocess(C))),ae=re.map(C=>C.original_size),B=re.map(C=>C.reshaped_input_size),G=[];for(const{pixel_values:C}of re){C.unsqueeze_(0);const[x,J]=C.dims.slice(-2),Q=await(0,D.interpolate_4d)(C,{size:[W,W],mode:"bicubic"});if(z>0){const le=[],ue=P(z),fe=y(J/ue),Pe=y(x/ue);for(let Fe=0;Fe<ue;++Fe)for(let Ge=0;Ge<ue;++Ge){let Re,ut,de,Z;Fe===ue-1?(ut=x-Pe,Z=x):(ut=Fe*Pe,Z=(Fe+1)*Pe),Ge===ue-1?(Re=J-fe,de=J):(Re=Ge*fe,de=(Ge+1)*fe);const he=[ut,Re],be=[Z,de],De=await(0,D.slice)(C,he,be,te);le.push(De)}const ve=await(0,D.interpolate_4d)((0,D.cat)(le,0),{size:[W,W],mode:"bicubic"});G.push((0,D.cat)([Q,ve],0))}else G.push(Q)}const X=(0,D.stack)(G,0),I=B.map(C=>C.map(x=>W*j(x/W))),$=new D.Tensor("int64",I.flat(),[K,2]),g=I.map(([C,x])=>this.calc_num_image_tokens_from_image_size(x,C));return{pixel_values:X,original_sizes:ae,reshaped_input_sizes:B,image_sizes:$,num_img_tokens:g}}}},"./src/models/phi3_v/processing_phi3_v.js":(Ae,F,r)=>{r.r(F),r.d(F,{Phi3VProcessor:()=>y});var w=r("./src/base/processing_utils.js"),D=r("./src/models/auto/image_processing_auto.js"),W=r("./src/tokenizers.js");r("./src/utils/image.js");const te="<|image|>",j=/<\|image_\d+\|>/g;class y extends w.Processor{static image_processor_class=D.AutoImageProcessor;static tokenizer_class=W.AutoTokenizer;async _call(v,T=null,{padding:b=!0,truncation:z=!0,num_crops:K=null}={}){Array.isArray(v)||(v=[v]);let re,ae;if(T){ae=await this.image_processor(T,{num_crops:K});const{num_img_tokens:B}=ae,G=v.map((I,$)=>I.split(j).join(te.repeat(B[$])));re=this.tokenizer(G,{padding:b,truncation:z});const X=this.tokenizer.model.convert_tokens_to_ids([te])[0];re.input_ids.map_(I=>I==X?-I:I)}else re=this.tokenizer(v);return{...re,...ae}}}},"./src/models/processors.js":(Ae,F,r)=>{r.r(F),r.d(F,{Florence2Processor:()=>w.Florence2Processor,Idefics3Processor:()=>te.Idefics3Processor,JinaCLIPProcessor:()=>y.JinaCLIPProcessor,MgpstrProcessor:()=>D.MgpstrProcessor,MoonshineProcessor:()=>W.MoonshineProcessor,OwlViTProcessor:()=>P.OwlViTProcessor,PaliGemmaProcessor:()=>T.PaliGemmaProcessor,Phi3VProcessor:()=>v.Phi3VProcessor,PyAnnoteProcessor:()=>b.PyAnnoteProcessor,Qwen2VLProcessor:()=>z.Qwen2VLProcessor,SamProcessor:()=>K.SamProcessor,SpeechT5Processor:()=>re.SpeechT5Processor,VLChatProcessor:()=>j.VLChatProcessor,Wav2Vec2ProcessorWithLM:()=>ae.Wav2Vec2ProcessorWithLM,WhisperProcessor:()=>B.WhisperProcessor});var w=r("./src/models/florence2/processing_florence2.js"),D=r("./src/models/mgp_str/processing_mgp_str.js"),W=r("./src/models/moonshine/processing_moonshine.js"),te=r("./src/models/idefics3/processing_idefics3.js"),j=r("./src/models/janus/processing_janus.js"),y=r("./src/models/jina_clip/processing_jina_clip.js"),P=r("./src/models/owlvit/processing_owlvit.js"),v=r("./src/models/phi3_v/processing_phi3_v.js"),T=r("./src/models/paligemma/processing_paligemma.js"),b=r("./src/models/pyannote/processing_pyannote.js"),z=r("./src/models/qwen2_vl/processing_qwen2_vl.js"),K=r("./src/models/sam/processing_sam.js"),re=r("./src/models/speecht5/processing_speecht5.js"),ae=r("./src/models/wav2vec2/processing_wav2vec2.js"),B=r("./src/models/whisper/processing_whisper.js")},"./src/models/pvt/image_processing_pvt.js":(Ae,F,r)=>{r.r(F),r.d(F,{PvtImageProcessor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{}},"./src/models/pyannote/feature_extraction_pyannote.js":(Ae,F,r)=>{r.r(F),r.d(F,{PyAnnoteFeatureExtractor:()=>te});var w=r("./src/base/feature_extraction_utils.js"),D=r("./src/utils/tensor.js"),W=r("./src/utils/maths.js");class te extends w.FeatureExtractor{async _call(y){(0,w.validate_audio_inputs)(y,"PyAnnoteFeatureExtractor"),y instanceof Float64Array&&(y=new Float32Array(y));const P=[1,1,y.length];return{input_values:new D.Tensor("float32",y,P)}}samples_to_frames(y){return(y-this.config.offset)/this.config.step}post_process_speaker_diarization(y,P){const v=P/this.samples_to_frames(P)/this.config.sampling_rate,T=[];for(const b of y.tolist()){const z=[];let K=-1;for(let re=0;re<b.length;++re){const ae=(0,W.softmax)(b[re]),[B,G]=(0,W.max)(ae),[X,I]=[re,re+1];G!==K?(K=G,z.push({id:G,start:X,end:I,score:B})):(z.at(-1).end=I,z.at(-1).score+=B)}T.push(z.map(({id:re,start:ae,end:B,score:G})=>({id:re,start:ae*v,end:B*v,confidence:G/(B-ae)})))}return T}}},"./src/models/pyannote/processing_pyannote.js":(Ae,F,r)=>{r.r(F),r.d(F,{PyAnnoteProcessor:()=>W});var w=r("./src/base/processing_utils.js"),D=r("./src/models/pyannote/feature_extraction_pyannote.js");class W extends w.Processor{static feature_extractor_class=D.PyAnnoteFeatureExtractor;async _call(j){return await this.feature_extractor(j)}post_process_speaker_diarization(...j){return this.feature_extractor.post_process_speaker_diarization(...j)}get sampling_rate(){return this.feature_extractor.config.sampling_rate}}},"./src/models/qwen2_vl/image_processing_qwen2_vl.js":(Ae,F,r)=>{r.r(F),r.d(F,{Qwen2VLImageProcessor:()=>W});var w=r("./src/base/image_processors_utils.js"),D=r("./src/utils/tensor.js");class W extends w.ImageProcessor{async _call(j,...y){const{pixel_values:P,original_sizes:v,reshaped_input_sizes:T}=await super._call(j,...y);let b=P;const{temporal_patch_size:z,merge_size:K,patch_size:re}=this.config;b.dims[0]===1&&(b=(0,D.cat)(Array.from({length:z},()=>b),0));const ae=b.dims[0]/z,B=b.dims[1],G=Math.floor(b.dims[2]/re),X=Math.floor(b.dims[3]/re),I=b.view(ae,z,B,Math.floor(G/K),K,re,Math.floor(X/K),K,re).permute(0,3,6,4,7,2,1,5,8).view(ae*G*X,B*z*re*re),$=new D.Tensor("int64",[ae,G,X],[1,3]);return{pixel_values:I,image_grid_thw:$,original_sizes:v,reshaped_input_sizes:T}}}},"./src/models/qwen2_vl/processing_qwen2_vl.js":(Ae,F,r)=>{r.r(F),r.d(F,{Qwen2VLProcessor:()=>te});var w=r("./src/base/processing_utils.js"),D=r("./src/models/auto/image_processing_auto.js"),W=r("./src/tokenizers.js");r("./src/utils/image.js");class te extends w.Processor{static image_processor_class=D.AutoImageProcessor;static tokenizer_class=W.AutoTokenizer;async _call(y,P=null,...v){Array.isArray(y)||(y=[y]);let T,b;if(P&&(T=await this.image_processor(P),b=T.image_grid_thw),b){let K=this.image_processor.config.merge_size**2,re=0;const ae=b.tolist();y=y.map(B=>{for(;B.includes("<|image_pad|>");){const G=Number(ae[re++].reduce((X,I)=>X*I,1n));B=B.replace("<|image_pad|>","<|placeholder|>".repeat(Math.floor(G/K)))}return B.replaceAll("<|placeholder|>","<|image_pad|>")})}return{...this.tokenizer(y),...T}}}},"./src/models/rt_detr/image_processing_rt_detr.js":(Ae,F,r)=>{r.r(F),r.d(F,{RTDetrImageProcessor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{post_process_object_detection(...te){return(0,w.post_process_object_detection)(...te)}}},"./src/models/sam/image_processing_sam.js":(Ae,F,r)=>{r.r(F),r.d(F,{SamImageProcessor:()=>te});var w=r("./src/base/image_processors_utils.js"),D=r("./src/utils/core.js"),W=r("./src/utils/tensor.js");class te extends w.ImageProcessor{reshape_input_points(y,P,v,T=!1){y=structuredClone(y);let b=(0,D.calculateDimensions)(y);if(b.length===3)T||(b=[1,...b]),y=[y];else if(b.length!==4)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");for(let z=0;z<y.length;++z){let K=P[z],re=v[z],ae=[re[0]/K[0],re[1]/K[1]];for(let B=0;B<y[z].length;++B)for(let G=0;G<y[z][B].length;++G)for(let X=0;X<y[z][B][G].length;++X)y[z][B][G][X]*=ae[X%2]}return new W.Tensor("float32",Float32Array.from(y.flat(1/0)),b)}add_input_labels(y,P){let v=(0,D.calculateDimensions)(y);if(v.length===2)v=[1,...v],y=[y];else if(v.length!==3)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");if(v.some((T,b)=>T!==P.dims[b]))throw Error(`The first ${v.length} dimensions of 'input_points' and 'input_labels' must be the same.`);return new W.Tensor("int64",y.flat(1/0).map(BigInt),v)}async _call(y,{input_points:P=null,input_labels:v=null,input_boxes:T=null}={}){const b=await super._call(y);if(P&&(b.input_points=this.reshape_input_points(P,b.original_sizes,b.reshaped_input_sizes)),v){if(!b.input_points)throw Error("`input_points` must be provided if `input_labels` are provided.");b.input_labels=this.add_input_labels(v,b.input_points)}return T&&(b.input_boxes=this.reshape_input_points(T,b.original_sizes,b.reshaped_input_sizes,!0)),b}async post_process_masks(y,P,v,{mask_threshold:T=0,binarize:b=!0,pad_size:z=null}={}){const K=[];z=z??this.pad_size;const re=[z.height,z.width];for(let ae=0;ae<P.length;++ae){const B=P[ae],G=v[ae];let X=await(0,W.interpolate_4d)(y[ae],{mode:"bilinear",size:re});if(X=X.slice(null,null,[0,G[0]],[0,G[1]]),X=await(0,W.interpolate_4d)(X,{mode:"bilinear",size:B}),b){const I=X.data,$=new Uint8Array(I.length);for(let g=0;g<I.length;++g)I[g]>T&&($[g]=1);X=new W.Tensor("bool",$,X.dims)}K.push(X)}return K}generate_crop_boxes(y,P,{crop_n_layers:v=0,overlap_ratio:T=.3413333333333333,points_per_crop:b=32,crop_n_points_downscale_factor:z=1}={}){}}},"./src/models/sam/processing_sam.js":(Ae,F,r)=>{r.r(F),r.d(F,{SamProcessor:()=>W});var w=r("./src/base/processing_utils.js"),D=r("./src/models/auto/image_processing_auto.js");class W extends w.Processor{static image_processor_class=D.AutoImageProcessor;async _call(...j){return await this.image_processor(...j)}post_process_masks(...j){return this.image_processor.post_process_masks(...j)}reshape_input_points(...j){return this.image_processor.reshape_input_points(...j)}}},"./src/models/seamless_m4t/feature_extraction_seamless_m4t.js":(Ae,F,r)=>{r.r(F),r.d(F,{SeamlessM4TFeatureExtractor:()=>te});var w=r("./src/base/feature_extraction_utils.js"),D=r("./src/utils/tensor.js"),W=r("./src/utils/audio.js");class te extends w.FeatureExtractor{constructor(y){super(y);const P=this.config.sampling_rate,v=(0,W.mel_filter_bank)(256,this.config.num_mel_bins,20,Math.floor(P/2),P,null,"kaldi",!0);for(let T=0;T<v.length;++T)v[T].push(0);this.mel_filters=v,this.window=(0,W.window_function)(400,"povey",{periodic:!1})}async _extract_fbank_features(y,P){return y=y.map(v=>v*32768),(0,W.spectrogram)(y,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:P,transpose:!0})}async _call(y,{padding:P=!0,pad_to_multiple_of:v=2,do_normalize_per_mel_bins:T=!0,return_attention_mask:b=!0}={}){(0,w.validate_audio_inputs)(y,"SeamlessM4TFeatureExtractor");let z=await this._extract_fbank_features(y,this.config.max_length);if(T){const[$,g]=z.dims,C=z.data;for(let x=0;x<g;++x){let J=0;for(let fe=0;fe<$;++fe)J+=C[fe*g+x];const Q=J/$;let le=0;for(let fe=0;fe<$;++fe)le+=(C[fe*g+x]-Q)**2;le/=$-1;const ue=Math.sqrt(le+1e-7);for(let fe=0;fe<$;++fe){const Pe=fe*g+x;C[Pe]=(C[Pe]-Q)/ue}}}let K;if(P){const[$,g]=z.dims,C=z.data,x=$%v;if(x>0){const J=new Float32Array(g*($+x));J.set(C),J.fill(this.config.padding_value,C.length);const Q=$+x;z=new D.Tensor(z.type,J,[Q,g]),b&&(K=new D.Tensor("int64",new BigInt64Array(Q),[1,Q]),K.data.fill(1n,0,$))}}const[re,ae]=z.dims,B=this.config.stride;if(re%B!==0)throw new Error(`The number of frames (${re}) must be a multiple of the stride (${B}).`);const X=z.view(1,Math.floor(re/B),ae*B),I={input_features:X};if(b){const $=X.dims[1],g=new BigInt64Array($);if(K){const C=K.data;for(let x=1,J=0;x<re;x+=B,++J)g[J]=C[x]}else g.fill(1n);I.attention_mask=new D.Tensor("int64",g,[1,$])}return I}}},"./src/models/segformer/image_processing_segformer.js":(Ae,F,r)=>{r.r(F),r.d(F,{SegformerFeatureExtractor:()=>W,SegformerImageProcessor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{post_process_semantic_segmentation(...j){return(0,w.post_process_semantic_segmentation)(...j)}}class W extends D{}},"./src/models/siglip/image_processing_siglip.js":(Ae,F,r)=>{r.r(F),r.d(F,{SiglipImageProcessor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{}},"./src/models/speecht5/feature_extraction_speecht5.js":(Ae,F,r)=>{r.r(F),r.d(F,{SpeechT5FeatureExtractor:()=>D});var w=r("./src/base/feature_extraction_utils.js");class D extends w.FeatureExtractor{}},"./src/models/speecht5/processing_speecht5.js":(Ae,F,r)=>{r.r(F),r.d(F,{SpeechT5Processor:()=>te});var w=r("./src/base/processing_utils.js"),D=r("./src/tokenizers.js"),W=r("./src/models/auto/feature_extraction_auto.js");class te extends w.Processor{static tokenizer_class=D.AutoTokenizer;static feature_extractor_class=W.AutoFeatureExtractor;async _call(y){return await this.feature_extractor(y)}}},"./src/models/swin2sr/image_processing_swin2sr.js":(Ae,F,r)=>{r.r(F),r.d(F,{Swin2SRImageProcessor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{pad_image(te,j,y,P={}){const[v,T,b]=j;return super.pad_image(te,j,{width:T+(y-T%y)%y,height:v+(y-v%y)%y},{mode:"symmetric",center:!1,constant_values:-1,...P})}}},"./src/models/vit/image_processing_vit.js":(Ae,F,r)=>{r.r(F),r.d(F,{ViTFeatureExtractor:()=>W,ViTImageProcessor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{}class W extends D{}},"./src/models/vitmatte/image_processing_vitmatte.js":(Ae,F,r)=>{r.r(F),r.d(F,{VitMatteImageProcessor:()=>W});var w=r("./src/base/image_processors_utils.js"),D=r("./src/utils/tensor.js");class W extends w.ImageProcessor{async _call(j,y){Array.isArray(j)||(j=[j]),Array.isArray(y)||(y=[y]);const P=await Promise.all(j.map(b=>this.preprocess(b))),v=await Promise.all(y.map(b=>this.preprocess(b,{do_normalize:!1,do_convert_rgb:!1,do_convert_grayscale:!0})));return{pixel_values:(0,D.stack)(P.map((b,z)=>(0,D.cat)([b.pixel_values,v[z].pixel_values],0)),0),original_sizes:P.map(b=>b.original_size),reshaped_input_sizes:P.map(b=>b.reshaped_input_size)}}}},"./src/models/vitpose/image_processing_vitpose.js":(Ae,F,r)=>{r.r(F),r.d(F,{VitPoseImageProcessor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{post_process_pose_estimation(te,j,{threshold:y=null}={}){const P=te.tolist(),[v,T,b,z]=te.dims,K=[];for(let re=0;re<v;++re){const ae=P[re],B=j[re],G=[];for(let X=0;X<B.length;++X){const I=B[X],$=[],g=[],C=[],x=I.at(-2)/z,J=I.at(-1)/b;for(let Q=0;Q<ae.length;++Q){let[le,ue]=[0,0],fe=0,Pe=-1/0;const ve=ae[Q];for(let Ge=0;Ge<ve.length;++Ge){const Re=ve[Ge];for(let ut=0;ut<Re.length;++ut){const de=Re[ut];fe+=de,Pe=Math.max(Pe,de),le+=(ut+.5)*de,ue+=Ge*de}}if(y!=null&&Pe<y)continue;const Fe=[x*le/fe,J*ue/fe];$.push(Fe),C.push(Q),g.push(Pe)}G.push({bbox:I,scores:g,labels:C,keypoints:$})}K.push(G)}return K}}},"./src/models/wav2vec2/feature_extraction_wav2vec2.js":(Ae,F,r)=>{r.r(F),r.d(F,{Wav2Vec2FeatureExtractor:()=>W});var w=r("./src/base/feature_extraction_utils.js"),D=r("./src/utils/tensor.js");class W extends w.FeatureExtractor{_zero_mean_unit_var_norm(j){const P=j.reduce((T,b)=>T+b,0)/j.length,v=j.reduce((T,b)=>T+(b-P)**2,0)/j.length;return j.map(T=>(T-P)/Math.sqrt(v+1e-7))}async _call(j){(0,w.validate_audio_inputs)(j,"Wav2Vec2FeatureExtractor"),j instanceof Float64Array&&(j=new Float32Array(j));let y=j;this.config.do_normalize&&(y=this._zero_mean_unit_var_norm(y));const P=[1,y.length];return{input_values:new D.Tensor("float32",y,P),attention_mask:new D.Tensor("int64",new BigInt64Array(y.length).fill(1n),P)}}}},"./src/models/wav2vec2/processing_wav2vec2.js":(Ae,F,r)=>{r.r(F),r.d(F,{Wav2Vec2ProcessorWithLM:()=>W});var w=r("./src/base/processing_utils.js"),D=r("./src/models/auto/feature_extraction_auto.js");class W extends w.Processor{static feature_extractor_class=D.AutoFeatureExtractor;async _call(j){return await this.feature_extractor(j)}}},"./src/models/wespeaker/feature_extraction_wespeaker.js":(Ae,F,r)=>{r.r(F),r.d(F,{WeSpeakerFeatureExtractor:()=>W});var w=r("./src/base/feature_extraction_utils.js");r("./src/utils/tensor.js");var D=r("./src/utils/audio.js");class W extends w.FeatureExtractor{constructor(j){super(j);const y=this.config.sampling_rate,P=(0,D.mel_filter_bank)(256,this.config.num_mel_bins,20,Math.floor(y/2),y,null,"kaldi",!0);for(let v=0;v<P.length;++v)P[v].push(0);this.mel_filters=P,this.window=(0,D.window_function)(400,"hamming",{periodic:!1}),this.min_num_frames=this.config.min_num_frames}async _extract_fbank_features(j){return j=j.map(y=>y*32768),(0,D.spectrogram)(j,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,transpose:!0,min_num_frames:this.min_num_frames})}async _call(j){(0,w.validate_audio_inputs)(j,"WeSpeakerFeatureExtractor");const y=(await this._extract_fbank_features(j)).unsqueeze_(0);if(this.config.fbank_centering_span===null){const P=y.mean(1).data,v=y.data,[T,b,z]=y.dims;for(let K=0;K<T;++K){const re=K*b*z,ae=K*z;for(let B=0;B<b;++B){const G=re+B*z;for(let X=0;X<z;++X)v[G+X]-=P[ae+X]}}}return{input_features:y}}}},"./src/models/whisper/common_whisper.js":(Ae,F,r)=>{r.r(F),r.d(F,{WHISPER_LANGUAGE_MAPPING:()=>D,WHISPER_TO_LANGUAGE_CODE_MAPPING:()=>W,whisper_language_to_code:()=>te});const w=[["en","english"],["zh","chinese"],["de","german"],["es","spanish"],["ru","russian"],["ko","korean"],["fr","french"],["ja","japanese"],["pt","portuguese"],["tr","turkish"],["pl","polish"],["ca","catalan"],["nl","dutch"],["ar","arabic"],["sv","swedish"],["it","italian"],["id","indonesian"],["hi","hindi"],["fi","finnish"],["vi","vietnamese"],["he","hebrew"],["uk","ukrainian"],["el","greek"],["ms","malay"],["cs","czech"],["ro","romanian"],["da","danish"],["hu","hungarian"],["ta","tamil"],["no","norwegian"],["th","thai"],["ur","urdu"],["hr","croatian"],["bg","bulgarian"],["lt","lithuanian"],["la","latin"],["mi","maori"],["ml","malayalam"],["cy","welsh"],["sk","slovak"],["te","telugu"],["fa","persian"],["lv","latvian"],["bn","bengali"],["sr","serbian"],["az","azerbaijani"],["sl","slovenian"],["kn","kannada"],["et","estonian"],["mk","macedonian"],["br","breton"],["eu","basque"],["is","icelandic"],["hy","armenian"],["ne","nepali"],["mn","mongolian"],["bs","bosnian"],["kk","kazakh"],["sq","albanian"],["sw","swahili"],["gl","galician"],["mr","marathi"],["pa","punjabi"],["si","sinhala"],["km","khmer"],["sn","shona"],["yo","yoruba"],["so","somali"],["af","afrikaans"],["oc","occitan"],["ka","georgian"],["be","belarusian"],["tg","tajik"],["sd","sindhi"],["gu","gujarati"],["am","amharic"],["yi","yiddish"],["lo","lao"],["uz","uzbek"],["fo","faroese"],["ht","haitian creole"],["ps","pashto"],["tk","turkmen"],["nn","nynorsk"],["mt","maltese"],["sa","sanskrit"],["lb","luxembourgish"],["my","myanmar"],["bo","tibetan"],["tl","tagalog"],["mg","malagasy"],["as","assamese"],["tt","tatar"],["haw","hawaiian"],["ln","lingala"],["ha","hausa"],["ba","bashkir"],["jw","javanese"],["su","sundanese"]],D=new Map(w),W=new Map([...w.map(([j,y])=>[y,j]),["burmese","my"],["valencian","ca"],["flemish","nl"],["haitian","ht"],["letzeburgesch","lb"],["pushto","ps"],["panjabi","pa"],["moldavian","ro"],["moldovan","ro"],["sinhalese","si"],["castilian","es"]]);function te(j){j=j.toLowerCase();let y=W.get(j);if(y===void 0)if(D.has(j))y=j;else{const v=j.length===2?D.keys():D.values();throw new Error(`Language "${j}" is not supported. Must be one of: ${JSON.stringify(v)}`)}return y}},"./src/models/whisper/feature_extraction_whisper.js":(Ae,F,r)=>{r.r(F),r.d(F,{WhisperFeatureExtractor:()=>te});var w=r("./src/base/feature_extraction_utils.js");r("./src/utils/tensor.js");var D=r("./src/utils/audio.js"),W=r("./src/utils/maths.js");class te extends w.FeatureExtractor{constructor(y){super(y),this.config.mel_filters??=(0,D.mel_filter_bank)(Math.floor(1+this.config.n_fft/2),this.config.feature_size,0,8e3,this.config.sampling_rate,"slaney","slaney"),this.window=(0,D.window_function)(this.config.n_fft,"hann")}async _extract_fbank_features(y){const P=await(0,D.spectrogram)(y,this.window,this.config.n_fft,this.config.hop_length,{power:2,mel_filters:this.config.mel_filters,log_mel:"log10",max_num_frames:this.config.nb_max_frames}),v=P.data,T=(0,W.max)(v)[0];for(let b=0;b<v.length;++b)v[b]=(Math.max(v[b],T-8)+4)/4;return P}async _call(y){(0,w.validate_audio_inputs)(y,"WhisperFeatureExtractor");let P;return y.length>this.config.n_samples?(console.warn("Attempting to extract features for audio longer than 30 seconds. If using a pipeline to extract transcript from a long audio clip, remember to specify `chunk_length_s` and/or `stride_length_s`."),P=y.slice(0,this.config.n_samples)):(P=new Float32Array(this.config.n_samples),P.set(y)),{input_features:(await this._extract_fbank_features(P)).unsqueeze_(0)}}}},"./src/models/whisper/generation_whisper.js":(Ae,F,r)=>{r.r(F),r.d(F,{WhisperGenerationConfig:()=>D});var w=r("./src/generation/configuration_utils.js");class D extends w.GenerationConfig{return_timestamps=null;return_token_timestamps=null;num_frames=null;alignment_heads=null;task=null;language=null;no_timestamps_token_id=null;prompt_ids=null;is_multilingual=null;lang_to_id=null;task_to_id=null;max_initial_timestamp_index=1}},"./src/models/whisper/processing_whisper.js":(Ae,F,r)=>{r.r(F),r.d(F,{WhisperProcessor:()=>te});var w=r("./src/models/auto/feature_extraction_auto.js"),D=r("./src/tokenizers.js"),W=r("./src/base/processing_utils.js");class te extends W.Processor{static tokenizer_class=D.AutoTokenizer;static feature_extractor_class=w.AutoFeatureExtractor;async _call(y){return await this.feature_extractor(y)}}},"./src/models/yolos/image_processing_yolos.js":(Ae,F,r)=>{r.r(F),r.d(F,{YolosFeatureExtractor:()=>W,YolosImageProcessor:()=>D});var w=r("./src/base/image_processors_utils.js");class D extends w.ImageProcessor{post_process_object_detection(...j){return(0,w.post_process_object_detection)(...j)}}class W extends D{}},"./src/ops/registry.js":(Ae,F,r)=>{r.r(F),r.d(F,{TensorOpRegistry:()=>te});var w=r("./src/backends/onnx.js"),D=r("./src/utils/tensor.js");const W=async(j,y,P)=>{const v=await(0,w.createInferenceSession)(new Uint8Array(j),y);return async T=>{const b=(0,w.isONNXProxy)(),z=Object.fromEntries(Object.entries(T).map(([re,ae])=>[re,(b?ae.clone():ae).ort_tensor])),K=await v.run(z);return Array.isArray(P)?P.map(re=>new D.Tensor(K[re])):new D.Tensor(K[P])}};class te{static session_options={};static get nearest_interpolate_4d(){return this._nearest_interpolate_4d||(this._nearest_interpolate_4d=W([8,10,18,0,58,129,1,10,41,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,18,10,4,109,111,100,101,34,7,110,101,97,114,101,115,116,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,21],this.session_options,"y")),this._nearest_interpolate_4d}static get bilinear_interpolate_4d(){return this._bilinear_interpolate_4d||(this._bilinear_interpolate_4d=W([8,9,18,0,58,128,1,10,40,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,17,10,4,109,111,100,101,34,6,108,105,110,101,97,114,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bilinear_interpolate_4d}static get bicubic_interpolate_4d(){return this._bicubic_interpolate_4d||(this._bicubic_interpolate_4d=W([8,9,18,0,58,127,10,39,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,16,10,4,109,111,100,101,34,5,99,117,98,105,99,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bicubic_interpolate_4d}static get matmul(){return this._matmul||(this._matmul=W([8,9,18,0,58,55,10,17,10,1,97,10,1,98,18,1,99,34,6,77,97,116,77,117,108,18,1,114,90,9,10,1,97,18,4,10,2,8,1,90,9,10,1,98,18,4,10,2,8,1,98,9,10,1,99,18,4,10,2,8,1,66,2,16,20],this.session_options,"c")),this._matmul}static get stft(){return this._stft||(this._stft=W([8,7,18,0,58,148,1,10,38,10,1,115,10,1,106,10,1,119,10,1,108,18,1,111,34,4,83,84,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,115,90,26,10,1,115,18,21,10,19,8,1,18,15,10,3,18,1,98,10,3,18,1,115,10,3,18,1,99,90,11,10,1,106,18,6,10,4,8,7,18,0,90,16,10,1,119,18,11,10,9,8,1,18,5,10,3,18,1,119,90,11,10,1,108,18,6,10,4,8,7,18,0,98,31,10,1,111,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,102,10,3,18,1,100,10,3,18,1,99,66,2,16,17],this.session_options,"o")),this._stft}static get rfft(){return this._rfft||(this._rfft=W([8,9,18,0,58,97,10,33,10,1,120,10,0,10,1,97,18,1,121,34,3,68,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,100,90,21,10,1,120,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,90,11,10,1,97,18,6,10,4,8,7,18,0,98,21,10,1,121,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,66,2,16,20],this.session_options,"y")),this._rfft}static get top_k(){return this._top_k||(this._top_k=W([8,10,18,0,58,73,10,18,10,1,120,10,1,107,18,1,118,18,1,105,34,4,84,111,112,75,18,1,116,90,9,10,1,120,18,4,10,2,8,1,90,15,10,1,107,18,10,10,8,8,7,18,4,10,2,8,1,98,9,10,1,118,18,4,10,2,8,1,98,9,10,1,105,18,4,10,2,8,7,66,2,16,21],this.session_options,["v","i"])),this._top_k}static get slice(){return this._slice||(this._slice=W([8,7,18,0,58,96,10,25,10,1,120,10,1,115,10,1,101,10,1,97,10,1,116,18,1,121,34,5,83,108,105,99,101,18,1,114,90,9,10,1,120,18,4,10,2,8,1,90,9,10,1,115,18,4,10,2,8,7,90,9,10,1,101,18,4,10,2,8,7,90,9,10,1,97,18,4,10,2,8,7,90,9,10,1,116,18,4,10,2,8,7,98,9,10,1,121,18,4,10,2,8,1,66,2,16,13],this.session_options,"y")),this._slice}}},"./src/pipelines.js":(Ae,F,r)=>{r.r(F),r.d(F,{AudioClassificationPipeline:()=>ue,AutomaticSpeechRecognitionPipeline:()=>Pe,DepthEstimationPipeline:()=>De,DocumentQuestionAnsweringPipeline:()=>Z,FeatureExtractionPipeline:()=>Q,FillMaskPipeline:()=>X,ImageClassificationPipeline:()=>Fe,ImageFeatureExtractionPipeline:()=>le,ImageSegmentationPipeline:()=>Ge,ImageToImagePipeline:()=>be,ImageToTextPipeline:()=>ve,ObjectDetectionPipeline:()=>ut,Pipeline:()=>re,QuestionAnsweringPipeline:()=>G,SummarizationPipeline:()=>$,Text2TextGenerationPipeline:()=>I,TextClassificationPipeline:()=>ae,TextGenerationPipeline:()=>x,TextToAudioPipeline:()=>he,TokenClassificationPipeline:()=>B,TranslationPipeline:()=>g,ZeroShotAudioClassificationPipeline:()=>fe,ZeroShotClassificationPipeline:()=>J,ZeroShotImageClassificationPipeline:()=>Re,ZeroShotObjectDetectionPipeline:()=>de,pipeline:()=>ne});var w=r("./src/tokenizers.js"),D=r("./src/models.js"),W=r("./src/models/auto/processing_auto.js");r("./src/base/processing_utils.js");var te=r("./src/utils/generic.js"),j=r("./src/utils/core.js"),y=r("./src/utils/maths.js"),P=r("./src/utils/audio.js"),v=r("./src/utils/tensor.js"),T=r("./src/utils/image.js");async function b($e){return Array.isArray($e)||($e=[$e]),await Promise.all($e.map(ie=>T.RawImage.read(ie)))}async function z($e,ie){return Array.isArray($e)||($e=[$e]),await Promise.all($e.map(Me=>typeof Me=="string"||Me instanceof URL?(0,P.read_audio)(Me,ie):Me instanceof Float64Array?new Float32Array(Me):Me))}function K($e,ie){ie&&($e=$e.map(Be=>Be|0));const[Me,je,Ne,Ve]=$e;return{xmin:Me,ymin:je,xmax:Ne,ymax:Ve}}class re extends te.Callable{constructor({task:ie,model:Me,tokenizer:je=null,processor:Ne=null}){super(),this.task=ie,this.model=Me,this.tokenizer=je,this.processor=Ne}async dispose(){await this.model.dispose()}}class ae extends re{constructor(ie){super(ie)}async _call(ie,{top_k:Me=1}={}){const je=this.tokenizer(ie,{padding:!0,truncation:!0}),Ne=await this.model(je),Ve=this.model.config.problem_type==="multi_label_classification"?ot=>ot.sigmoid():ot=>new v.Tensor("float32",(0,y.softmax)(ot.data),ot.dims),Be=this.model.config.id2label,Qe=[];for(const ot of Ne.logits){const gt=Ve(ot),lt=await(0,v.topk)(gt,Me),dt=lt[0].tolist(),oe=lt[1].tolist().map((q,_e)=>({label:Be?Be[q]:`LABEL_${q}`,score:dt[_e]}));Me===1?Qe.push(...oe):Qe.push(oe)}return Array.isArray(ie)||Me===1?Qe:Qe[0]}}class B extends re{constructor(ie){super(ie)}async _call(ie,{ignore_labels:Me=["O"]}={}){const je=Array.isArray(ie),Ne=this.tokenizer(je?ie:[ie],{padding:!0,truncation:!0}),Be=(await this.model(Ne)).logits,Qe=this.model.config.id2label,ot=[];for(let gt=0;gt<Be.dims[0];++gt){const lt=Ne.input_ids[gt],dt=Be[gt],A=[];for(let oe=0;oe<dt.dims[0];++oe){const q=dt[oe],_e=(0,y.max)(q.data)[1],Se=Qe?Qe[_e]:`LABEL_${_e}`;if(Me.includes(Se))continue;const He=this.tokenizer.decode([lt[oe].item()],{skip_special_tokens:!0});if(He==="")continue;const et=(0,y.softmax)(q.data);A.push({entity:Se,score:et[_e],index:oe,word:He})}ot.push(A)}return je?ot:ot[0]}}class G extends re{constructor(ie){super(ie)}async _call(ie,Me,{top_k:je=1}={}){const Ne=this.tokenizer(ie,{text_pair:Me,padding:!0,truncation:!0}),{start_logits:Ve,end_logits:Be}=await this.model(Ne),Qe=Ne.input_ids.tolist(),ot=Ne.attention_mask.tolist(),gt=this.tokenizer.all_special_ids,lt=[];for(let dt=0;dt<Ve.dims[0];++dt){const A=Qe[dt],oe=A.findIndex(it=>it==this.tokenizer.sep_token_id);ot[dt].map((it,ct)=>it==1&&(ct===0||ct>oe&&gt.findIndex(vt=>vt==A[ct])===-1));const q=Ve[dt].tolist(),_e=Be[dt].tolist();for(let it=1;it<q.length;++it)(ot[dt]==0||it<=oe||gt.findIndex(ct=>ct==A[it])!==-1)&&(q[it]=-1/0,_e[it]=-1/0);const Se=(0,y.softmax)(q).map((it,ct)=>[it,ct]),He=(0,y.softmax)(_e).map((it,ct)=>[it,ct]);Se[0][0]=0,He[0][0]=0;const et=(0,j.product)(Se,He).filter(it=>it[0][1]<=it[1][1]).map(it=>[it[0][1],it[1][1],it[0][0]*it[1][0]]).sort((it,ct)=>ct[2]-it[2]);for(let it=0;it<Math.min(et.length,je);++it){const[ct,vt,Yt]=et[it],ts=A.slice(ct,vt+1),xs=this.tokenizer.decode(ts,{skip_special_tokens:!0});lt.push({answer:xs,score:Yt})}}return je===1?lt[0]:lt}}class X extends re{constructor(ie){super(ie)}async _call(ie,{top_k:Me=5}={}){const je=this.tokenizer(ie,{padding:!0,truncation:!0}),{logits:Ne}=await this.model(je),Ve=[],Be=je.input_ids.tolist();for(let Qe=0;Qe<Be.length;++Qe){const ot=Be[Qe],gt=ot.findIndex(q=>q==this.tokenizer.mask_token_id);if(gt===-1)throw Error(`Mask token (${this.tokenizer.mask_token}) not found in text.`);const lt=Ne[Qe][gt],dt=await(0,v.topk)(new v.Tensor("float32",(0,y.softmax)(lt.data),lt.dims),Me),A=dt[0].tolist(),oe=dt[1].tolist();Ve.push(oe.map((q,_e)=>{const Se=ot.slice();return Se[gt]=q,{score:A[_e],token:Number(q),token_str:this.tokenizer.decode([q]),sequence:this.tokenizer.decode(Se,{skip_special_tokens:!0})}}))}return Array.isArray(ie)?Ve:Ve[0]}}class I extends re{_key="generated_text";constructor(ie){super(ie)}async _call(ie,Me={}){Array.isArray(ie)||(ie=[ie]),this.model.config.prefix&&(ie=ie.map(ot=>this.model.config.prefix+ot));const je=this.model.config.task_specific_params;je&&je[this.task]&&je[this.task].prefix&&(ie=ie.map(ot=>je[this.task].prefix+ot));const Ne=this.tokenizer,Ve={padding:!0,truncation:!0};let Be;this instanceof g&&"_build_translation_inputs"in Ne?Be=Ne._build_translation_inputs(ie,Ve,Me):Be=Ne(ie,Ve);const Qe=await this.model.generate({...Be,...Me});return Ne.batch_decode(Qe,{skip_special_tokens:!0}).map(ot=>({[this._key]:ot}))}}class $ extends I{_key="summary_text";constructor(ie){super(ie)}}class g extends I{_key="translation_text";constructor(ie){super(ie)}}function C($e){return Array.isArray($e)&&$e.every(ie=>"role"in ie&&"content"in ie)}class x extends re{constructor(ie){super(ie)}async _call(ie,Me={}){let je=!1,Ne=!1,Ve;if(typeof ie=="string")Ve=ie=[ie];else if(Array.isArray(ie)&&ie.every(oe=>typeof oe=="string"))je=!0,Ve=ie;else{if(C(ie))ie=[ie];else if(Array.isArray(ie)&&ie.every(C))je=!0;else throw new Error("Input must be a string, an array of strings, a Chat, or an array of Chats");Ne=!0,Ve=ie.map(oe=>this.tokenizer.apply_chat_template(oe,{tokenize:!1,add_generation_prompt:!0}))}const Be=Me.add_special_tokens??!1,Qe=Ne?!1:Me.return_full_text??!0;this.tokenizer.padding_side="left";const ot=this.tokenizer(Ve,{add_special_tokens:Be,padding:!0,truncation:!0}),gt=await this.model.generate({...ot,...Me}),lt=this.tokenizer.batch_decode(gt,{skip_special_tokens:!0});let dt;!Qe&&ot.input_ids.dims.at(-1)>0&&(dt=this.tokenizer.batch_decode(ot.input_ids,{skip_special_tokens:!0}).map(oe=>oe.length));const A=Array.from({length:ie.length},oe=>[]);for(let oe=0;oe<lt.length;++oe){const q=Math.floor(oe/gt.dims[0]*ie.length);dt&&(lt[oe]=lt[oe].slice(dt[q])),A[q].push({generated_text:Ne?[...ie[q],{role:"assistant",content:lt[oe]}]:lt[oe]})}return!je&&A.length===1?A[0]:A}}class J extends re{constructor(ie){super(ie),this.label2id=Object.fromEntries(Object.entries(this.model.config.label2id).map(([Me,je])=>[Me.toLowerCase(),je])),this.entailment_id=this.label2id.entailment,this.entailment_id===void 0&&(console.warn("Could not find 'entailment' in label2id mapping. Using 2 as entailment_id."),this.entailment_id=2),this.contradiction_id=this.label2id.contradiction??this.label2id.not_entailment,this.contradiction_id===void 0&&(console.warn("Could not find 'contradiction' in label2id mapping. Using 0 as contradiction_id."),this.contradiction_id=0)}async _call(ie,Me,{hypothesis_template:je="This example is {}.",multi_label:Ne=!1}={}){const Ve=Array.isArray(ie);Ve||(ie=[ie]),Array.isArray(Me)||(Me=[Me]);const Be=Me.map(gt=>je.replace("{}",gt)),Qe=Ne||Me.length===1,ot=[];for(const gt of ie){const lt=[];for(const oe of Be){const q=this.tokenizer(gt,{text_pair:oe,padding:!0,truncation:!0}),_e=await this.model(q);Qe?lt.push([_e.logits.data[this.contradiction_id],_e.logits.data[this.entailment_id]]):lt.push(_e.logits.data[this.entailment_id])}const A=(Qe?lt.map(oe=>(0,y.softmax)(oe)[1]):(0,y.softmax)(lt)).map((oe,q)=>[oe,q]).sort((oe,q)=>q[0]-oe[0]);ot.push({sequence:gt,labels:A.map(oe=>Me[oe[1]]),scores:A.map(oe=>oe[0])})}return Ve?ot:ot[0]}}class Q extends re{constructor(ie){super(ie)}async _call(ie,{pooling:Me="none",normalize:je=!1,quantize:Ne=!1,precision:Ve="binary"}={}){const Be=this.tokenizer(ie,{padding:!0,truncation:!0}),Qe=await this.model(Be);let ot=Qe.last_hidden_state??Qe.logits??Qe.token_embeddings;if(Me!=="none")if(Me==="mean")ot=(0,v.mean_pooling)(ot,Be.attention_mask);else if(Me==="cls")ot=ot.slice(null,0);else throw Error(`Pooling method '${Me}' not supported.`);return je&&(ot=ot.normalize(2,-1)),Ne&&(ot=(0,v.quantize_embeddings)(ot,Ve)),ot}}class le extends re{constructor(ie){super(ie)}async _call(ie,{pool:Me=null}={}){const je=await b(ie),{pixel_values:Ne}=await this.processor(je),Ve=await this.model({pixel_values:Ne});let Be;if(Me){if(!("pooler_output"in Ve))throw Error("No pooled output was returned. Make sure the model has a 'pooler' layer when using the 'pool' option.");Be=Ve.pooler_output}else Be=Ve.last_hidden_state??Ve.logits??Ve.image_embeds;return Be}}class ue extends re{constructor(ie){super(ie)}async _call(ie,{top_k:Me=5}={}){const je=this.processor.feature_extractor.config.sampling_rate,Ne=await z(ie,je),Ve=this.model.config.id2label,Be=[];for(const Qe of Ne){const ot=await this.processor(Qe),lt=(await this.model(ot)).logits[0],dt=await(0,v.topk)(new v.Tensor("float32",(0,y.softmax)(lt.data),lt.dims),Me),A=dt[0].tolist(),q=dt[1].tolist().map((_e,Se)=>({label:Ve?Ve[_e]:`LABEL_${_e}`,score:A[Se]}));Be.push(q)}return Array.isArray(ie)?Be:Be[0]}}class fe extends re{constructor(ie){super(ie)}async _call(ie,Me,{hypothesis_template:je="This is a sound of {}."}={}){const Ne=!Array.isArray(ie);Ne&&(ie=[ie]);const Ve=Me.map(lt=>je.replace("{}",lt)),Be=this.tokenizer(Ve,{padding:!0,truncation:!0}),Qe=this.processor.feature_extractor.config.sampling_rate,ot=await z(ie,Qe),gt=[];for(const lt of ot){const dt=await this.processor(lt),A=await this.model({...Be,...dt}),oe=(0,y.softmax)(A.logits_per_audio.data);gt.push([...oe].map((q,_e)=>({score:q,label:Me[_e]})))}return Ne?gt[0]:gt}}class Pe extends re{constructor(ie){super(ie)}async _call(ie,Me={}){switch(this.model.config.model_type){case"whisper":return this._call_whisper(ie,Me);case"wav2vec2":case"wav2vec2-bert":case"unispeech":case"unispeech-sat":case"hubert":return this._call_wav2vec2(ie,Me);case"moonshine":return this._call_moonshine(ie,Me);default:throw new Error(`AutomaticSpeechRecognitionPipeline does not support model type '${this.model.config.model_type}'.`)}}async _call_wav2vec2(ie,Me){Me.language&&console.warn('`language` parameter is not yet supported for `wav2vec2` models, defaulting to "English".'),Me.task&&console.warn('`task` parameter is not yet supported for `wav2vec2` models, defaulting to "transcribe".');const je=!Array.isArray(ie);je&&(ie=[ie]);const Ne=this.processor.feature_extractor.config.sampling_rate,Ve=await z(ie,Ne),Be=[];for(const Qe of Ve){const ot=await this.processor(Qe),lt=(await this.model(ot)).logits[0],dt=[];for(const oe of lt)dt.push((0,y.max)(oe.data)[1]);const A=this.tokenizer.decode(dt);Be.push({text:A})}return je?Be[0]:Be}async _call_whisper(ie,Me){const je=Me.return_timestamps??!1,Ne=Me.chunk_length_s??0,Ve=Me.force_full_sequences??!1;let Be=Me.stride_length_s??null;const Qe={...Me};je==="word"&&(Qe.return_token_timestamps=!0,Qe.return_timestamps=!1);const ot=!Array.isArray(ie);ot&&(ie=[ie]);const gt=this.processor.feature_extractor.config.chunk_length/this.model.config.max_source_positions,lt=this.processor.feature_extractor.config.hop_length,dt=this.processor.feature_extractor.config.sampling_rate,A=await z(ie,dt),oe=[];for(const q of A){let _e=[];if(Ne>0){if(Be===null)Be=Ne/6;else if(Ne<=Be)throw Error("`chunk_length_s` must be larger than `stride_length_s`.");const et=dt*Ne,it=dt*Be,ct=et-2*it;let vt=0;for(;;){const Yt=vt+et,ts=q.subarray(vt,Yt),xs=await this.processor(ts),ms=vt===0,Ps=Yt>=q.length;if(_e.push({stride:[ts.length,ms?0:it,Ps?0:it],input_features:xs.input_features,is_last:Ps}),Ps)break;vt+=ct}}else _e=[{stride:[q.length,0,0],input_features:(await this.processor(q)).input_features,is_last:!0}];for(const et of _e){Qe.num_frames=Math.floor(et.stride[0]/lt);const it=await this.model.generate({inputs:et.input_features,...Qe});je==="word"?(et.tokens=it.sequences.tolist()[0],et.token_timestamps=it.token_timestamps.tolist()[0].map(ct=>(0,y.round)(ct,2))):et.tokens=it[0].tolist(),et.stride=et.stride.map(ct=>ct/dt)}const[Se,He]=this.tokenizer._decode_asr(_e,{time_precision:gt,return_timestamps:je,force_full_sequences:Ve});oe.push({text:Se,...He})}return ot?oe[0]:oe}async _call_moonshine(ie,Me){const je=!Array.isArray(ie);je&&(ie=[ie]);const Ne=this.processor.feature_extractor.config.sampling_rate,Ve=await z(ie,Ne),Be=[];for(const Qe of Ve){const ot=await this.processor(Qe),gt=Math.floor(Qe.length/Ne)*6,lt=await this.model.generate({max_new_tokens:gt,...Me,...ot}),dt=this.processor.batch_decode(lt,{skip_special_tokens:!0})[0];Be.push({text:dt})}return je?Be[0]:Be}}class ve extends re{constructor(ie){super(ie)}async _call(ie,Me={}){const je=Array.isArray(ie),Ne=await b(ie),{pixel_values:Ve}=await this.processor(Ne),Be=[];for(const Qe of Ve){Qe.dims=[1,...Qe.dims];const ot=await this.model.generate({inputs:Qe,...Me}),gt=this.tokenizer.batch_decode(ot,{skip_special_tokens:!0}).map(lt=>({generated_text:lt.trim()}));Be.push(gt)}return je?Be:Be[0]}}class Fe extends re{constructor(ie){super(ie)}async _call(ie,{top_k:Me=5}={}){const je=await b(ie),{pixel_values:Ne}=await this.processor(je),Ve=await this.model({pixel_values:Ne}),Be=this.model.config.id2label,Qe=[];for(const ot of Ve.logits){const gt=await(0,v.topk)(new v.Tensor("float32",(0,y.softmax)(ot.data),ot.dims),Me),lt=gt[0].tolist(),A=gt[1].tolist().map((oe,q)=>({label:Be?Be[oe]:`LABEL_${oe}`,score:lt[q]}));Qe.push(A)}return Array.isArray(ie)?Qe:Qe[0]}}class Ge extends re{constructor(ie){super(ie),this.subtasks_mapping={panoptic:"post_process_panoptic_segmentation",instance:"post_process_instance_segmentation",semantic:"post_process_semantic_segmentation"}}async _call(ie,{threshold:Me=.5,mask_threshold:je=.5,overlap_mask_area_threshold:Ne=.8,label_ids_to_fuse:Ve=null,target_sizes:Be=null,subtask:Qe=null}={}){if(Array.isArray(ie)&&ie.length!==1)throw Error("Image segmentation pipeline currently only supports a batch size of 1.");const gt=await b(ie),lt=gt.map(He=>[He.height,He.width]),{pixel_values:dt,pixel_mask:A}=await this.processor(gt),oe=await this.model({pixel_values:dt,pixel_mask:A});let q=null;if(Qe!==null)q=this.subtasks_mapping[Qe];else for(let[He,et]of Object.entries(this.subtasks_mapping))if(et in this.processor.image_processor){q=this.processor.image_processor[et].bind(this.processor.image_processor),Qe=He;break}const _e=this.model.config.id2label,Se=[];if(Qe==="panoptic"||Qe==="instance"){const He=q(oe,Me,je,Ne,Ve,Be??lt)[0],et=He.segmentation;for(const it of He.segments_info){const ct=new Uint8ClampedArray(et.data.length);for(let Yt=0;Yt<et.data.length;++Yt)et.data[Yt]===it.id&&(ct[Yt]=255);const vt=new T.RawImage(ct,et.dims[1],et.dims[0],1);Se.push({score:it.score,label:_e[it.label_id],mask:vt})}}else if(Qe==="semantic"){const{segmentation:He,labels:et}=q(oe,Be??lt)[0];for(const it of et){const ct=new Uint8ClampedArray(He.data.length);for(let Yt=0;Yt<He.data.length;++Yt)He.data[Yt]===it&&(ct[Yt]=255);const vt=new T.RawImage(ct,He.dims[1],He.dims[0],1);Se.push({score:null,label:_e[it],mask:vt})}}else throw Error(`Subtask ${Qe} not supported.`);return Se}}class Re extends re{constructor(ie){super(ie)}async _call(ie,Me,{hypothesis_template:je="This is a photo of {}"}={}){const Ne=Array.isArray(ie),Ve=await b(ie),Be=Me.map(A=>je.replace("{}",A)),Qe=this.tokenizer(Be,{padding:this.model.config.model_type==="siglip"?"max_length":!0,truncation:!0}),{pixel_values:ot}=await this.processor(Ve),gt=await this.model({...Qe,pixel_values:ot}),lt=this.model.config.model_type==="siglip"?A=>A.sigmoid().data:A=>(0,y.softmax)(A.data),dt=[];for(const A of gt.logits_per_image){const q=[...lt(A)].map((_e,Se)=>({score:_e,label:Me[Se]}));q.sort((_e,Se)=>Se.score-_e.score),dt.push(q)}return Ne?dt:dt[0]}}class ut extends re{constructor(ie){super(ie)}async _call(ie,{threshold:Me=.9,percentage:je=!1}={}){const Ne=Array.isArray(ie);if(Ne&&ie.length!==1)throw Error("Object detection pipeline currently only supports a batch size of 1.");const Ve=await b(ie),Be=je?null:Ve.map(oe=>[oe.height,oe.width]),{pixel_values:Qe,pixel_mask:ot}=await this.processor(Ve),gt=await this.model({pixel_values:Qe,pixel_mask:ot}),lt=this.processor.image_processor.post_process_object_detection(gt,Me,Be),dt=this.model.config.id2label,A=lt.map(oe=>oe.boxes.map((q,_e)=>({score:oe.scores[_e],label:dt[oe.classes[_e]],box:K(q,!je)})));return Ne?A:A[0]}}class de extends re{constructor(ie){super(ie)}async _call(ie,Me,{threshold:je=.1,top_k:Ne=null,percentage:Ve=!1}={}){const Be=Array.isArray(ie),Qe=await b(ie),ot=this.tokenizer(Me,{padding:!0,truncation:!0}),gt=await this.processor(Qe),lt=[];for(let dt=0;dt<Qe.length;++dt){const A=Qe[dt],oe=Ve?null:[[A.height,A.width]],q=gt.pixel_values[dt].unsqueeze_(0),_e=await this.model({...ot,pixel_values:q}),Se=this.processor.image_processor.post_process_object_detection(_e,je,oe,!0)[0];let He=Se.boxes.map((et,it)=>({score:Se.scores[it],label:Me[Se.classes[it]],box:K(et,!Ve)})).sort((et,it)=>it.score-et.score);Ne!==null&&(He=He.slice(0,Ne)),lt.push(He)}return Be?lt:lt[0]}}class Z extends re{constructor(ie){super(ie)}async _call(ie,Me,je={}){const Ne=(await b(ie))[0],{pixel_values:Ve}=await this.processor(Ne),Be=`<s_docvqa><s_question>${Me}</s_question><s_answer>`,Qe=this.tokenizer(Be,{add_special_tokens:!1,padding:!0,truncation:!0}).input_ids,ot=await this.model.generate({inputs:Ve,max_length:this.model.config.decoder.max_position_embeddings,decoder_input_ids:Qe,...je}),lt=this.tokenizer.batch_decode(ot)[0].match(/<s_answer>(.*?)<\/s_answer>/);let dt=null;return lt&&lt.length>=2&&(dt=lt[1].trim()),[{answer:dt}]}}class he extends re{DEFAULT_VOCODER_ID="Xenova/speecht5_hifigan";constructor(ie){super(ie),this.vocoder=ie.vocoder??null}async _call(ie,{speaker_embeddings:Me=null}={}){return this.processor?this._call_text_to_spectrogram(ie,{speaker_embeddings:Me}):this._call_text_to_waveform(ie)}async _call_text_to_waveform(ie){const Me=this.tokenizer(ie,{padding:!0,truncation:!0}),{waveform:je}=await this.model(Me),Ne=this.model.config.sampling_rate;return{audio:je.data,sampling_rate:Ne}}async _call_text_to_spectrogram(ie,{speaker_embeddings:Me}){if(this.vocoder||(console.log("No vocoder specified, using default HifiGan vocoder."),this.vocoder=await D.AutoModel.from_pretrained(this.DEFAULT_VOCODER_ID,{dtype:"fp32"})),(typeof Me=="string"||Me instanceof URL)&&(Me=new Float32Array(await(await fetch(Me)).arrayBuffer())),Me instanceof Float32Array)Me=new v.Tensor("float32",Me,[1,Me.length]);else if(!(Me instanceof v.Tensor))throw new Error("Speaker embeddings must be a `Tensor`, `Float32Array`, `string`, or `URL`.");const{input_ids:je}=this.tokenizer(ie,{padding:!0,truncation:!0}),{waveform:Ne}=await this.model.generate_speech(je,Me,{vocoder:this.vocoder}),Ve=this.processor.feature_extractor.config.sampling_rate;return{audio:Ne.data,sampling_rate:Ve}}}class be extends re{constructor(ie){super(ie)}async _call(ie){const Me=await b(ie),je=await this.processor(Me),Ne=await this.model(je),Ve=[];for(const Be of Ne.reconstruction){const Qe=Be.squeeze().clamp_(0,1).mul_(255).round_().to("uint8");Ve.push(T.RawImage.fromTensor(Qe))}return Ve.length>1?Ve:Ve[0]}}class De extends re{constructor(ie){super(ie)}async _call(ie){const Me=await b(ie),je=await this.processor(Me),{predicted_depth:Ne}=await this.model(je),Ve=[];for(let Be=0;Be<Me.length;++Be){const Qe=Ne[Be],[ot,gt]=Qe.dims.slice(-2),[lt,dt]=Me[Be].size,A=(await(0,v.interpolate_4d)(Qe.view(1,1,ot,gt),{size:[dt,lt],mode:"bilinear"})).view(dt,lt),oe=A.min().item(),q=A.max().item(),_e=A.sub(oe).div_(q-oe).mul_(255).to("uint8").unsqueeze(0),Se=T.RawImage.fromTensor(_e);Ve.push({predicted_depth:A,depth:Se})}return Ve.length>1?Ve:Ve[0]}}const Ze=Object.freeze({"text-classification":{tokenizer:w.AutoTokenizer,pipeline:ae,model:D.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-finetuned-sst-2-english"},type:"text"},"token-classification":{tokenizer:w.AutoTokenizer,pipeline:B,model:D.AutoModelForTokenClassification,default:{model:"Xenova/bert-base-multilingual-cased-ner-hrl"},type:"text"},"question-answering":{tokenizer:w.AutoTokenizer,pipeline:G,model:D.AutoModelForQuestionAnswering,default:{model:"Xenova/distilbert-base-cased-distilled-squad"},type:"text"},"fill-mask":{tokenizer:w.AutoTokenizer,pipeline:X,model:D.AutoModelForMaskedLM,default:{model:"Xenova/bert-base-uncased"},type:"text"},summarization:{tokenizer:w.AutoTokenizer,pipeline:$,model:D.AutoModelForSeq2SeqLM,default:{model:"Xenova/distilbart-cnn-6-6"},type:"text"},translation:{tokenizer:w.AutoTokenizer,pipeline:g,model:D.AutoModelForSeq2SeqLM,default:{model:"Xenova/t5-small"},type:"text"},"text2text-generation":{tokenizer:w.AutoTokenizer,pipeline:I,model:D.AutoModelForSeq2SeqLM,default:{model:"Xenova/flan-t5-small"},type:"text"},"text-generation":{tokenizer:w.AutoTokenizer,pipeline:x,model:D.AutoModelForCausalLM,default:{model:"Xenova/gpt2"},type:"text"},"zero-shot-classification":{tokenizer:w.AutoTokenizer,pipeline:J,model:D.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-mnli"},type:"text"},"audio-classification":{pipeline:ue,model:D.AutoModelForAudioClassification,processor:W.AutoProcessor,default:{model:"Xenova/wav2vec2-base-superb-ks"},type:"audio"},"zero-shot-audio-classification":{tokenizer:w.AutoTokenizer,pipeline:fe,model:D.AutoModel,processor:W.AutoProcessor,default:{model:"Xenova/clap-htsat-unfused"},type:"multimodal"},"automatic-speech-recognition":{tokenizer:w.AutoTokenizer,pipeline:Pe,model:[D.AutoModelForSpeechSeq2Seq,D.AutoModelForCTC],processor:W.AutoProcessor,default:{model:"Xenova/whisper-tiny.en"},type:"multimodal"},"text-to-audio":{tokenizer:w.AutoTokenizer,pipeline:he,model:[D.AutoModelForTextToWaveform,D.AutoModelForTextToSpectrogram],processor:[W.AutoProcessor,null],default:{model:"Xenova/speecht5_tts"},type:"text"},"image-to-text":{tokenizer:w.AutoTokenizer,pipeline:ve,model:D.AutoModelForVision2Seq,processor:W.AutoProcessor,default:{model:"Xenova/vit-gpt2-image-captioning"},type:"multimodal"},"image-classification":{pipeline:Fe,model:D.AutoModelForImageClassification,processor:W.AutoProcessor,default:{model:"Xenova/vit-base-patch16-224"},type:"multimodal"},"image-segmentation":{pipeline:Ge,model:[D.AutoModelForImageSegmentation,D.AutoModelForSemanticSegmentation,D.AutoModelForUniversalSegmentation],processor:W.AutoProcessor,default:{model:"Xenova/detr-resnet-50-panoptic"},type:"multimodal"},"zero-shot-image-classification":{tokenizer:w.AutoTokenizer,pipeline:Re,model:D.AutoModel,processor:W.AutoProcessor,default:{model:"Xenova/clip-vit-base-patch32"},type:"multimodal"},"object-detection":{pipeline:ut,model:D.AutoModelForObjectDetection,processor:W.AutoProcessor,default:{model:"Xenova/detr-resnet-50"},type:"multimodal"},"zero-shot-object-detection":{tokenizer:w.AutoTokenizer,pipeline:de,model:D.AutoModelForZeroShotObjectDetection,processor:W.AutoProcessor,default:{model:"Xenova/owlvit-base-patch32"},type:"multimodal"},"document-question-answering":{tokenizer:w.AutoTokenizer,pipeline:Z,model:D.AutoModelForDocumentQuestionAnswering,processor:W.AutoProcessor,default:{model:"Xenova/donut-base-finetuned-docvqa"},type:"multimodal"},"image-to-image":{pipeline:be,model:D.AutoModelForImageToImage,processor:W.AutoProcessor,default:{model:"Xenova/swin2SR-classical-sr-x2-64"},type:"image"},"depth-estimation":{pipeline:De,model:D.AutoModelForDepthEstimation,processor:W.AutoProcessor,default:{model:"Xenova/dpt-large"},type:"image"},"feature-extraction":{tokenizer:w.AutoTokenizer,pipeline:Q,model:D.AutoModel,default:{model:"Xenova/all-MiniLM-L6-v2"},type:"text"},"image-feature-extraction":{processor:W.AutoProcessor,pipeline:le,model:[D.AutoModelForImageFeatureExtraction,D.AutoModel],default:{model:"Xenova/vit-base-patch16-224-in21k"},type:"image"}}),Ke=Object.freeze({"sentiment-analysis":"text-classification",ner:"token-classification",asr:"automatic-speech-recognition","text-to-speech":"text-to-audio",embeddings:"feature-extraction"});async function ne($e,ie=null,{progress_callback:Me=null,config:je=null,cache_dir:Ne=null,local_files_only:Ve=!1,revision:Be="main",device:Qe=null,dtype:ot=null,model_file_name:gt=null,session_options:lt={}}={}){$e=Ke[$e]??$e;const dt=Ze[$e.split("_",1)[0]];if(!dt)throw Error(`Unsupported pipeline: ${$e}. Must be one of [${Object.keys(Ze)}]`);ie||(ie=dt.default.model,console.log(`No model specified. Using default model: "${ie}".`));const A={progress_callback:Me,config:je,cache_dir:Ne,local_files_only:Ve,revision:Be,device:Qe,dtype:ot,model_file_name:gt,session_options:lt},oe=new Map([["tokenizer",dt.tokenizer],["model",dt.model],["processor",dt.processor]]),q=await Xe(oe,ie,A);q.task=$e,(0,j.dispatchCallback)(Me,{status:"ready",task:$e,model:ie});const _e=dt.pipeline;return new _e(q)}async function Xe($e,ie,Me){const je=Object.create(null),Ne=[];for(const[Ve,Be]of $e.entries()){if(!Be)continue;let Qe;Array.isArray(Be)?Qe=new Promise(async(ot,gt)=>{let lt;for(const dt of Be){if(dt===null){ot(null);return}try{ot(await dt.from_pretrained(ie,Me));return}catch(A){if(A.message?.includes("Unsupported model type"))lt=A;else if(A.message?.includes("Could not locate file"))lt=A;else{gt(A);return}}}gt(lt)}):Qe=Be.from_pretrained(ie,Me),je[Ve]=Qe,Ne.push(Qe)}await Promise.all(Ne);for(const[Ve,Be]of Object.entries(je))je[Ve]=await Be;return je}},"./src/tokenizers.js":(Ae,F,r)=>{r.r(F),r.d(F,{AlbertTokenizer:()=>Tr,AutoTokenizer:()=>Fn,BartTokenizer:()=>rs,BertTokenizer:()=>Vr,BlenderbotSmallTokenizer:()=>An,BlenderbotTokenizer:()=>pn,BloomTokenizer:()=>xn,CLIPTokenizer:()=>kn,CamembertTokenizer:()=>nt,CodeGenTokenizer:()=>Cn,CodeLlamaTokenizer:()=>Dr,CohereTokenizer:()=>In,ConvBertTokenizer:()=>Er,DebertaTokenizer:()=>rr,DebertaV2Tokenizer:()=>Pr,DistilBertTokenizer:()=>nr,ElectraTokenizer:()=>St,EsmTokenizer:()=>or,FalconTokenizer:()=>Lr,GPT2Tokenizer:()=>Kr,GPTNeoXTokenizer:()=>yr,GemmaTokenizer:()=>qr,Grok1Tokenizer:()=>dn,HerbertTokenizer:()=>cr,LlamaTokenizer:()=>Pn,M2M100Tokenizer:()=>Lt,MBart50Tokenizer:()=>Tn,MBartTokenizer:()=>pr,MPNetTokenizer:()=>Jn,MarianTokenizer:()=>zr,MgpstrTokenizer:()=>mn,MobileBertTokenizer:()=>Or,NllbTokenizer:()=>Mr,NougatTokenizer:()=>qs,PreTrainedTokenizer:()=>Bt,Qwen2Tokenizer:()=>un,RoFormerTokenizer:()=>Gr,RobertaTokenizer:()=>Yn,SiglipTokenizer:()=>Sn,SpeechT5Tokenizer:()=>ns,SqueezeBertTokenizer:()=>xr,T5Tokenizer:()=>ds,TokenizerModel:()=>le,VitsTokenizer:()=>hn,Wav2Vec2CTCTokenizer:()=>$n,WhisperTokenizer:()=>cn,XLMRobertaTokenizer:()=>En,XLMTokenizer:()=>pt,is_chinese_char:()=>X});var w=r("./src/utils/generic.js"),D=r("./src/utils/core.js"),W=r("./src/utils/hub.js"),te=r("./src/utils/maths.js"),j=r("./src/utils/tensor.js"),y=r("./src/utils/data-structures.js"),P=r("./node_modules/@huggingface/jinja/dist/index.js"),v=r("./src/models/whisper/common_whisper.js");async function T(xe,M){const Y=await Promise.all([(0,W.getModelJSON)(xe,"tokenizer.json",!0,M),(0,W.getModelJSON)(xe,"tokenizer_config.json",!0,M)]);return M.legacy!==null&&(Y[1].legacy=M.legacy),Y}function b(xe,M){const Y=[];let pe=0;for(const ge of xe.matchAll(M)){const Ie=ge[0];pe<ge.index&&Y.push(xe.slice(pe,ge.index)),Ie.length>0&&Y.push(Ie),pe=ge.index+Ie.length}return pe<xe.length&&Y.push(xe.slice(pe)),Y}function z(xe,M=!0){if(xe.Regex!==void 0){let Y=xe.Regex.replace(/\\([#&~])/g,"$1");for(const[pe,ge]of J)Y=Y.replaceAll(pe,ge);return new RegExp(Y,"gu")}else if(xe.String!==void 0){const Y=(0,D.escapeRegExp)(xe.String);return new RegExp(M?Y:`(${Y})`,"gu")}else return console.warn("Unknown pattern type:",xe),null}function K(xe){return new Map(Object.entries(xe))}function re(xe){const M=xe.dims;switch(M.length){case 1:return xe.tolist();case 2:if(M[0]!==1)throw new Error("Unable to decode tensor with `batch size !== 1`. Use `tokenizer.batch_decode(...)` for batched inputs.");return xe.tolist()[0];default:throw new Error(`Expected tensor to have 1-2 dimensions, got ${M.length}.`)}}function ae(xe){return xe.replace(/ \./g,".").replace(/ \?/g,"?").replace(/ \!/g,"!").replace(/ ,/g,",").replace(/ \' /g,"'").replace(/ n\'t/g,"n't").replace(/ \'m/g,"'m").replace(/ \'s/g,"'s").replace(/ \'ve/g,"'ve").replace(/ \'re/g,"'re")}function B(xe){return xe.replace(/\p{M}/gu,"")}function G(xe){return B(xe.toLowerCase())}function X(xe){return xe>=19968&&xe<=40959||xe>=13312&&xe<=19903||xe>=131072&&xe<=173791||xe>=173824&&xe<=177983||xe>=177984&&xe<=178207||xe>=178208&&xe<=183983||xe>=63744&&xe<=64255||xe>=194560&&xe<=195103}function I(xe,M,Y){const pe=[];let ge=0;for(;ge<xe.length;){if(pe.push(xe[ge]),(M.get(xe[ge])??Y)!==Y){++ge;continue}for(;++ge<xe.length&&(M.get(xe[ge])??Y)===Y;)M.get(pe.at(-1))!==Y&&(pe[pe.length-1]+=xe[ge])}return pe}function $(xe){return xe.match(/\S+/g)||[]}const g="\\p{P}\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007E",C=new RegExp(`^[${g}]+$`,"gu"),x=".,!?…。，、।۔،",J=new Map([["(?i:'s|'t|'re|'ve|'m|'ll|'d)","(?:'([sS]|[tT]|[rR][eE]|[vV][eE]|[mM]|[lL][lL]|[dD]))"],[` ?[^(\\s|[${x}])]+`,` ?[^\\s${x}]+`]]);class Q{constructor(M){this.content=M.content,this.id=M.id,this.single_word=M.single_word??!1,this.lstrip=M.lstrip??!1,this.rstrip=M.rstrip??!1,this.special=M.special??!1,this.normalized=M.normalized??null}}class le extends w.Callable{constructor(M){super(),this.config=M,this.vocab=[],this.tokens_to_ids=new Map,this.unk_token_id=void 0,this.unk_token=void 0,this.end_of_word_suffix=void 0,this.fuse_unk=this.config.fuse_unk??!1}static fromConfig(M,...Y){switch(M.type){case"WordPiece":return new ue(M);case"Unigram":return new fe(M,...Y);case"BPE":return new Fe(M);default:if(M.vocab)return Array.isArray(M.vocab)?new fe(M,...Y):new Ge(M,...Y);throw new Error(`Unknown TokenizerModel type: ${M.type}`)}}_call(M){return M=this.encode(M),this.fuse_unk&&(M=I(M,this.tokens_to_ids,this.unk_token_id)),M}encode(M){throw Error("encode should be implemented in subclass.")}convert_tokens_to_ids(M){return M.map(Y=>this.tokens_to_ids.get(Y)??this.unk_token_id)}convert_ids_to_tokens(M){return M.map(Y=>this.vocab[Y]??this.unk_token)}}class ue extends le{constructor(M){super(M),this.tokens_to_ids=K(M.vocab),this.unk_token_id=this.tokens_to_ids.get(M.unk_token),this.unk_token=M.unk_token,this.max_input_chars_per_word=M.max_input_chars_per_word??100,this.vocab=new Array(this.tokens_to_ids.size);for(const[Y,pe]of this.tokens_to_ids)this.vocab[pe]=Y}encode(M){const Y=[];for(const pe of M){const ge=[...pe];if(ge.length>this.max_input_chars_per_word){Y.push(this.unk_token);continue}let Ie=!1,qe=0;const _t=[];for(;qe<ge.length;){let wt=ge.length,yt=null;for(;qe<wt;){let Ye=ge.slice(qe,wt).join("");if(qe>0&&(Ye=this.config.continuing_subword_prefix+Ye),this.tokens_to_ids.has(Ye)){yt=Ye;break}--wt}if(yt===null){Ie=!0;break}_t.push(yt),qe=wt}Ie?Y.push(this.unk_token):Y.push(..._t)}return Y}}class fe extends le{constructor(M,Y){super(M);const pe=M.vocab.length;this.vocab=new Array(pe),this.scores=new Array(pe);for(let ge=0;ge<pe;++ge)[this.vocab[ge],this.scores[ge]]=M.vocab[ge];this.unk_token_id=M.unk_id,this.unk_token=this.vocab[M.unk_id],this.tokens_to_ids=new Map(this.vocab.map((ge,Ie)=>[ge,Ie])),this.bos_token=" ",this.bos_token_id=this.tokens_to_ids.get(this.bos_token),this.eos_token=Y.eos_token,this.eos_token_id=this.tokens_to_ids.get(this.eos_token),this.unk_token=this.vocab[this.unk_token_id],this.minScore=(0,te.min)(this.scores)[0],this.unk_score=this.minScore-10,this.scores[this.unk_token_id]=this.unk_score,this.trie=new y.CharTrie,this.trie.extend(this.vocab),this.fuse_unk=!0}populateNodes(M){const Y=M.chars,pe=1;let ge=0;for(;ge<Y.length;){let Ie=!1;const qe=Y.slice(ge).join(""),_t=this.trie.commonPrefixSearch(qe);for(const wt of _t){const yt=this.tokens_to_ids.get(wt),Ye=this.scores[yt],It=(0,D.len)(wt);M.insert(ge,It,Ye,yt),!Ie&&It===pe&&(Ie=!0)}Ie||M.insert(ge,pe,this.unk_score,this.unk_token_id),ge+=pe}}tokenize(M){const Y=new y.TokenLattice(M,this.bos_token_id,this.eos_token_id);return this.populateNodes(Y),Y.tokens()}encode(M){const Y=[];for(const pe of M){const ge=this.tokenize(pe);Y.push(...ge)}return Y}}const Pe=(()=>{const xe=[...Array.from({length:94},(ge,Ie)=>Ie+33),...Array.from({length:12},(ge,Ie)=>Ie+161),...Array.from({length:82},(ge,Ie)=>Ie+174)],M=xe.slice();let Y=0;for(let ge=0;ge<256;++ge)xe.includes(ge)||(xe.push(ge),M.push(256+Y),Y+=1);const pe=M.map(ge=>String.fromCharCode(ge));return Object.fromEntries(xe.map((ge,Ie)=>[ge,pe[Ie]]))})(),ve=(0,D.reverseDictionary)(Pe);class Fe extends le{constructor(M){super(M),this.tokens_to_ids=K(M.vocab),this.unk_token_id=this.tokens_to_ids.get(M.unk_token),this.unk_token=M.unk_token,this.vocab=new Array(this.tokens_to_ids.size);for(const[pe,ge]of this.tokens_to_ids)this.vocab[ge]=pe;const Y=Array.isArray(M.merges[0]);this.merges=Y?M.merges:M.merges.map(pe=>pe.split(" ",2)),this.bpe_ranks=new Map(this.merges.map((pe,ge)=>[JSON.stringify(pe),ge])),this.end_of_word_suffix=M.end_of_word_suffix,this.continuing_subword_suffix=M.continuing_subword_suffix??null,this.byte_fallback=this.config.byte_fallback??!1,this.byte_fallback&&(this.text_encoder=new TextEncoder),this.ignore_merges=this.config.ignore_merges??!1,this.cache=new Map}bpe(M){if(M.length===0)return[];const Y=this.cache.get(M);if(Y!==void 0)return Y;const pe=Array.from(M);this.end_of_word_suffix&&(pe[pe.length-1]+=this.end_of_word_suffix);let ge=[];if(pe.length>1){const Ie=new y.PriorityQueue((wt,yt)=>wt.score<yt.score);let qe={token:pe[0],bias:0,prev:null,next:null},_t=qe;for(let wt=1;wt<pe.length;++wt){const yt={bias:wt/pe.length,token:pe[wt],prev:_t,next:null};_t.next=yt,this._add_node(Ie,_t),_t=yt}for(;!Ie.isEmpty();){const wt=Ie.pop();if(wt.deleted||!wt.next||wt.next.deleted)continue;if(wt.deleted=!0,wt.next.deleted=!0,wt.prev){const Ye={...wt.prev};wt.prev.deleted=!0,wt.prev=Ye,Ye.prev?Ye.prev.next=Ye:qe=Ye}const yt={token:wt.token+wt.next.token,bias:wt.bias,prev:wt.prev,next:wt.next.next};yt.prev?(yt.prev.next=yt,this._add_node(Ie,yt.prev)):qe=yt,yt.next&&(yt.next.prev=yt,this._add_node(Ie,yt))}for(let wt=qe;wt!==null;wt=wt.next)ge.push(wt.token)}else ge=pe;if(this.continuing_subword_suffix)for(let Ie=0;Ie<ge.length-1;++Ie)ge[Ie]+=this.continuing_subword_suffix;return this.cache.set(M,ge),ge}_add_node(M,Y){const pe=this.bpe_ranks.get(JSON.stringify([Y.token,Y.next.token]));pe!==void 0&&(Y.score=pe+Y.bias,M.push(Y))}encode(M){const Y=[];for(const pe of M){if(this.ignore_merges&&this.tokens_to_ids.has(pe)){Y.push(pe);continue}const ge=this.bpe(pe);for(const Ie of ge)if(this.tokens_to_ids.has(Ie))Y.push(Ie);else if(this.byte_fallback){const qe=Array.from(this.text_encoder.encode(Ie)).map(_t=>`<0x${_t.toString(16).toUpperCase().padStart(2,"0")}>`);qe.every(_t=>this.tokens_to_ids.has(_t))?Y.push(...qe):Y.push(this.unk_token)}else Y.push(this.unk_token)}return Y}}class Ge extends le{constructor(M,Y){super(M),this.tokens_to_ids=K(Y.target_lang?M.vocab[Y.target_lang]:M.vocab),this.bos_token=Y.bos_token,this.bos_token_id=this.tokens_to_ids.get(this.bos_token),this.eos_token=Y.eos_token,this.eos_token_id=this.tokens_to_ids.get(this.eos_token),this.pad_token=Y.pad_token,this.pad_token_id=this.tokens_to_ids.get(this.pad_token),this.unk_token=Y.unk_token,this.unk_token_id=this.tokens_to_ids.get(this.unk_token),this.vocab=new Array(this.tokens_to_ids.size);for(const[pe,ge]of this.tokens_to_ids)this.vocab[ge]=pe}encode(M){return M}}class Re extends w.Callable{constructor(M){super(),this.config=M}static fromConfig(M){if(M===null)return null;switch(M.type){case"BertNormalizer":return new Xe(M);case"Precompiled":return new ms(M);case"Sequence":return new ne(M);case"Replace":return new ut(M);case"NFC":return new de(M);case"NFKC":return new Z(M);case"NFKD":return new he(M);case"Strip":return new be(M);case"StripAccents":return new De(M);case"Lowercase":return new Ze(M);case"Prepend":return new Ke(M);default:throw new Error(`Unknown Normalizer type: ${M.type}`)}}normalize(M){throw Error("normalize should be implemented in subclass.")}_call(M){return this.normalize(M)}}class ut extends Re{normalize(M){const Y=z(this.config.pattern);return Y===null?M:M.replaceAll(Y,this.config.content)}}class de extends Re{normalize(M){return M=M.normalize("NFC"),M}}class Z extends Re{normalize(M){return M=M.normalize("NFKC"),M}}class he extends Re{normalize(M){return M=M.normalize("NFKD"),M}}class be extends Re{normalize(M){return this.config.strip_left&&this.config.strip_right?M=M.trim():(this.config.strip_left&&(M=M.trimStart()),this.config.strip_right&&(M=M.trimEnd())),M}}class De extends Re{normalize(M){return M=B(M),M}}class Ze extends Re{normalize(M){return M=M.toLowerCase(),M}}class Ke extends Re{normalize(M){return M=this.config.prepend+M,M}}class ne extends Re{constructor(M){super(M),this.normalizers=M.normalizers.map(Y=>Re.fromConfig(Y))}normalize(M){return this.normalizers.reduce((Y,pe)=>pe.normalize(Y),M)}}class Xe extends Re{_tokenize_chinese_chars(M){const Y=[];for(let pe=0;pe<M.length;++pe){const ge=M[pe],Ie=ge.charCodeAt(0);X(Ie)?(Y.push(" "),Y.push(ge),Y.push(" ")):Y.push(ge)}return Y.join("")}stripAccents(M){return M.normalize("NFD").replace(/\p{Mn}/gu,"")}_is_control(M){switch(M){case"	":case`
`:case"\r":return!1;default:return/^\p{Cc}|\p{Cf}|\p{Co}|\p{Cs}$/u.test(M)}}_clean_text(M){const Y=[];for(const pe of M){const ge=pe.charCodeAt(0);ge===0||ge===65533||this._is_control(pe)||(/^\s$/.test(pe)?Y.push(" "):Y.push(pe))}return Y.join("")}normalize(M){return this.config.clean_text&&(M=this._clean_text(M)),this.config.handle_chinese_chars&&(M=this._tokenize_chinese_chars(M)),this.config.lowercase?(M=M.toLowerCase(),this.config.strip_accents!==!1&&(M=this.stripAccents(M))):this.config.strip_accents&&(M=this.stripAccents(M)),M}}class $e extends w.Callable{static fromConfig(M){if(M===null)return null;switch(M.type){case"BertPreTokenizer":return new ie(M);case"Sequence":return new Ps(M);case"Whitespace":return new Ss(M);case"WhitespaceSplit":return new Hs(M);case"Metaspace":return new ts(M);case"ByteLevel":return new Me(M);case"Split":return new je(M);case"Punctuation":return new Ne(M);case"Digits":return new Ve(M);case"Replace":return new sr(M);default:throw new Error(`Unknown PreTokenizer type: ${M.type}`)}}pre_tokenize_text(M,Y){throw Error("pre_tokenize_text should be implemented in subclass.")}pre_tokenize(M,Y){return(Array.isArray(M)?M.map(pe=>this.pre_tokenize_text(pe,Y)):this.pre_tokenize_text(M,Y)).flat()}_call(M,Y){return this.pre_tokenize(M,Y)}}class ie extends $e{constructor(M){super(),this.pattern=new RegExp(`[^\\s${g}]+|[${g}]`,"gu")}pre_tokenize_text(M,Y){return M.trim().match(this.pattern)||[]}}class Me extends $e{constructor(M){super(),this.config=M,this.add_prefix_space=this.config.add_prefix_space,this.trim_offsets=this.config.trim_offsets,this.use_regex=this.config.use_regex??!0,this.pattern=/'s|'t|'re|'ve|'m|'ll|'d| ?\p{L}+| ?\p{N}+| ?[^\s\p{L}\p{N}]+|\s+(?!\S)|\s+/gu,this.byte_encoder=Pe,this.text_encoder=new TextEncoder}pre_tokenize_text(M,Y){return this.add_prefix_space&&!M.startsWith(" ")&&(M=" "+M),(this.use_regex?M.match(this.pattern)||[]:[M]).map(ge=>Array.from(this.text_encoder.encode(ge),Ie=>this.byte_encoder[Ie]).join(""))}}class je extends $e{constructor(M){super(),this.config=M,this.pattern=z(this.config.pattern,this.config.invert)}pre_tokenize_text(M,Y){return this.pattern===null?[]:this.config.invert?M.match(this.pattern)||[]:this.config.behavior?.toLowerCase()==="removed"?M.split(this.pattern).filter(pe=>pe):b(M,this.pattern)}}class Ne extends $e{constructor(M){super(),this.config=M,this.pattern=new RegExp(`[^${g}]+|[${g}]+`,"gu")}pre_tokenize_text(M,Y){return M.match(this.pattern)||[]}}class Ve extends $e{constructor(M){super(),this.config=M;const Y=`[^\\d]+|\\d${this.config.individual_digits?"":"+"}`;this.pattern=new RegExp(Y,"gu")}pre_tokenize_text(M,Y){return M.match(this.pattern)||[]}}class Be extends w.Callable{constructor(M){super(),this.config=M}static fromConfig(M){if(M===null)return null;switch(M.type){case"TemplateProcessing":return new gt(M);case"ByteLevel":return new lt(M);case"RobertaProcessing":return new ot(M);case"BertProcessing":return new Qe(M);case"Sequence":return new dt(M);default:throw new Error(`Unknown PostProcessor type: ${M.type}`)}}post_process(M,...Y){throw Error("post_process should be implemented in subclass.")}_call(M,...Y){return this.post_process(M,...Y)}}class Qe extends Be{constructor(M){super(M),this.cls=M.cls[0],this.sep=M.sep[0]}post_process(M,Y=null,{add_special_tokens:pe=!0}={}){pe&&(M=(0,D.mergeArrays)([this.cls],M,[this.sep]));let ge=new Array(M.length).fill(0);if(Y!==null){const Ie=pe&&this instanceof ot?[this.sep]:[],qe=pe?[this.sep]:[];M=(0,D.mergeArrays)(M,Ie,Y,qe),ge=(0,D.mergeArrays)(ge,new Array(Y.length+Ie.length+qe.length).fill(1))}return{tokens:M,token_type_ids:ge}}}class ot extends Qe{}class gt extends Be{constructor(M){super(M),this.single=M.single,this.pair=M.pair}post_process(M,Y=null,{add_special_tokens:pe=!0}={}){const ge=Y===null?this.single:this.pair;let Ie=[],qe=[];for(const _t of ge)"SpecialToken"in _t?pe&&(Ie.push(_t.SpecialToken.id),qe.push(_t.SpecialToken.type_id)):"Sequence"in _t&&(_t.Sequence.id==="A"?(Ie=(0,D.mergeArrays)(Ie,M),qe=(0,D.mergeArrays)(qe,new Array(M.length).fill(_t.Sequence.type_id))):_t.Sequence.id==="B"&&(Ie=(0,D.mergeArrays)(Ie,Y),qe=(0,D.mergeArrays)(qe,new Array(Y.length).fill(_t.Sequence.type_id))));return{tokens:Ie,token_type_ids:qe}}}class lt extends Be{post_process(M,Y=null){return Y&&(M=(0,D.mergeArrays)(M,Y)),{tokens:M}}}class dt extends Be{constructor(M){super(M),this.processors=M.processors.map(Y=>Be.fromConfig(Y))}post_process(M,Y=null,pe={}){let ge;for(const Ie of this.processors)if(Ie instanceof lt)M=Ie.post_process(M).tokens,Y&&(Y=Ie.post_process(Y).tokens);else{const qe=Ie.post_process(M,Y,pe);M=qe.tokens,ge=qe.token_type_ids}return{tokens:M,token_type_ids:ge}}}class A extends w.Callable{constructor(M){super(),this.config=M,this.added_tokens=[],this.end_of_word_suffix=null,this.trim_offsets=M.trim_offsets}static fromConfig(M){if(M===null)return null;switch(M.type){case"WordPiece":return new He(M);case"Metaspace":return new xs(M);case"ByteLevel":return new et(M);case"Replace":return new oe(M);case"ByteFallback":return new q(M);case"Fuse":return new _e(M);case"Strip":return new Se(M);case"Sequence":return new ct(M);case"CTC":return new it(M);case"BPEDecoder":return new vt(M);default:throw new Error(`Unknown Decoder type: ${M.type}`)}}_call(M){return this.decode(M)}decode(M){return this.decode_chain(M).join("")}decode_chain(M){throw Error("`decode_chain` should be implemented in subclass.")}}class oe extends A{decode_chain(M){const Y=z(this.config.pattern);return Y===null?M:M.map(pe=>pe.replaceAll(Y,this.config.content))}}class q extends A{constructor(M){super(M),this.text_decoder=new TextDecoder}decode_chain(M){const Y=[];let pe=[];for(const ge of M){let Ie=null;if(ge.length===6&&ge.startsWith("<0x")&&ge.endsWith(">")){const qe=parseInt(ge.slice(3,5),16);isNaN(qe)||(Ie=qe)}if(Ie!==null)pe.push(Ie);else{if(pe.length>0){const qe=this.text_decoder.decode(Uint8Array.from(pe));Y.push(qe),pe=[]}Y.push(ge)}}if(pe.length>0){const ge=this.text_decoder.decode(Uint8Array.from(pe));Y.push(ge),pe=[]}return Y}}class _e extends A{decode_chain(M){return[M.join("")]}}class Se extends A{constructor(M){super(M),this.content=this.config.content,this.start=this.config.start,this.stop=this.config.stop}decode_chain(M){return M.map(Y=>{let pe=0;for(let Ie=0;Ie<this.start&&Y[Ie]===this.content;++Ie){pe=Ie+1;continue}let ge=Y.length;for(let Ie=0;Ie<this.stop;++Ie){const qe=Y.length-Ie-1;if(Y[qe]===this.content){ge=qe;continue}else break}return Y.slice(pe,ge)})}}class He extends A{constructor(M){super(M),this.cleanup=M.cleanup}decode_chain(M){return M.map((Y,pe)=>(pe!==0&&(Y.startsWith(this.config.prefix)?Y=Y.replace(this.config.prefix,""):Y=" "+Y),this.cleanup&&(Y=ae(Y)),Y))}}class et extends A{constructor(M){super(M),this.byte_decoder=ve,this.text_decoder=new TextDecoder("utf-8",{fatal:!1,ignoreBOM:!0}),this.end_of_word_suffix=null}convert_tokens_to_string(M){const Y=M.join(""),pe=new Uint8Array([...Y].map(Ie=>this.byte_decoder[Ie]));return this.text_decoder.decode(pe)}decode_chain(M){const Y=[];let pe=[];for(const ge of M)this.added_tokens.find(Ie=>Ie.content===ge)!==void 0?(pe.length>0&&(Y.push(this.convert_tokens_to_string(pe)),pe=[]),Y.push(ge)):pe.push(ge);return pe.length>0&&Y.push(this.convert_tokens_to_string(pe)),Y}}class it extends A{constructor(M){super(M),this.pad_token=this.config.pad_token,this.word_delimiter_token=this.config.word_delimiter_token,this.cleanup=this.config.cleanup}convert_tokens_to_string(M){if(M.length===0)return"";const Y=[M[0]];for(let Ie=1;Ie<M.length;++Ie)M[Ie]!==Y.at(-1)&&Y.push(M[Ie]);let ge=Y.filter(Ie=>Ie!==this.pad_token).join("");return this.cleanup&&(ge=ae(ge).replaceAll(this.word_delimiter_token," ").trim()),ge}decode_chain(M){return[this.convert_tokens_to_string(M)]}}class ct extends A{constructor(M){super(M),this.decoders=M.decoders.map(Y=>A.fromConfig(Y))}decode_chain(M){return this.decoders.reduce((Y,pe)=>pe.decode_chain(Y),M)}}class vt extends A{constructor(M){super(M),this.suffix=this.config.suffix}decode_chain(M){return M.map((Y,pe)=>Y.replaceAll(this.suffix,pe===M.length-1?"":" "))}}class Yt extends A{decode_chain(M){let Y="";for(let pe=1;pe<M.length;pe+=2)Y+=M[pe];return[Y]}}class ts extends $e{constructor(M){super(),this.addPrefixSpace=M.add_prefix_space,this.replacement=M.replacement,this.strRep=M.str_rep||this.replacement,this.prepend_scheme=M.prepend_scheme??"always"}pre_tokenize_text(M,{section_index:Y=void 0}={}){let pe=M.replaceAll(" ",this.strRep);return this.addPrefixSpace&&!pe.startsWith(this.replacement)&&(this.prepend_scheme==="always"||this.prepend_scheme==="first"&&Y===0)&&(pe=this.strRep+pe),[pe]}}class xs extends A{constructor(M){super(M),this.addPrefixSpace=M.add_prefix_space,this.replacement=M.replacement}decode_chain(M){const Y=[];for(let pe=0;pe<M.length;++pe){let ge=M[pe].replaceAll(this.replacement," ");this.addPrefixSpace&&pe==0&&ge.startsWith(" ")&&(ge=ge.substring(1)),Y.push(ge)}return Y}}class ms extends Re{constructor(M){super(M),this.charsmap=M.precompiled_charsmap}normalize(M){return M=M.replace(/[\u0001-\u0008\u000B\u000E-\u001F\u007F\u008F\u009F]/gm,""),M=M.replace(/[\u0009\u000A\u000C\u000D\u00A0\u1680\u2000-\u200F\u2028\u2029\u202F\u205F\u2581\u3000\uFEFF\uFFFD]/gm," "),M.includes("～")?M=M.split("～").map(pe=>pe.normalize("NFKC")).join("～"):M=M.normalize("NFKC"),M}}class Ps extends $e{constructor(M){super(),this.tokenizers=M.pretokenizers.map(Y=>$e.fromConfig(Y))}pre_tokenize_text(M,Y){return this.tokenizers.reduce((pe,ge)=>ge.pre_tokenize(pe,Y),[M])}}class Ss extends $e{constructor(M){super()}pre_tokenize_text(M,Y){return M.match(/\w+|[^\w\s]+/g)||[]}}class Hs extends $e{constructor(M){super()}pre_tokenize_text(M,Y){return $(M)}}class sr extends $e{constructor(M){super(),this.config=M,this.pattern=z(this.config.pattern),this.content=this.config.content}pre_tokenize_text(M,Y){return this.pattern===null?[M]:[M.replaceAll(this.pattern,this.config.content)]}}const Ur=["bos_token","eos_token","unk_token","sep_token","pad_token","cls_token","mask_token"];function Fr(xe,M,Y,pe){for(const ge of Object.keys(xe)){const Ie=M-xe[ge].length,qe=Y(ge),_t=new Array(Ie).fill(qe);xe[ge]=pe==="right"?(0,D.mergeArrays)(xe[ge],_t):(0,D.mergeArrays)(_t,xe[ge])}}function wr(xe,M){for(const Y of Object.keys(xe))xe[Y].length=M}class Bt extends w.Callable{return_token_type_ids=!1;padding_side="right";constructor(M,Y){super(),this._tokenizer_config=Y,this.normalizer=Re.fromConfig(M.normalizer),this.pre_tokenizer=$e.fromConfig(M.pre_tokenizer),this.model=le.fromConfig(M.model,Y),this.post_processor=Be.fromConfig(M.post_processor),this.decoder=A.fromConfig(M.decoder),this.special_tokens=[],this.all_special_ids=[],this.added_tokens=[];for(const pe of M.added_tokens){const ge=new Q(pe);this.added_tokens.push(ge),this.model.tokens_to_ids.set(ge.content,ge.id),this.model.vocab[ge.id]=ge.content,ge.special&&(this.special_tokens.push(ge.content),this.all_special_ids.push(ge.id))}if(this.additional_special_tokens=Y.additional_special_tokens??[],this.special_tokens.push(...this.additional_special_tokens),this.special_tokens=[...new Set(this.special_tokens)],this.decoder&&(this.decoder.added_tokens=this.added_tokens,this.decoder.end_of_word_suffix=this.model.end_of_word_suffix),this.added_tokens_regex=this.added_tokens.length>0?new RegExp(this.added_tokens.slice().sort((pe,ge)=>ge.content.length-pe.content.length).map(pe=>`${pe.lstrip?"\\s*":""}(${(0,D.escapeRegExp)(pe.content)})${pe.rstrip?"\\s*":""}`).join("|")):null,this.mask_token=this.getToken("mask_token"),this.mask_token_id=this.model.tokens_to_ids.get(this.mask_token),this.pad_token=this.getToken("pad_token","eos_token"),this.pad_token_id=this.model.tokens_to_ids.get(this.pad_token),this.sep_token=this.getToken("sep_token"),this.sep_token_id=this.model.tokens_to_ids.get(this.sep_token),this.unk_token=this.getToken("unk_token"),this.unk_token_id=this.model.tokens_to_ids.get(this.unk_token),this.bos_token=this.getToken("bos_token"),this.bos_token_id=this.model.tokens_to_ids.get(this.bos_token),this.eos_token=this.getToken("eos_token"),this.eos_token_id=this.model.tokens_to_ids.get(this.eos_token),this.model_max_length=Y.model_max_length,this.remove_space=Y.remove_space,this.clean_up_tokenization_spaces=Y.clean_up_tokenization_spaces??!0,this.do_lowercase_and_remove_accent=Y.do_lowercase_and_remove_accent??!1,Y.padding_side&&(this.padding_side=Y.padding_side),this.legacy=!1,this.chat_template=Y.chat_template??null,Array.isArray(this.chat_template)){const pe=Object.create(null);for(const{name:ge,template:Ie}of this.chat_template){if(typeof ge!="string"||typeof Ie!="string")throw new Error('Chat template must be a list of objects with "name" and "template" properties');pe[ge]=Ie}this.chat_template=pe}this._compiled_template_cache=new Map}getToken(...M){for(const Y of M){const pe=this._tokenizer_config[Y];if(pe)if(typeof pe=="object"){if(pe.__type==="AddedToken")return pe.content;throw Error(`Unknown token: ${pe}`)}else return pe}return null}static async from_pretrained(M,{progress_callback:Y=null,config:pe=null,cache_dir:ge=null,local_files_only:Ie=!1,revision:qe="main",legacy:_t=null}={}){const wt=await T(M,{progress_callback:Y,config:pe,cache_dir:ge,local_files_only:Ie,revision:qe,legacy:_t});return new this(...wt)}_call(M,{text_pair:Y=null,add_special_tokens:pe=!0,padding:ge=!1,truncation:Ie=null,max_length:qe=null,return_tensor:_t=!0,return_token_type_ids:wt=null}={}){const yt=Array.isArray(M);let Ye;if(yt){if(M.length===0)throw Error("text array must be non-empty");if(Y!==null){if(Array.isArray(Y)){if(M.length!==Y.length)throw Error("text and text_pair must have the same length")}else throw Error("text_pair must also be an array");Ye=M.map((Xt,_s)=>this._encode_plus(Xt,{text_pair:Y[_s],add_special_tokens:pe,return_token_type_ids:wt}))}else Ye=M.map(Xt=>this._encode_plus(Xt,{add_special_tokens:pe,return_token_type_ids:wt}))}else{if(M==null)throw Error("text may not be null or undefined");if(Array.isArray(Y))throw Error("When specifying `text_pair`, since `text` is a string, `text_pair` must also be a string (i.e., not an array).");Ye=[this._encode_plus(M,{text_pair:Y,add_special_tokens:pe,return_token_type_ids:wt})]}if(qe===null?ge==="max_length"?qe=this.model_max_length:qe=(0,te.max)(Ye.map(Xt=>Xt.input_ids.length))[0]:Ie||console.warn("Truncation was not explicitly activated but `max_length` is provided a specific value, please use `truncation=true` to explicitly truncate examples to max length."),qe=Math.min(qe,this.model_max_length??1/0),ge||Ie)for(let Xt=0;Xt<Ye.length;++Xt)Ye[Xt].input_ids.length!==qe&&(Ye[Xt].input_ids.length>qe?Ie&&wr(Ye[Xt],qe):ge&&Fr(Ye[Xt],qe,_s=>_s==="input_ids"?this.pad_token_id:0,this.padding_side));const It={};if(_t){if(!(ge&&Ie)&&Ye.some(_s=>{for(const Ce of Object.keys(_s))if(_s[Ce].length!==Ye[0][Ce]?.length)return!0;return!1}))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=true' and 'truncation=true' to have batched tensors with the same length.");const Xt=[Ye.length,Ye[0].input_ids.length];for(const _s of Object.keys(Ye[0]))It[_s]=new j.Tensor("int64",BigInt64Array.from(Ye.flatMap(Ce=>Ce[_s]).map(BigInt)),Xt)}else{for(const Xt of Object.keys(Ye[0]))It[Xt]=Ye.map(_s=>_s[Xt]);if(!yt)for(const Xt of Object.keys(It))It[Xt]=It[Xt][0]}return It}_encode_text(M){return M===null?null:(this.added_tokens_regex?M.split(this.added_tokens_regex).filter(ge=>ge):[M]).map((ge,Ie)=>{if(this.added_tokens.find(_t=>_t.content===ge)!==void 0)return ge;{if(this.remove_space===!0&&(ge=ge.trim().split(/\s+/).join(" ")),this.do_lowercase_and_remove_accent&&(ge=G(ge)),this.normalizer!==null&&(ge=this.normalizer(ge)),ge.length===0)return[];const _t=this.pre_tokenizer!==null?this.pre_tokenizer(ge,{section_index:Ie}):[ge];return this.model(_t)}}).flat()}_encode_plus(M,{text_pair:Y=null,add_special_tokens:pe=!0,return_token_type_ids:ge=null}={}){const{tokens:Ie,token_type_ids:qe}=this._tokenize_helper(M,{pair:Y,add_special_tokens:pe}),_t=this.model.convert_tokens_to_ids(Ie),wt={input_ids:_t,attention_mask:new Array(_t.length).fill(1)};return(ge??this.return_token_type_ids)&&qe&&(wt.token_type_ids=qe),wt}_tokenize_helper(M,{pair:Y=null,add_special_tokens:pe=!1}={}){const ge=this._encode_text(M),Ie=this._encode_text(Y);return this.post_processor?this.post_processor(ge,Ie,{add_special_tokens:pe}):{tokens:(0,D.mergeArrays)(ge??[],Ie??[])}}tokenize(M,{pair:Y=null,add_special_tokens:pe=!1}={}){return this._tokenize_helper(M,{pair:Y,add_special_tokens:pe}).tokens}encode(M,{text_pair:Y=null,add_special_tokens:pe=!0,return_token_type_ids:ge=null}={}){return this._encode_plus(M,{text_pair:Y,add_special_tokens:pe,return_token_type_ids:ge}).input_ids}batch_decode(M,Y={}){return M instanceof j.Tensor&&(M=M.tolist()),M.map(pe=>this.decode(pe,Y))}decode(M,Y={}){if(M instanceof j.Tensor&&(M=re(M)),!Array.isArray(M)||M.length===0||!(0,D.isIntegralNumber)(M[0]))throw Error("token_ids must be a non-empty array of integers.");return this.decode_single(M,Y)}decode_single(M,{skip_special_tokens:Y=!1,clean_up_tokenization_spaces:pe=null}){let ge=this.model.convert_ids_to_tokens(M);Y&&(ge=ge.filter(qe=>!this.special_tokens.includes(qe)));let Ie=this.decoder?this.decoder(ge):ge.join(" ");return this.decoder&&this.decoder.end_of_word_suffix&&(Ie=Ie.replaceAll(this.decoder.end_of_word_suffix," "),Y&&(Ie=Ie.trim())),(pe??this.clean_up_tokenization_spaces)&&(Ie=ae(Ie)),Ie}get_chat_template({chat_template:M=null,tools:Y=null}={}){if(this.chat_template&&typeof this.chat_template=="object"){const pe=this.chat_template;if(M!==null&&Object.hasOwn(pe,M))M=pe[M];else if(M===null)if(Y!==null&&"tool_use"in pe)M=pe.tool_use;else if("default"in pe)M=pe.default;else throw Error(`This model has multiple chat templates with no default specified! Please either pass a chat template or the name of the template you wish to use to the 'chat_template' argument. Available template names are ${Object.keys(pe).sort()}.`)}else if(M===null)if(this.chat_template)M=this.chat_template;else throw Error("Cannot use apply_chat_template() because tokenizer.chat_template is not set and no template argument was passed! For information about writing templates and setting the tokenizer.chat_template attribute, please see the documentation at https://huggingface.co/docs/transformers/main/en/chat_templating");return M}apply_chat_template(M,{tools:Y=null,documents:pe=null,chat_template:ge=null,add_generation_prompt:Ie=!1,tokenize:qe=!0,padding:_t=!1,truncation:wt=!1,max_length:yt=null,return_tensor:Ye=!0,return_dict:It=!1,tokenizer_kwargs:Xt={},..._s}={}){if(ge=this.get_chat_template({chat_template:ge,tools:Y}),typeof ge!="string")throw Error(`chat_template must be a string, but got ${typeof ge}`);let Ce=this._compiled_template_cache.get(ge);Ce===void 0&&(Ce=new P.Template(ge),this._compiled_template_cache.set(ge,Ce));const Es=Object.create(null);for(const Ns of Ur){const ir=this.getToken(Ns);ir&&(Es[Ns]=ir)}const Vs=Ce.render({messages:M,add_generation_prompt:Ie,tools:Y,documents:pe,...Es,..._s});if(qe){const Ns=this._call(Vs,{add_special_tokens:!1,padding:_t,truncation:wt,max_length:yt,return_tensor:Ye,...Xt});return It?Ns:Ns.input_ids}return Vs}}class Vr extends Bt{return_token_type_ids=!0}class Tr extends Bt{return_token_type_ids=!0}class Or extends Bt{return_token_type_ids=!0}class xr extends Bt{return_token_type_ids=!0}class rr extends Bt{return_token_type_ids=!0}class Pr extends Bt{return_token_type_ids=!0}class cr extends Bt{return_token_type_ids=!0}class Er extends Bt{return_token_type_ids=!0}class Gr extends Bt{return_token_type_ids=!0}class nr extends Bt{}class nt extends Bt{}class pt extends Bt{return_token_type_ids=!0;constructor(M,Y){super(M,Y),console.warn('WARNING: `XLMTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}}class St extends Bt{return_token_type_ids=!0}class ds extends Bt{}class Kr extends Bt{}class rs extends Bt{}class pr extends Bt{constructor(M,Y){super(M,Y),this.languageRegex=/^[a-z]{2}_[A-Z]{2}$/,this.language_codes=this.special_tokens.filter(pe=>this.languageRegex.test(pe)),this.lang_to_token=pe=>pe}_build_translation_inputs(M,Y,pe){return Xr(this,M,Y,pe)}}class Tn extends pr{}class Yn extends Bt{}class xn extends Bt{}const Hr="▁";class Pn extends Bt{padding_side="left";constructor(M,Y){super(M,Y),this.legacy=Y.legacy??!0,this.legacy||(this.normalizer=null,this.pre_tokenizer=new ts({replacement:Hr,add_prefix_space:!0,prepend_scheme:"first"}))}_encode_text(M){if(M===null)return null;if(this.legacy||M.length===0)return super._encode_text(M);let Y=super._encode_text(Hr+M.replaceAll(Hr," "));return Y.length>1&&Y[0]===Hr&&this.special_tokens.includes(Y[1])&&(Y=Y.slice(1)),Y}}class Dr extends Bt{}class En extends Bt{}class Jn extends Bt{}class Lr extends Bt{}class yr extends Bt{}class or extends Bt{}class un extends Bt{}class qr extends Bt{}class dn extends Bt{}function Xr(xe,M,Y,pe){if(!("language_codes"in xe)||!Array.isArray(xe.language_codes))throw new Error("Tokenizer must have `language_codes` attribute set and it should be an array of language ids.");if(!("languageRegex"in xe)||!(xe.languageRegex instanceof RegExp))throw new Error("Tokenizer must have `languageRegex` attribute set and it should be a regular expression.");if(!("lang_to_token"in xe)||typeof xe.lang_to_token!="function")throw new Error("Tokenizer must have `lang_to_token` attribute set and it should be a function.");const ge=pe.src_lang,Ie=pe.tgt_lang;if(!xe.language_codes.includes(Ie))throw new Error(`Target language code "${Ie}" is not valid. Must be one of: {${xe.language_codes.join(", ")}}`);if(ge!==void 0){if(!xe.language_codes.includes(ge))throw new Error(`Source language code "${ge}" is not valid. Must be one of: {${xe.language_codes.join(", ")}}`);for(const qe of xe.post_processor.config.single)if("SpecialToken"in qe&&xe.languageRegex.test(qe.SpecialToken.id)){qe.SpecialToken.id=xe.lang_to_token(ge);break}}return pe.forced_bos_token_id=xe.model.convert_tokens_to_ids([xe.lang_to_token(Ie)])[0],xe._call(M,Y)}class Mr extends Bt{constructor(M,Y){super(M,Y),this.languageRegex=/^[a-z]{3}_[A-Z][a-z]{3}$/,this.language_codes=this.special_tokens.filter(pe=>this.languageRegex.test(pe)),this.lang_to_token=pe=>pe}_build_translation_inputs(M,Y,pe){return Xr(this,M,Y,pe)}}class Lt extends Bt{constructor(M,Y){super(M,Y),this.languageRegex=/^__[a-z]{2,3}__$/,this.language_codes=this.special_tokens.filter(pe=>this.languageRegex.test(pe)).map(pe=>pe.slice(2,-2)),this.lang_to_token=pe=>`__${pe}__`}_build_translation_inputs(M,Y,pe){return Xr(this,M,Y,pe)}}class cn extends Bt{get timestamp_begin(){return this.model.convert_tokens_to_ids(["<|notimestamps|>"])[0]+1}_decode_asr(M,{return_timestamps:Y=!1,return_language:pe=!1,time_precision:ge=null,force_full_sequences:Ie=!0}={}){if(ge===null)throw Error("Must specify time_precision");let qe=null;const _t=Y==="word";function wt(){return{language:qe,timestamp:[null,null],text:""}}const yt=[];let Ye=wt(),It=0;const Xt=this.timestamp_begin,Ce=Xt+1500;let Es=[],Vs=[],Ns=!1,ir=null;const Nt=new Set(this.all_special_ids);for(const Zt of M){const ls=Zt.tokens,Tt=_t?Zt.token_timestamps:null;let cs=null,br=Xt;if("stride"in Zt){const[Mt,ws,Le]=Zt.stride;if(It-=ws,ir=Mt-Le,ws&&(br=ws/ge+Xt),Le)for(let ft=ls.length-1;ft>=0;--ft){const Zs=Number(ls[ft]);if(Zs>=Xt){if(cs!==null&&(Zs-Xt)*ge<ir)break;cs=Zs}}}let Is=[],Gs=[];for(let Mt=0;Mt<ls.length;++Mt){const ws=Number(ls[Mt]);if(Nt.has(ws)){const Le=this.decode([ws]),ft=v.WHISPER_LANGUAGE_MAPPING.get(Le.slice(2,-2));if(ft!==void 0){if(qe!==null&&ft!==qe&&!Y){Es.push(Is);const Zs=this.findLongestCommonSequence(Es)[0],Qr=this.decode(Zs);Ye.text=Qr,yt.push(Ye),Es=[],Is=[],Ye=wt()}qe=Ye.language=ft}}else if(ws>=Xt&&ws<=Ce){const Le=(ws-Xt)*ge+It,ft=(0,te.round)(Le,2);if(cs!==null&&ws>=cs)Ns=!0;else if(Ns||Es.length>0&&ws<br)Ns=!1;else if(Ye.timestamp[0]===null)Ye.timestamp[0]=ft;else if(ft!==Ye.timestamp[0]){Ye.timestamp[1]=ft,Es.push(Is),_t&&Vs.push(Gs);const[Zs,Qr]=this.findLongestCommonSequence(Es,Vs),Zn=this.decode(Zs);Ye.text=Zn,_t&&(Ye.words=this.collateWordTimestamps(Zs,Qr,qe)),yt.push(Ye),Es=[],Is=[],Vs=[],Gs=[],Ye=wt()}}else if(Is.push(ws),_t){let Le=(0,te.round)(Tt[Mt]+It,2),ft;if(Mt+1<Tt.length){ft=(0,te.round)(Tt[Mt+1]+It,2);const Zs=this.decode([ws]);C.test(Zs)&&(ft=(0,te.round)(Math.min(Le+ge,ft),2))}else ft=null;Gs.push([Le,ft])}}if("stride"in Zt){const[Mt,ws,Le]=Zt.stride;It+=Mt-Le}Is.length>0?(Es.push(Is),_t&&Vs.push(Gs)):Es.every(Mt=>Mt.length===0)&&(Ye=wt(),Es=[],Is=[],Vs=[],Gs=[])}if(Es.length>0){if(Ie&&Y)throw new Error("Whisper did not predict an ending timestamp, which can happen if audio is cut off in the middle of a word. Also make sure WhisperTimeStampLogitsProcessor was used during generation.");const[Zt,ls]=this.findLongestCommonSequence(Es,Vs),Tt=this.decode(Zt);Ye.text=Tt,_t&&(Ye.words=this.collateWordTimestamps(Zt,ls,qe)),yt.push(Ye)}let Ls=Object.create(null);const hr=yt.map(Zt=>Zt.text).join("");if(Y||pe){for(let Zt=0;Zt<yt.length;++Zt){const ls=yt[Zt];Y||delete ls.timestamp,pe||delete ls.language}if(_t){const Zt=[];for(const ls of yt)for(const Tt of ls.words)Zt.push(Tt);Ls={chunks:Zt}}else Ls={chunks:yt}}return[hr,Ls]}findLongestCommonSequence(M,Y=null){let pe=M[0],ge=pe.length,Ie=[];const qe=Array.isArray(Y)&&Y.length>0;let _t=qe?[]:null,wt=qe?Y[0]:null;for(let yt=1;yt<M.length;++yt){const Ye=M[yt];let It=0,Xt=[ge,ge,0,0];const _s=Ye.length;for(let Ls=1;Ls<ge+_s;++Ls){const hr=Math.max(0,ge-Ls),Zt=Math.min(ge,ge+_s-Ls),ls=pe.slice(hr,Zt),Tt=Math.max(0,Ls-ge),cs=Math.min(_s,Ls),br=Ye.slice(Tt,cs);if(ls.length!==br.length)throw new Error("There is a bug within whisper `decode_asr` function, please report it. Dropping to prevent bad inference.");let Is;qe?Is=ls.filter((ws,Le)=>ws===br[Le]&&wt[hr+Le]<=Y[yt][Tt+Le]).length:Is=ls.filter((ws,Le)=>ws===br[Le]).length;const Gs=Ls/1e4,Mt=Is/Ls+Gs;Is>1&&Mt>It&&(It=Mt,Xt=[hr,Zt,Tt,cs])}const[Ce,Es,Vs,Ns]=Xt,ir=Math.floor((Es+Ce)/2),Nt=Math.floor((Ns+Vs)/2);Ie.push(...pe.slice(0,ir)),pe=Ye.slice(Nt),ge=pe.length,qe&&(_t.push(...wt.slice(0,ir)),wt=Y[yt].slice(Nt))}return Ie.push(...pe),qe?(_t.push(...wt),[Ie,_t]):[Ie,[]]}collateWordTimestamps(M,Y,pe){const[ge,Ie,qe]=this.combineTokensIntoWords(M,pe),_t=[];for(let wt=0;wt<ge.length;++wt){const yt=qe[wt];_t.push({text:ge[wt],timestamp:[Y[yt.at(0)][0],Y[yt.at(-1)][1]]})}return _t}combineTokensIntoWords(M,Y,pe=`"'“¡¿([{-`,ge=`"'.。,，!！?？:：”)]}、`){Y=Y??"english";let Ie,qe,_t;return["chinese","japanese","thai","lao","myanmar"].includes(Y)?[Ie,qe,_t]=this.splitTokensOnUnicode(M):[Ie,qe,_t]=this.splitTokensOnSpaces(M),this.mergePunctuations(Ie,qe,_t,pe,ge)}decode(M,Y){let pe;return Y?.decode_with_timestamps?(M instanceof j.Tensor&&(M=re(M)),pe=this.decodeWithTimestamps(M,Y)):pe=super.decode(M,Y),pe}decodeWithTimestamps(M,Y){const pe=Y?.time_precision??.02,ge=Array.from(this.all_special_ids).at(-1)+1;let Ie=[[]];for(let qe of M)if(qe=Number(qe),qe>=ge){const _t=((qe-ge)*pe).toFixed(2);Ie.push(`<|${_t}|>`),Ie.push([])}else Ie[Ie.length-1].push(qe);return Ie=Ie.map(qe=>typeof qe=="string"?qe:super.decode(qe,Y)),Ie.join("")}splitTokensOnUnicode(M){const Y=this.decode(M,{decode_with_timestamps:!0}),pe="�",ge=[],Ie=[],qe=[];let _t=[],wt=[],yt=0;for(let Ye=0;Ye<M.length;++Ye){const It=M[Ye];_t.push(It),wt.push(Ye);const Xt=this.decode(_t,{decode_with_timestamps:!0});(!Xt.includes(pe)||Y[yt+Xt.indexOf(pe)]===pe)&&(ge.push(Xt),Ie.push(_t),qe.push(wt),_t=[],wt=[],yt+=Xt.length)}return[ge,Ie,qe]}splitTokensOnSpaces(M){const[Y,pe,ge]=this.splitTokensOnUnicode(M),Ie=[],qe=[],_t=[],wt=new RegExp(`^[${g}]$`,"gu");for(let yt=0;yt<Y.length;++yt){const Ye=Y[yt],It=pe[yt],Xt=ge[yt],_s=It[0]>=this.model.tokens_to_ids.get("<|endoftext|>"),Ce=Ye.startsWith(" "),Es=Ye.trim(),Vs=wt.test(Es);if(_s||Ce||Vs||Ie.length===0)Ie.push(Ye),qe.push(It),_t.push(Xt);else{const Ns=Ie.length-1;Ie[Ns]+=Ye,qe[Ns].push(...It),_t[Ns].push(...Xt)}}return[Ie,qe,_t]}mergePunctuations(M,Y,pe,ge,Ie){const qe=structuredClone(M),_t=structuredClone(Y),wt=structuredClone(pe);let yt=qe.length-2,Ye=qe.length-1;for(;yt>=0;)qe[yt].startsWith(" ")&&ge.includes(qe[yt].trim())?(qe[Ye]=qe[yt]+qe[Ye],_t[Ye]=(0,D.mergeArrays)(_t[yt],_t[Ye]),wt[Ye]=(0,D.mergeArrays)(wt[yt],wt[Ye]),qe[yt]="",_t[yt]=[],wt[yt]=[]):Ye=yt,--yt;for(yt=0,Ye=1;Ye<qe.length;)!qe[yt].endsWith(" ")&&Ie.includes(qe[Ye])?(qe[yt]+=qe[Ye],_t[yt]=(0,D.mergeArrays)(_t[yt],_t[Ye]),wt[yt]=(0,D.mergeArrays)(wt[yt],wt[Ye]),qe[Ye]="",_t[Ye]=[],wt[Ye]=[]):yt=Ye,++Ye;return[qe.filter(It=>It),_t.filter(It=>It.length>0),wt.filter(It=>It.length>0)]}}class Cn extends Bt{}class kn extends Bt{}class Sn extends Bt{}class zr extends Bt{constructor(M,Y){super(M,Y),this.languageRegex=/^(>>\w+<<)\s*/g,this.supported_language_codes=this.model.vocab.filter(pe=>this.languageRegex.test(pe)),console.warn('WARNING: `MarianTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}_encode_text(M){if(M===null)return null;const[Y,...pe]=M.trim().split(this.languageRegex);if(pe.length===0)return super._encode_text(Y);if(pe.length===2){const[ge,Ie]=pe;return this.supported_language_codes.includes(ge)||console.warn(`Unsupported language code "${ge}" detected, which may lead to unexpected behavior. Should be one of: ${JSON.stringify(this.supported_language_codes)}`),(0,D.mergeArrays)([ge],super._encode_text(Ie))}}}class $n extends Bt{}class pn extends Bt{}class An extends Bt{}class ns extends Bt{}class qs extends Bt{}class hn extends Bt{constructor(M,Y){super(M,Y),this.decoder=new Yt({})}}class In extends Bt{}class mn extends Bt{}class Fn{static TOKENIZER_CLASS_MAPPING={T5Tokenizer:ds,DistilBertTokenizer:nr,CamembertTokenizer:nt,DebertaTokenizer:rr,DebertaV2Tokenizer:Pr,BertTokenizer:Vr,HerbertTokenizer:cr,ConvBertTokenizer:Er,RoFormerTokenizer:Gr,XLMTokenizer:pt,ElectraTokenizer:St,MobileBertTokenizer:Or,SqueezeBertTokenizer:xr,AlbertTokenizer:Tr,GPT2Tokenizer:Kr,BartTokenizer:rs,MBartTokenizer:pr,MBart50Tokenizer:Tn,RobertaTokenizer:Yn,WhisperTokenizer:cn,CodeGenTokenizer:Cn,CLIPTokenizer:kn,SiglipTokenizer:Sn,MarianTokenizer:zr,BloomTokenizer:xn,NllbTokenizer:Mr,M2M100Tokenizer:Lt,LlamaTokenizer:Pn,CodeLlamaTokenizer:Dr,XLMRobertaTokenizer:En,MPNetTokenizer:Jn,FalconTokenizer:Lr,GPTNeoXTokenizer:yr,EsmTokenizer:or,Wav2Vec2CTCTokenizer:$n,BlenderbotTokenizer:pn,BlenderbotSmallTokenizer:An,SpeechT5Tokenizer:ns,NougatTokenizer:qs,VitsTokenizer:hn,Qwen2Tokenizer:un,GemmaTokenizer:qr,Grok1Tokenizer:dn,CohereTokenizer:In,MgpstrTokenizer:mn,PreTrainedTokenizer:Bt};static async from_pretrained(M,{progress_callback:Y=null,config:pe=null,cache_dir:ge=null,local_files_only:Ie=!1,revision:qe="main",legacy:_t=null}={}){const[wt,yt]=await T(M,{progress_callback:Y,config:pe,cache_dir:ge,local_files_only:Ie,revision:qe,legacy:_t}),Ye=yt.tokenizer_class?.replace(/Fast$/,"")??"PreTrainedTokenizer";let It=this.TOKENIZER_CLASS_MAPPING[Ye];return It||(console.warn(`Unknown tokenizer class "${Ye}", attempting to construct from base class.`),It=Bt),new It(wt,yt)}}},"./src/utils/audio.js":(Ae,F,r)=>{r.r(F),r.d(F,{hamming:()=>v,hanning:()=>P,mel_filter_bank:()=>B,read_audio:()=>j,spectrogram:()=>g,window_function:()=>C});var w=r("./src/utils/hub.js"),D=r("./src/utils/maths.js"),W=r("./src/utils/core.js"),te=r("./src/utils/tensor.js");async function j(x,J){if(typeof AudioContext>"u")throw Error("Unable to load audio from path/URL since `AudioContext` is not available in your environment. Instead, audio data should be passed directly to the pipeline/processor. For more information and some example code, see https://huggingface.co/docs/transformers.js/guides/node-audio-processing.");const Q=await(await(0,w.getFile)(x)).arrayBuffer(),le=new AudioContext({sampleRate:J});typeof J>"u"&&console.warn(`No sampling rate provided, using default of ${le.sampleRate}Hz.`);const ue=await le.decodeAudioData(Q);let fe;if(ue.numberOfChannels===2){const Pe=Math.sqrt(2),ve=ue.getChannelData(0),Fe=ue.getChannelData(1);fe=new Float32Array(ve.length);for(let Ge=0;Ge<ue.length;++Ge)fe[Ge]=Pe*(ve[Ge]+Fe[Ge])/2}else fe=ue.getChannelData(0);return fe}function y(x,J){if(x<1)return new Float64Array;if(x===1)return new Float64Array([1]);const Q=1-J,le=2*Math.PI/(x-1),ue=new Float64Array(x);for(let fe=0;fe<x;++fe)ue[fe]=J-Q*Math.cos(fe*le);return ue}function P(x){return y(x,.5)}function v(x){return y(x,.54)}const T={htk:x=>2595*Math.log10(1+x/700),kaldi:x=>1127*Math.log(1+x/700),slaney:(x,J=1e3,Q=15,le=27/Math.log(6.4))=>x>=J?Q+Math.log(x/J)*le:3*x/200};function b(x,J="htk"){const Q=T[J];if(!Q)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof x=="number"?Q(x):x.map(le=>Q(le))}const z={htk:x=>700*(10**(x/2595)-1),kaldi:x=>700*(Math.exp(x/1127)-1),slaney:(x,J=1e3,Q=15,le=Math.log(6.4)/27)=>x>=Q?J*Math.exp(le*(x-Q)):200*x/3};function K(x,J="htk"){const Q=z[J];if(!Q)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof x=="number"?Q(x):x.map(le=>Q(le))}function re(x,J){const Q=Float64Array.from({length:J.length-1},(Pe,ve)=>J[ve+1]-J[ve]),le=Array.from({length:x.length},()=>new Array(J.length));for(let Pe=0;Pe<x.length;++Pe){const ve=le[Pe];for(let Fe=0;Fe<J.length;++Fe)ve[Fe]=J[Fe]-x[Pe]}const ue=J.length-2,fe=Array.from({length:ue},()=>new Array(x.length));for(let Pe=0;Pe<x.length;++Pe){const ve=le[Pe];for(let Fe=0;Fe<ue;++Fe){const Ge=-ve[Fe]/Q[Fe],Re=ve[Fe+2]/Q[Fe+1];fe[Fe][Pe]=Math.max(0,Math.min(Ge,Re))}}return fe}function ae(x,J,Q){const le=(J-x)/(Q-1);return Float64Array.from({length:Q},(ue,fe)=>x+le*fe)}function B(x,J,Q,le,ue,fe=null,Pe="htk",ve=!1){if(fe!==null&&fe!=="slaney")throw new Error('norm must be one of null or "slaney"');const Fe=b(Q,Pe),Ge=b(le,Pe),Re=ae(Fe,Ge,J+2);let ut=K(Re,Pe),de;if(ve){const he=ue/(x*2);de=b(Float64Array.from({length:x},(be,De)=>De*he),Pe),ut=Re}else de=ae(0,Math.floor(ue/2),x);const Z=re(de,ut);if(fe!==null&&fe==="slaney")for(let he=0;he<J;++he){const be=Z[he],De=2/(ut[he+2]-ut[he]);for(let Ze=0;Ze<x;++Ze)be[Ze]*=De}return Z}function G(x,J,Q){const le=new x.constructor(x.length+J+Q),ue=x.length-1;for(let fe=0;fe<x.length;++fe)le[J+fe]=x[fe];for(let fe=1;fe<=J;++fe)le[J-fe]=x[(0,W.calculateReflectOffset)(fe,ue)];for(let fe=1;fe<=Q;++fe)le[ue+J+fe]=x[(0,W.calculateReflectOffset)(ue-fe,ue)];return le}function X(x,J,Q,le,ue){if(Q<=0)throw new Error("reference must be greater than zero");if(le<=0)throw new Error("min_value must be greater than zero");Q=Math.max(le,Q);const fe=Math.log10(Q);for(let Pe=0;Pe<x.length;++Pe)x[Pe]=J*Math.log10(Math.max(le,x[Pe])-fe);if(ue!==null){if(ue<=0)throw new Error("db_range must be greater than zero");const Pe=(0,D.max)(x)[0]-ue;for(let ve=0;ve<x.length;++ve)x[ve]=Math.max(x[ve],Pe)}return x}function I(x,J=1,Q=1e-5,le=null){return X(x,20,J,Q,le)}function $(x,J=1,Q=1e-10,le=null){return X(x,10,J,Q,le)}async function g(x,J,Q,le,{fft_length:ue=null,power:fe=1,center:Pe=!0,pad_mode:ve="reflect",onesided:Fe=!0,preemphasis:Ge=null,mel_filters:Re=null,mel_floor:ut=1e-10,log_mel:de=null,reference:Z=1,min_value:he=1e-10,db_range:be=null,remove_dc_offset:De=null,min_num_frames:Ze=null,max_num_frames:Ke=null,do_pad:ne=!0,transpose:Xe=!1}={}){const $e=J.length;if(ue===null&&(ue=Q),Q>ue)throw Error(`frame_length (${Q}) may not be larger than fft_length (${ue})`);if($e!==Q)throw new Error(`Length of the window (${$e}) must equal frame_length (${Q})`);if(le<=0)throw new Error("hop_length must be greater than zero");if(fe===null&&Re!==null)throw new Error("You have provided `mel_filters` but `power` is `None`. Mel spectrogram computation is not yet supported for complex-valued spectrogram. Specify `power` to fix this issue.");if(Pe){if(ve!=="reflect")throw new Error(`pad_mode="${ve}" not implemented yet.`);const A=Math.floor((ue-1)/2)+1;x=G(x,A,A)}let ie=Math.floor(1+Math.floor((x.length-Q)/le));Ze!==null&&ie<Ze&&(ie=Ze);const Me=Fe?Math.floor(ue/2)+1:ue;let je=ie,Ne=ie;Ke!==null&&(Ke>ie?ne&&(Ne=Ke):Ne=je=Ke);const Ve=new D.FFT(ue),Be=new Float64Array(ue),Qe=new Float64Array(Ve.outputBufferSize),ot=new Float32Array(Me*Ne);for(let A=0;A<je;++A){const oe=A*le,q=Math.min(x.length-oe,Q);q!==Q&&Be.fill(0,0,Q);for(let _e=0;_e<q;++_e)Be[_e]=x[oe+_e];if(De){let _e=0;for(let He=0;He<q;++He)_e+=Be[He];const Se=_e/q;for(let He=0;He<q;++He)Be[He]-=Se}if(Ge!==null){for(let _e=q-1;_e>=1;--_e)Be[_e]-=Ge*Be[_e-1];Be[0]*=1-Ge}for(let _e=0;_e<J.length;++_e)Be[_e]*=J[_e];Ve.realTransform(Qe,Be);for(let _e=0;_e<Me;++_e){const Se=_e<<1;ot[_e*Ne+A]=Qe[Se]**2+Qe[Se+1]**2}}if(fe!==null&&fe!==2){const A=2/fe;for(let oe=0;oe<ot.length;++oe)ot[oe]**=A}const gt=Re.length;let lt=await(0,te.matmul)(new te.Tensor("float32",Re.flat(),[gt,Me]),new te.Tensor("float32",ot,[Me,Ne]));Xe&&(lt=lt.transpose(1,0));const dt=lt.data;for(let A=0;A<dt.length;++A)dt[A]=Math.max(ut,dt[A]);if(fe!==null&&de!==null){const A=Math.min(dt.length,je*gt);switch(de){case"log":for(let oe=0;oe<A;++oe)dt[oe]=Math.log(dt[oe]);break;case"log10":for(let oe=0;oe<A;++oe)dt[oe]=Math.log10(dt[oe]);break;case"dB":if(fe===1)I(dt,Z,he,be);else if(fe===2)$(dt,Z,he,be);else throw new Error(`Cannot use log_mel option '${de}' with power ${fe}`);break;default:throw new Error(`log_mel must be one of null, 'log', 'log10' or 'dB'. Got '${de}'`)}}return lt}function C(x,J,{periodic:Q=!0,frame_length:le=null,center:ue=!0}={}){const fe=Q?x+1:x;let Pe;switch(J){case"boxcar":Pe=new Float64Array(fe).fill(1);break;case"hann":case"hann_window":Pe=P(fe);break;case"hamming":Pe=v(fe);break;case"povey":Pe=P(fe).map(ve=>Math.pow(ve,.85));break;default:throw new Error(`Unknown window type ${J}.`)}if(Q&&(Pe=Pe.subarray(0,x)),le===null)return Pe;if(x>le)throw new Error(`Length of the window (${x}) may not be larger than frame_length (${le})`);return Pe}},"./src/utils/constants.js":(Ae,F,r)=>{r.r(F),r.d(F,{CHAT_TEMPLATE_NAME:()=>y,CONFIG_NAME:()=>D,FEATURE_EXTRACTOR_NAME:()=>W,GENERATION_CONFIG_NAME:()=>P,GITHUB_ISSUE_URL:()=>w,IMAGE_PROCESSOR_NAME:()=>te,PROCESSOR_NAME:()=>j});const w="https://github.com/huggingface/transformers.js/issues/new/choose",D="config.json",W="preprocessor_config.json",te=W,j="processor_config.json",y="chat_template.json",P="generation_config.json"},"./src/utils/core.js":(Ae,F,r)=>{r.r(F),r.d(F,{calculateDimensions:()=>P,calculateReflectOffset:()=>z,count:()=>ae,dispatchCallback:()=>w,escapeRegExp:()=>W,isIntegralNumber:()=>j,isNullishDimension:()=>y,isTypedArray:()=>te,len:()=>re,mergeArrays:()=>T,pick:()=>K,pop:()=>v,product:()=>b,reverseDictionary:()=>D});function w(B,G){B&&B(G)}function D(B){return Object.fromEntries(Object.entries(B).map(([G,X])=>[X,G]))}function W(B){return B.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function te(B){return B?.prototype?.__proto__?.constructor?.name==="TypedArray"}function j(B){return Number.isInteger(B)||typeof B=="bigint"}function y(B){return B==null||B===-1}function P(B){const G=[];let X=B;for(;Array.isArray(X);)G.push(X.length),X=X[0];return G}function v(B,G,X=void 0){const I=B[G];if(I!==void 0)return delete B[G],I;if(X===void 0)throw Error(`Key ${G} does not exist in object.`);return X}function T(...B){return Array.prototype.concat.apply([],B)}function b(...B){return B.reduce((G,X)=>G.flatMap(I=>X.map($=>[I,$])))}function z(B,G){return Math.abs((B+G)%(2*G)-G)}function K(B,G){return Object.assign({},...G.map(X=>{if(B[X]!==void 0)return{[X]:B[X]}}))}function re(B){let G=0;for(const X of B)++G;return G}function ae(B,G){let X=0;for(const I of B)I===G&&++X;return X}},"./src/utils/data-structures.js":(Ae,F,r)=>{r.r(F),r.d(F,{CharTrie:()=>D,PriorityQueue:()=>w,TokenLattice:()=>te});class w{constructor(P=(T,b)=>T>b,v=1/0){this._heap=[],this._comparator=P,this._maxSize=v}get size(){return this._heap.length}isEmpty(){return this.size===0}peek(){return this._heap[0]}push(...P){return this.extend(P)}extend(P){for(const v of P)if(this.size<this._maxSize)this._heap.push(v),this._siftUp();else{const T=this._smallest();this._comparator(v,this._heap[T])&&(this._heap[T]=v,this._siftUpFrom(T))}return this.size}pop(){const P=this.peek(),v=this.size-1;return v>0&&this._swap(0,v),this._heap.pop(),this._siftDown(),P}replace(P){const v=this.peek();return this._heap[0]=P,this._siftDown(),v}_parent(P){return(P+1>>>1)-1}_left(P){return(P<<1)+1}_right(P){return P+1<<1}_greater(P,v){return this._comparator(this._heap[P],this._heap[v])}_swap(P,v){const T=this._heap[P];this._heap[P]=this._heap[v],this._heap[v]=T}_siftUp(){this._siftUpFrom(this.size-1)}_siftUpFrom(P){for(;P>0&&this._greater(P,this._parent(P));)this._swap(P,this._parent(P)),P=this._parent(P)}_siftDown(){let P=0;for(;this._left(P)<this.size&&this._greater(this._left(P),P)||this._right(P)<this.size&&this._greater(this._right(P),P);){const v=this._right(P)<this.size&&this._greater(this._right(P),this._left(P))?this._right(P):this._left(P);this._swap(P,v),P=v}}_smallest(){return 2**Math.floor(Math.log2(this.size))-1}}class D{constructor(){this.root=W.default()}extend(P){for(const v of P)this.push(v)}push(P){let v=this.root;for(const T of P){let b=v.children.get(T);b===void 0&&(b=W.default(),v.children.set(T,b)),v=b}v.isLeaf=!0}*commonPrefixSearch(P){let v=this.root;if(v===void 0)return;let T="";for(const b of P){if(T+=b,v=v.children.get(b),v===void 0)return;v.isLeaf&&(yield T)}}}class W{constructor(P,v){this.isLeaf=P,this.children=v}static default(){return new W(!1,new Map)}}class te{constructor(P,v,T){this.chars=Array.from(P),this.len=this.chars.length,this.bosTokenId=v,this.eosTokenId=T,this.nodes=[],this.beginNodes=Array.from({length:this.len+1},()=>[]),this.endNodes=Array.from({length:this.len+1},()=>[]);const b=new j(this.bosTokenId,0,0,0,0),z=new j(this.eosTokenId,1,this.len,0,0);this.nodes.push(b.clone()),this.nodes.push(z.clone()),this.beginNodes[this.len].push(z),this.endNodes[0].push(b)}insert(P,v,T,b){const z=this.nodes.length,K=new j(b,z,P,v,T);this.beginNodes[P].push(K),this.endNodes[P+v].push(K),this.nodes.push(K)}viterbi(){const P=this.len;let v=0;for(;v<=P;){if(this.beginNodes[v].length==0)return[];for(let re of this.beginNodes[v]){re.prev=null;let ae=0,B=null;for(let G of this.endNodes[v]){const X=G.backtraceScore+re.score;(B===null||X>ae)&&(B=G.clone(),ae=X)}if(B!==null)re.prev=B,re.backtraceScore=ae;else return[]}++v}const T=[],z=this.beginNodes[P][0].prev;if(z===null)return[];let K=z.clone();for(;K.prev!==null;)T.push(K.clone()),K=K.clone().prev.clone();return T.reverse(),T}piece(P){return this.chars.slice(P.pos,P.pos+P.length).join("")}tokens(){return this.viterbi().map(v=>this.piece(v))}tokenIds(){return this.viterbi().map(v=>v.tokenId)}}class j{constructor(P,v,T,b,z){this.tokenId=P,this.nodeId=v,this.pos=T,this.length=b,this.score=z,this.prev=null,this.backtraceScore=0}clone(){const P=new j(this.tokenId,this.nodeId,this.pos,this.length,this.score);return P.prev=this.prev,P.backtraceScore=this.backtraceScore,P}}},"./src/utils/devices.js":(Ae,F,r)=>{r.r(F),r.d(F,{DEVICE_TYPES:()=>w});const w=Object.freeze({auto:"auto",gpu:"gpu",cpu:"cpu",wasm:"wasm",webgpu:"webgpu",cuda:"cuda",dml:"dml",webnn:"webnn","webnn-npu":"webnn-npu","webnn-gpu":"webnn-gpu","webnn-cpu":"webnn-cpu"})},"./src/utils/dtypes.js":(Ae,F,r)=>{r.r(F),r.d(F,{DATA_TYPES:()=>te,DEFAULT_DEVICE_DTYPE_MAPPING:()=>j,DEFAULT_DTYPE_SUFFIX_MAPPING:()=>y,isWebGpuFp16Supported:()=>W});var w=r("./src/env.js"),D=r("./src/utils/devices.js");const W=function(){let P;return async function(){if(P===void 0)if(!w.apis.IS_WEBGPU_AVAILABLE)P=!1;else try{P=(await navigator.gpu.requestAdapter()).features.has("shader-f16")}catch{P=!1}return P}}(),te=Object.freeze({auto:"auto",fp32:"fp32",fp16:"fp16",q8:"q8",int8:"int8",uint8:"uint8",q4:"q4",bnb4:"bnb4",q4f16:"q4f16"}),j=Object.freeze({[D.DEVICE_TYPES.wasm]:te.q8}),y=Object.freeze({[te.fp32]:"",[te.fp16]:"_fp16",[te.int8]:"_int8",[te.uint8]:"_uint8",[te.q8]:"_quantized",[te.q4]:"_q4",[te.q4f16]:"_q4f16",[te.bnb4]:"_bnb4"})},"./src/utils/generic.js":(Ae,F,r)=>{r.r(F),r.d(F,{Callable:()=>w});const w=class{constructor(){let D=function(...W){return D._call(...W)};return Object.setPrototypeOf(D,new.target.prototype)}_call(...D){throw Error("Must implement _call method in subclass")}}},"./src/utils/hub.js":(Ae,F,r)=>{r.r(F),r.d(F,{getFile:()=>v,getModelFile:()=>re,getModelJSON:()=>ae});var w=r("?7a2c"),D=r("?a42a"),W=r("./src/env.js"),te=r("./src/utils/core.js");const j={txt:"text/plain",html:"text/html",css:"text/css",js:"text/javascript",json:"application/json",png:"image/png",jpg:"image/jpeg",jpeg:"image/jpeg",gif:"image/gif"};class y{constructor(I){if(this.filePath=I,this.headers=new Headers,this.exists=w.existsSync(I),this.exists){this.status=200,this.statusText="OK";let $=w.statSync(I);this.headers.set("content-length",$.size.toString()),this.updateContentType();let g=this;this.body=new ReadableStream({start(C){g.arrayBuffer().then(x=>{C.enqueue(new Uint8Array(x)),C.close()})}})}else this.status=404,this.statusText="Not Found",this.body=null}updateContentType(){const I=this.filePath.toString().split(".").pop().toLowerCase();this.headers.set("content-type",j[I]??"application/octet-stream")}clone(){let I=new y(this.filePath);return I.exists=this.exists,I.status=this.status,I.statusText=this.statusText,I.headers=new Headers(this.headers),I}async arrayBuffer(){return(await w.promises.readFile(this.filePath)).buffer}async blob(){const I=await w.promises.readFile(this.filePath);return new Blob([I],{type:this.headers.get("content-type")})}async text(){return await w.promises.readFile(this.filePath,"utf8")}async json(){return JSON.parse(await this.text())}}function P(X,I=null,$=null){let g;try{g=new URL(X)}catch{return!1}return!(I&&!I.includes(g.protocol)||$&&!$.includes(g.hostname))}async function v(X){if(W.env.useFS&&!P(X,["http:","https:","blob:"]))return new y(X);if(typeof process<"u"&&process?.release?.name==="node"){const I=!!ch?.TESTING_REMOTELY,$=W.env.version,g=new Headers;if(g.set("User-Agent",`transformers.js/${$}; is_ci/${I};`),P(X,["http:","https:"],["huggingface.co","hf.co"])){const x=ch?.HF_TOKEN??ch?.HF_ACCESS_TOKEN;x&&g.set("Authorization",`Bearer ${x}`)}return fetch(X,{headers:g})}else return fetch(X)}const T={400:"Bad request error occurred while trying to load file",401:"Unauthorized access to file",403:"Forbidden access to file",404:"Could not locate file",408:"Request timeout error occurred while trying to load file",500:"Internal server error error occurred while trying to load file",502:"Bad gateway error occurred while trying to load file",503:"Service unavailable error occurred while trying to load file",504:"Gateway timeout error occurred while trying to load file"};function b(X,I,$){if(!$)return null;const g=T[X]??`Error (${X}) occurred while trying to load file`;throw Error(`${g}: "${I}".`)}class z{constructor(I){this.path=I}async match(I){let $=D.join(this.path,I),g=new y($);if(g.exists)return g}async put(I,$){const g=Buffer.from(await $.arrayBuffer());let C=D.join(this.path,I);try{await w.promises.mkdir(D.dirname(C),{recursive:!0}),await w.promises.writeFile(C,g)}catch(x){console.warn("An error occurred while writing the file to cache:",x)}}}async function K(X,...I){for(let $ of I)try{let g=await X.match($);if(g)return g}catch{continue}}async function re(X,I,$=!0,g={}){if(!W.env.allowLocalModels){if(g.local_files_only)throw Error("Invalid configuration detected: local models are disabled (`env.allowLocalModels=false`) but you have requested to only use local models (`local_files_only=true`).");if(!W.env.allowRemoteModels)throw Error("Invalid configuration detected: both local and remote models are disabled. Fix by setting `env.allowLocalModels` or `env.allowRemoteModels` to `true`.")}(0,te.dispatchCallback)(g.progress_callback,{status:"initiate",name:X,file:I});let C;if(!C&&W.env.useBrowserCache){if(typeof caches>"u")throw Error("Browser cache is not available in this environment.");try{C=await caches.open("transformers-cache")}catch(ut){console.warn("An error occurred while opening the browser cache:",ut)}}if(!C&&W.env.useFSCache&&(C=new z(g.cache_dir??W.env.cacheDir)),!C&&W.env.useCustomCache){if(!W.env.customCache)throw Error("`env.useCustomCache=true`, but `env.customCache` is not defined.");if(!W.env.customCache.match||!W.env.customCache.put)throw new Error("`env.customCache` must be an object which implements the `match` and `put` functions of the Web Cache API. For more information, see https://developer.mozilla.org/en-US/docs/Web/API/Cache");C=W.env.customCache}const x=g.revision??"main";let J=G(X,I),Q=G(W.env.localModelPath,J),le=G(W.env.remoteHost,W.env.remotePathTemplate.replaceAll("{model}",X).replaceAll("{revision}",encodeURIComponent(x)),I),ue=x==="main"?J:G(X,x,I),fe,Pe=C instanceof z?ue:le,ve=!1,Fe;C&&(Fe=await K(C,Q,Pe));const Ge=Fe!==void 0;if(Fe===void 0){if(W.env.allowLocalModels)if(P(J,["http:","https:"])){if(g.local_files_only)throw new Error(`\`local_files_only=true\`, but attempted to load a remote file from: ${J}.`);if(!W.env.allowRemoteModels)throw new Error(`\`env.allowRemoteModels=false\`, but attempted to load a remote file from: ${J}.`)}else try{Fe=await v(Q),fe=Q}catch(de){console.warn(`Unable to load from local path "${Q}": "${de}"`)}if(Fe===void 0||Fe.status===404){if(g.local_files_only||!W.env.allowRemoteModels){if($)throw Error(`\`local_files_only=true\` or \`env.allowRemoteModels=false\` and file was not found locally at "${Q}".`);return null}if(Fe=await v(le),Fe.status!==200)return b(Fe.status,le,$);fe=Pe}ve=C&&typeof Response<"u"&&Fe instanceof Response&&Fe.status===200}(0,te.dispatchCallback)(g.progress_callback,{status:"download",name:X,file:I});let Re;return g.progress_callback?Ge&&typeof navigator<"u"&&/firefox/i.test(navigator.userAgent)?(Re=new Uint8Array(await Fe.arrayBuffer()),(0,te.dispatchCallback)(g.progress_callback,{status:"progress",name:X,file:I,progress:100,loaded:Re.length,total:Re.length})):Re=await B(Fe,ut=>{(0,te.dispatchCallback)(g.progress_callback,{status:"progress",name:X,file:I,...ut})}):Re=new Uint8Array(await Fe.arrayBuffer()),ve&&fe&&await C.match(fe)===void 0&&await C.put(fe,new Response(Re,{headers:Fe.headers})).catch(ut=>{console.warn(`Unable to add response to browser cache: ${ut}.`)}),(0,te.dispatchCallback)(g.progress_callback,{status:"done",name:X,file:I}),Re}async function ae(X,I,$=!0,g={}){let C=await re(X,I,$,g);if(C===null)return{};let J=new TextDecoder("utf-8").decode(C);return JSON.parse(J)}async function B(X,I){const $=X.headers.get("Content-Length");$===null&&console.warn("Unable to determine content-length from response headers. Will expand buffer when needed.");let g=parseInt($??"0"),C=new Uint8Array(g),x=0;const J=X.body.getReader();async function Q(){const{done:le,value:ue}=await J.read();if(le)return;let fe=x+ue.length;if(fe>g){g=fe;let ve=new Uint8Array(g);ve.set(C),C=ve}C.set(ue,x),x=fe;const Pe=x/g*100;return I({progress:Pe,loaded:x,total:g}),Q()}return await Q(),C}function G(...X){return X=X.map((I,$)=>($&&(I=I.replace(new RegExp("^/"),"")),$!==X.length-1&&(I=I.replace(new RegExp("/$"),"")),I)),X.join("/")}},"./src/utils/image.js":(Ae,F,r)=>{r.r(F),r.d(F,{RawImage:()=>K,load_image:()=>re});var w=r("./src/utils/core.js"),D=r("./src/utils/hub.js"),W=r("./src/env.js"),te=r("./src/utils/tensor.js"),j=r("?2b25");let y,P,v;const T=W.apis.IS_BROWSER_ENV||W.apis.IS_WEBWORKER_ENV;if(T)y=(ae,B)=>{if(!self.OffscreenCanvas)throw new Error("OffscreenCanvas not supported by this browser.");return new self.OffscreenCanvas(ae,B)},v=self.createImageBitmap,P=self.ImageData;else if(j)v=async ae=>{const G=(await ae.metadata()).channels,{data:X,info:I}=await ae.rotate().raw().toBuffer({resolveWithObject:!0}),$=new K(new Uint8ClampedArray(X),I.width,I.height,I.channels);return G!==void 0&&G!==I.channels&&$.convert(G),$};else throw new Error("Unable to load image processing library.");const b={0:"nearest",1:"lanczos",2:"bilinear",3:"bicubic",4:"box",5:"hamming"},z=new Map([["png","image/png"],["jpg","image/jpeg"],["jpeg","image/jpeg"],["gif","image/gif"]]);class K{constructor(B,G,X,I){this.data=B,this.width=G,this.height=X,this.channels=I}get size(){return[this.width,this.height]}static async read(B){if(B instanceof K)return B;if(typeof B=="string"||B instanceof URL)return await this.fromURL(B);throw new Error(`Unsupported input type: ${typeof B}`)}static fromCanvas(B){if(!T)throw new Error("fromCanvas() is only supported in browser environments.");const X=B.getContext("2d").getImageData(0,0,B.width,B.height).data;return new K(X,B.width,B.height,4)}static async fromURL(B){const G=await(0,D.getFile)(B);if(G.status!==200)throw new Error(`Unable to read image from "${B}" (${G.status} ${G.statusText})`);const X=await G.blob();return this.fromBlob(X)}static async fromBlob(B){if(T){const G=await v(B),X=y(G.width,G.height).getContext("2d");return X.drawImage(G,0,0),new this(X.getImageData(0,0,G.width,G.height).data,G.width,G.height,4)}else{const G=j(await B.arrayBuffer());return await v(G)}}static fromTensor(B,G="CHW"){if(B.dims.length!==3)throw new Error(`Tensor should have 3 dimensions, but has ${B.dims.length} dimensions.`);if(G==="CHW")B=B.transpose(1,2,0);else if(G!=="HWC")throw new Error(`Unsupported channel format: ${G}`);if(!(B.data instanceof Uint8ClampedArray||B.data instanceof Uint8Array))throw new Error(`Unsupported tensor type: ${B.type}`);switch(B.dims[2]){case 1:case 2:case 3:case 4:return new K(B.data,B.dims[1],B.dims[0],B.dims[2]);default:throw new Error(`Unsupported number of channels: ${B.dims[2]}`)}}grayscale(){if(this.channels===1)return this;const B=new Uint8ClampedArray(this.width*this.height*1);switch(this.channels){case 3:case 4:for(let G=0,X=0;G<this.data.length;G+=this.channels){const I=this.data[G],$=this.data[G+1],g=this.data[G+2];B[X++]=Math.round(.2989*I+.587*$+.114*g)}break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(B,this.width,this.height,1)}rgb(){if(this.channels===3)return this;const B=new Uint8ClampedArray(this.width*this.height*3);switch(this.channels){case 1:for(let G=0,X=0;G<this.data.length;++G)B[X++]=this.data[G],B[X++]=this.data[G],B[X++]=this.data[G];break;case 4:for(let G=0,X=0;G<this.data.length;G+=4)B[X++]=this.data[G],B[X++]=this.data[G+1],B[X++]=this.data[G+2];break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(B,this.width,this.height,3)}rgba(){if(this.channels===4)return this;const B=new Uint8ClampedArray(this.width*this.height*4);switch(this.channels){case 1:for(let G=0,X=0;G<this.data.length;++G)B[X++]=this.data[G],B[X++]=this.data[G],B[X++]=this.data[G],B[X++]=255;break;case 3:for(let G=0,X=0;G<this.data.length;G+=3)B[X++]=this.data[G],B[X++]=this.data[G+1],B[X++]=this.data[G+2],B[X++]=255;break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(B,this.width,this.height,4)}putAlpha(B){if(B.width!==this.width||B.height!==this.height)throw new Error(`Expected mask size to be ${this.width}x${this.height}, but got ${B.width}x${B.height}`);if(B.channels!==1)throw new Error(`Expected mask to have 1 channel, but got ${B.channels}`);const G=this.data,X=B.data,I=this.width*this.height;if(this.channels===3){const $=new Uint8ClampedArray(I*4);for(let g=0,C=0,x=0;g<I;++g)$[x++]=G[C++],$[x++]=G[C++],$[x++]=G[C++],$[x++]=X[g];return this._update($,this.width,this.height,4)}else if(this.channels===4){for(let $=0;$<I;++$)G[4*$+3]=X[$];return this}throw new Error(`Expected image to have 3 or 4 channels, but got ${this.channels}`)}async resize(B,G,{resample:X=2}={}){if(this.width===B&&this.height===G)return this;let I=b[X]??X;const $=(0,w.isNullishDimension)(B),g=(0,w.isNullishDimension)(G);if($&&g)return this;if($?B=G/this.height*this.width:g&&(G=B/this.width*this.height),T){const C=this.channels,x=this.toCanvas(),J=y(B,G).getContext("2d");return J.drawImage(x,0,0,B,G),new K(J.getImageData(0,0,B,G).data,B,G,4).convert(C)}else{let C=this.toSharp();switch(I){case"box":case"hamming":(I==="box"||I==="hamming")&&(console.warn(`Resampling method ${I} is not yet supported. Using bilinear instead.`),I="bilinear");case"nearest":case"bilinear":case"bicubic":C=C.affine([B/this.width,0,0,G/this.height],{interpolator:I});break;case"lanczos":C=C.resize({width:B,height:G,fit:"fill",kernel:"lanczos3"});break;default:throw new Error(`Resampling method ${I} is not supported.`)}return await v(C)}}async pad([B,G,X,I]){if(B=Math.max(B,0),G=Math.max(G,0),X=Math.max(X,0),I=Math.max(I,0),B===0&&G===0&&X===0&&I===0)return this;if(T){const $=this.channels,g=this.toCanvas(),C=this.width+B+G,x=this.height+X+I,J=y(C,x).getContext("2d");return J.drawImage(g,0,0,this.width,this.height,B,X,this.width,this.height),new K(J.getImageData(0,0,C,x).data,C,x,4).convert($)}else{const $=this.toSharp().extend({left:B,right:G,top:X,bottom:I});return await v($)}}async crop([B,G,X,I]){if(B=Math.max(B,0),G=Math.max(G,0),X=Math.min(X,this.width-1),I=Math.min(I,this.height-1),B===0&&G===0&&X===this.width-1&&I===this.height-1)return this;const $=X-B+1,g=I-G+1;if(T){const C=this.channels,x=this.toCanvas(),J=y($,g).getContext("2d");return J.drawImage(x,B,G,$,g,0,0,$,g),new K(J.getImageData(0,0,$,g).data,$,g,4).convert(C)}else{const C=this.toSharp().extract({left:B,top:G,width:$,height:g});return await v(C)}}async center_crop(B,G){if(this.width===B&&this.height===G)return this;const X=(this.width-B)/2,I=(this.height-G)/2;if(T){const $=this.channels,g=this.toCanvas(),C=y(B,G).getContext("2d");let x=0,J=0,Q=0,le=0;return X>=0?x=X:Q=-X,I>=0?J=I:le=-I,C.drawImage(g,x,J,B,G,Q,le,B,G),new K(C.getImageData(0,0,B,G).data,B,G,4).convert($)}else{let $=this.toSharp();if(X>=0&&I>=0)$=$.extract({left:Math.floor(X),top:Math.floor(I),width:B,height:G});else if(X<=0&&I<=0){const g=Math.floor(-I),C=Math.floor(-X);$=$.extend({top:g,left:C,right:B-this.width-C,bottom:G-this.height-g})}else{let g=[0,0],C=0;I<0?(g[0]=Math.floor(-I),g[1]=G-this.height-g[0]):C=Math.floor(I);let x=[0,0],J=0;X<0?(x[0]=Math.floor(-X),x[1]=B-this.width-x[0]):J=Math.floor(X),$=$.extend({top:g[0],bottom:g[1],left:x[0],right:x[1]}).extract({left:J,top:C,width:B,height:G})}return await v($)}}async toBlob(B="image/png",G=1){if(!T)throw new Error("toBlob() is only supported in browser environments.");return await this.toCanvas().convertToBlob({type:B,quality:G})}toTensor(B="CHW"){let G=new te.Tensor("uint8",new Uint8Array(this.data),[this.height,this.width,this.channels]);if(B!=="HWC")if(B==="CHW")G=G.permute(2,0,1);else throw new Error(`Unsupported channel format: ${B}`);return G}toCanvas(){if(!T)throw new Error("toCanvas() is only supported in browser environments.");const B=this.clone().rgba(),G=y(B.width,B.height),X=new P(B.data,B.width,B.height);return G.getContext("2d").putImageData(X,0,0),G}split(){const{data:B,width:G,height:X,channels:I}=this,$=B.constructor,g=B.length/I,C=Array.from({length:I},()=>new $(g));for(let x=0;x<g;++x){const J=I*x;for(let Q=0;Q<I;++Q)C[Q][x]=B[J+Q]}return C.map(x=>new K(x,G,X,1))}_update(B,G,X,I=null){return this.data=B,this.width=G,this.height=X,I!==null&&(this.channels=I),this}clone(){return new K(this.data.slice(),this.width,this.height,this.channels)}convert(B){if(this.channels===B)return this;switch(B){case 1:this.grayscale();break;case 3:this.rgb();break;case 4:this.rgba();break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this}async save(B){if(T){if(W.apis.IS_WEBWORKER_ENV)throw new Error("Unable to save an image from a Web Worker.");const G=B.split(".").pop().toLowerCase(),X=z.get(G)??"image/png",I=await this.toBlob(X),$=URL.createObjectURL(I),g=document.createElement("a");g.href=$,g.download=B,g.click(),g.remove()}else{if(W.env.useFS)return await this.toSharp().toFile(B);throw new Error("Unable to save the image because filesystem is disabled in this environment.")}}toSharp(){if(T)throw new Error("toSharp() is only supported in server-side environments.");return j(this.data,{raw:{width:this.width,height:this.height,channels:this.channels}})}}const re=K.read.bind(K)},"./src/utils/maths.js":(Ae,F,r)=>{r.r(F),r.d(F,{FFT:()=>re,bankers_round:()=>G,cos_sim:()=>y,dot:()=>j,dynamic_time_warping:()=>X,interpolate_data:()=>w,log_softmax:()=>te,magnitude:()=>P,max:()=>T,medianFilter:()=>ae,min:()=>v,permute_data:()=>D,round:()=>B,softmax:()=>W});function w(I,[$,g,C],[x,J],Q="bilinear",le=!1){const ue=J/C,fe=x/g,Pe=new I.constructor(x*J*$),ve=g*C,Fe=x*J;for(let Ge=0;Ge<x;++Ge)for(let Re=0;Re<J;++Re){const ut=Ge*J+Re,de=(Re+.5)/ue-.5,Z=(Ge+.5)/fe-.5;let he=Math.floor(de),be=Math.floor(Z);const De=Math.min(he+1,C-1),Ze=Math.min(be+1,g-1);he=Math.max(he,0),be=Math.max(be,0);const Ke=de-he,ne=Z-be,Xe=(1-Ke)*(1-ne),$e=Ke*(1-ne),ie=(1-Ke)*ne,Me=Ke*ne,je=be*C,Ne=Ze*C,Ve=je+he,Be=je+De,Qe=Ne+he,ot=Ne+De;for(let gt=0;gt<$;++gt){const lt=gt*ve;Pe[gt*Fe+ut]=Xe*I[lt+Ve]+$e*I[lt+Be]+ie*I[lt+Qe]+Me*I[lt+ot]}}return Pe}function D(I,$,g){const C=new Array(g.length),x=new Array(g.length);for(let le=g.length-1,ue=1;le>=0;--le)x[le]=ue,C[le]=$[g[le]],ue*=C[le];const J=g.map((le,ue)=>x[g.indexOf(ue)]),Q=new I.constructor(I.length);for(let le=0;le<I.length;++le){let ue=0;for(let fe=$.length-1,Pe=le;fe>=0;--fe)ue+=Pe%$[fe]*J[fe],Pe=Math.floor(Pe/$[fe]);Q[ue]=I[le]}return[Q,C]}function W(I){const $=T(I)[0],g=I.map(J=>Math.exp(J-$)),C=g.reduce((J,Q)=>J+Q,0);return g.map(J=>J/C)}function te(I){const $=T(I)[0];let g=0;for(let J=0;J<I.length;++J)g+=Math.exp(I[J]-$);const C=Math.log(g);return I.map(J=>J-$-C)}function j(I,$){let g=0;for(let C=0;C<I.length;++C)g+=I[C]*$[C];return g}function y(I,$){const g=j(I,$),C=P(I),x=P($);return g/(C*x)}function P(I){return Math.sqrt(I.reduce(($,g)=>$+g*g,0))}function v(I){if(I.length===0)throw Error("Array must not be empty");let $=I[0],g=0;for(let C=1;C<I.length;++C)I[C]<$&&($=I[C],g=C);return[$,g]}function T(I){if(I.length===0)throw Error("Array must not be empty");let $=I[0],g=0;for(let C=1;C<I.length;++C)I[C]>$&&($=I[C],g=C);return[$,g]}function b(I){return I>0&&(I&I-1)===0}class z{constructor($){if(this.size=$|0,this.size<=1||!b(this.size))throw new Error("FFT size must be a power of two larger than 1");this._csize=$<<1,this.table=new Float64Array(this.size*2);for(let C=0;C<this.table.length;C+=2){const x=Math.PI*C/this.size;this.table[C]=Math.cos(x),this.table[C+1]=-Math.sin(x)}let g=0;for(let C=1;this.size>C;C<<=1)++g;this._width=g%2===0?g-1:g,this._bitrev=new Int32Array(1<<this._width);for(let C=0;C<this._bitrev.length;++C){this._bitrev[C]=0;for(let x=0;x<this._width;x+=2){const J=this._width-x-2;this._bitrev[C]|=(C>>>x&3)<<J}}}createComplexArray(){return new Float64Array(this._csize)}fromComplexArray($,g){const C=g||new Array($.length>>>1);for(let x=0;x<$.length;x+=2)C[x>>>1]=$[x];return C}toComplexArray($,g){const C=g||this.createComplexArray();for(let x=0;x<C.length;x+=2)C[x]=$[x>>>1],C[x+1]=0;return C}transform($,g){if($===g)throw new Error("Input and output buffers must be different");this._transform4($,g,1)}realTransform($,g){if($===g)throw new Error("Input and output buffers must be different");this._realTransform4($,g,1)}inverseTransform($,g){if($===g)throw new Error("Input and output buffers must be different");this._transform4($,g,-1);for(let C=0;C<$.length;++C)$[C]/=this.size}_transform4($,g,C){const x=this._csize;let Q=1<<this._width,le=x/Q<<1,ue,fe;const Pe=this._bitrev;if(le===4)for(ue=0,fe=0;ue<x;ue+=le,++fe){const Fe=Pe[fe];this._singleTransform2(g,$,ue,Fe,Q)}else for(ue=0,fe=0;ue<x;ue+=le,++fe){const Fe=Pe[fe];this._singleTransform4(g,$,ue,Fe,Q,C)}const ve=this.table;for(Q>>=2;Q>=2;Q>>=2){le=x/Q<<1;const Fe=le>>>2;for(ue=0;ue<x;ue+=le){const Ge=ue+Fe-1;for(let Re=ue,ut=0;Re<Ge;Re+=2,ut+=Q){const de=Re,Z=de+Fe,he=Z+Fe,be=he+Fe,De=$[de],Ze=$[de+1],Ke=$[Z],ne=$[Z+1],Xe=$[he],$e=$[he+1],ie=$[be],Me=$[be+1],je=ve[ut],Ne=C*ve[ut+1],Ve=Ke*je-ne*Ne,Be=Ke*Ne+ne*je,Qe=ve[2*ut],ot=C*ve[2*ut+1],gt=Xe*Qe-$e*ot,lt=Xe*ot+$e*Qe,dt=ve[3*ut],A=C*ve[3*ut+1],oe=ie*dt-Me*A,q=ie*A+Me*dt,_e=De+gt,Se=Ze+lt,He=De-gt,et=Ze-lt,it=Ve+oe,ct=Be+q,vt=C*(Ve-oe),Yt=C*(Be-q);$[de]=_e+it,$[de+1]=Se+ct,$[Z]=He+Yt,$[Z+1]=et-vt,$[he]=_e-it,$[he+1]=Se-ct,$[be]=He-Yt,$[be+1]=et+vt}}}}_singleTransform2($,g,C,x,J){const Q=$[x],le=$[x+1],ue=$[x+J],fe=$[x+J+1];g[C]=Q+ue,g[C+1]=le+fe,g[C+2]=Q-ue,g[C+3]=le-fe}_singleTransform4($,g,C,x,J,Q){const le=J*2,ue=J*3,fe=$[x],Pe=$[x+1],ve=$[x+J],Fe=$[x+J+1],Ge=$[x+le],Re=$[x+le+1],ut=$[x+ue],de=$[x+ue+1],Z=fe+Ge,he=Pe+Re,be=fe-Ge,De=Pe-Re,Ze=ve+ut,Ke=Fe+de,ne=Q*(ve-ut),Xe=Q*(Fe-de);g[C]=Z+Ze,g[C+1]=he+Ke,g[C+2]=be+Xe,g[C+3]=De-ne,g[C+4]=Z-Ze,g[C+5]=he-Ke,g[C+6]=be-Xe,g[C+7]=De+ne}_realTransform4($,g,C){const x=this._csize;let Q=1<<this._width,le=x/Q<<1,ue,fe;const Pe=this._bitrev;if(le===4)for(ue=0,fe=0;ue<x;ue+=le,++fe){const Ge=Pe[fe];this._singleRealTransform2(g,$,ue,Ge>>>1,Q>>>1)}else for(ue=0,fe=0;ue<x;ue+=le,++fe){const Ge=Pe[fe];this._singleRealTransform4(g,$,ue,Ge>>>1,Q>>>1,C)}const ve=this.table;for(Q>>=2;Q>=2;Q>>=2){le=x/Q<<1;const Ge=le>>>1,Re=Ge>>>1,ut=Re>>>1;for(ue=0;ue<x;ue+=le)for(let de=0,Z=0;de<=ut;de+=2,Z+=Q){const he=ue+de,be=he+Re,De=be+Re,Ze=De+Re,Ke=$[he],ne=$[he+1],Xe=$[be],$e=$[be+1],ie=$[De],Me=$[De+1],je=$[Ze],Ne=$[Ze+1],Ve=Ke,Be=ne,Qe=ve[Z],ot=C*ve[Z+1],gt=Xe*Qe-$e*ot,lt=Xe*ot+$e*Qe,dt=ve[2*Z],A=C*ve[2*Z+1],oe=ie*dt-Me*A,q=ie*A+Me*dt,_e=ve[3*Z],Se=C*ve[3*Z+1],He=je*_e-Ne*Se,et=je*Se+Ne*_e,it=Ve+oe,ct=Be+q,vt=Ve-oe,Yt=Be-q,ts=gt+He,xs=lt+et,ms=C*(gt-He),Ps=C*(lt-et);if($[he]=it+ts,$[he+1]=ct+xs,$[be]=vt+Ps,$[be+1]=Yt-ms,de===0){$[De]=it-ts,$[De+1]=ct-xs;continue}if(de===ut)continue;const Ss=ue+Re-de,Hs=ue+Ge-de;$[Ss]=vt-C*Ps,$[Ss+1]=-Yt-C*ms,$[Hs]=it-C*ts,$[Hs+1]=-ct+C*xs}}const Fe=x>>>1;for(let Ge=2;Ge<Fe;Ge+=2)$[x-Ge]=$[Ge],$[x-Ge+1]=-$[Ge+1]}_singleRealTransform2($,g,C,x,J){const Q=$[x],le=$[x+J];g[C]=Q+le,g[C+1]=0,g[C+2]=Q-le,g[C+3]=0}_singleRealTransform4($,g,C,x,J,Q){const le=J*2,ue=J*3,fe=$[x],Pe=$[x+J],ve=$[x+le],Fe=$[x+ue],Ge=fe+ve,Re=fe-ve,ut=Pe+Fe,de=Q*(Pe-Fe);g[C]=Ge+ut,g[C+1]=0,g[C+2]=Re,g[C+3]=-de,g[C+4]=Ge-ut,g[C+5]=0,g[C+6]=Re,g[C+7]=de}}class K{constructor($){const g=2*($-1),C=2*(2*$-1),x=2**Math.ceil(Math.log2(C));this.bufferSize=x,this._a=g;const J=new Float64Array(C),Q=new Float64Array(x);this._chirpBuffer=new Float64Array(x),this._buffer1=new Float64Array(x),this._buffer2=new Float64Array(x),this._outBuffer1=new Float64Array(x),this._outBuffer2=new Float64Array(x);const le=-2*Math.PI/$,ue=Math.cos(le),fe=Math.sin(le);for(let Pe=0;Pe<C>>1;++Pe){const ve=(Pe+1-$)**2/2,Fe=Math.sqrt(ue**2+fe**2)**ve,Ge=ve*Math.atan2(fe,ue),Re=2*Pe;J[Re]=Fe*Math.cos(Ge),J[Re+1]=Fe*Math.sin(Ge),Q[Re]=J[Re],Q[Re+1]=-J[Re+1]}this._slicedChirpBuffer=J.subarray(g,C),this._f=new z(x>>1),this._f.transform(this._chirpBuffer,Q)}_transform($,g,C){const x=this._buffer1,J=this._buffer2,Q=this._outBuffer1,le=this._outBuffer2,ue=this._chirpBuffer,fe=this._slicedChirpBuffer,Pe=this._a;if(C)for(let ve=0;ve<fe.length;ve+=2){const Fe=ve+1,Ge=ve>>1,Re=g[Ge];x[ve]=Re*fe[ve],x[Fe]=Re*fe[Fe]}else for(let ve=0;ve<fe.length;ve+=2){const Fe=ve+1;x[ve]=g[ve]*fe[ve]-g[Fe]*fe[Fe],x[Fe]=g[ve]*fe[Fe]+g[Fe]*fe[ve]}this._f.transform(Q,x);for(let ve=0;ve<ue.length;ve+=2){const Fe=ve+1;J[ve]=Q[ve]*ue[ve]-Q[Fe]*ue[Fe],J[Fe]=Q[ve]*ue[Fe]+Q[Fe]*ue[ve]}this._f.inverseTransform(le,J);for(let ve=0;ve<le.length;ve+=2){const Fe=le[ve+Pe],Ge=le[ve+Pe+1],Re=fe[ve],ut=fe[ve+1];$[ve]=Fe*Re-Ge*ut,$[ve+1]=Fe*ut+Ge*Re}}transform($,g){this._transform($,g,!1)}realTransform($,g){this._transform($,g,!0)}}class re{constructor($){this.fft_length=$,this.isPowerOfTwo=b($),this.isPowerOfTwo?(this.fft=new z($),this.outputBufferSize=2*$):(this.fft=new K($),this.outputBufferSize=this.fft.bufferSize)}realTransform($,g){this.fft.realTransform($,g)}transform($,g){this.fft.transform($,g)}}function ae(I,$){if($%2===0||$<=0)throw new Error("Window size must be a positive odd number");const g=new I.constructor(I.length),C=new I.constructor($),x=Math.floor($/2);for(let J=0;J<I.length;++J){let Q=0;for(let le=-x;le<=x;++le){let ue=J+le;ue<0?ue=Math.abs(ue):ue>=I.length&&(ue=2*(I.length-1)-ue),C[Q++]=I[ue]}C.sort(),g[J]=C[x]}return g}function B(I,$){const g=Math.pow(10,$);return Math.round(I*g)/g}function G(I){const $=Math.round(I);return Math.abs(I)%1===.5?$%2===0?$:$-1:$}function X(I){const $=I.length,g=I[0].length,C=[$+1,g+1],x=Array.from({length:C[0]},()=>Array(C[1]).fill(1/0));x[0][0]=0;const J=Array.from({length:C[0]},()=>Array(C[1]).fill(-1));for(let Pe=1;Pe<C[1];++Pe)for(let ve=1;ve<C[0];++ve){const Fe=x[ve-1][Pe-1],Ge=x[ve-1][Pe],Re=x[ve][Pe-1];let ut,de;Fe<Ge&&Fe<Re?(ut=Fe,de=0):Ge<Fe&&Ge<Re?(ut=Ge,de=1):(ut=Re,de=2),x[ve][Pe]=I[ve-1][Pe-1]+ut,J[ve][Pe]=de}for(let Pe=0;Pe<C[1];++Pe)J[0][Pe]=2;for(let Pe=0;Pe<C[0];++Pe)J[Pe][0]=1;let Q=$,le=g,ue=[],fe=[];for(;Q>0||le>0;)switch(ue.push(Q-1),fe.push(le-1),J[Q][le]){case 0:--Q,--le;break;case 1:--Q;break;case 2:--le;break;default:throw new Error(`Internal error in dynamic time warping. Unexpected trace[${Q}, ${le}]. Please file a bug report.`)}return ue.reverse(),fe.reverse(),[ue,fe]}},"./src/utils/tensor.js":(Ae,F,r)=>{r.r(F),r.d(F,{Tensor:()=>j,cat:()=>g,full:()=>ue,full_like:()=>fe,interpolate:()=>v,interpolate_4d:()=>T,layer_norm:()=>G,matmul:()=>b,mean:()=>J,mean_pooling:()=>B,ones:()=>Pe,ones_like:()=>ve,permute:()=>P,quantize_embeddings:()=>ut,rand:()=>Re,rfft:()=>z,slice:()=>ae,stack:()=>C,std_mean:()=>x,topk:()=>K,zeros:()=>Fe,zeros_like:()=>Ge});var w=r("./src/utils/maths.js"),D=r("./src/backends/onnx.js"),W=r("./src/ops/registry.js");const te=Object.freeze({float32:Float32Array,float16:Uint16Array,float64:Float64Array,string:Array,int8:Int8Array,uint8:Uint8Array,int16:Int16Array,uint16:Uint16Array,int32:Int32Array,uint32:Uint32Array,int64:BigInt64Array,uint64:BigUint64Array,bool:Uint8Array,uint4:Uint8Array,int4:Int8Array});class j{get dims(){return this.ort_tensor.dims}set dims(Z){this.ort_tensor.dims=Z}get type(){return this.ort_tensor.type}get data(){return this.ort_tensor.data}get size(){return this.ort_tensor.size}get location(){return this.ort_tensor.location}ort_tensor;constructor(...Z){return(0,D.isONNXTensor)(Z[0])?this.ort_tensor=Z[0]:this.ort_tensor=new D.Tensor(Z[0],Z[1],Z[2]),new Proxy(this,{get:(he,be)=>{if(typeof be=="string"){let De=Number(be);if(Number.isInteger(De))return he._getitem(De)}return he[be]},set:(he,be,De)=>he[be]=De})}dispose(){this.ort_tensor.dispose()}*[Symbol.iterator](){const[Z,...he]=this.dims;if(he.length>0){const be=he.reduce((De,Ze)=>De*Ze);for(let De=0;De<Z;++De)yield this._subarray(De,be,he)}else yield*this.data}_getitem(Z){const[he,...be]=this.dims;if(Z=$(Z,he),be.length>0){const De=be.reduce((Ze,Ke)=>Ze*Ke);return this._subarray(Z,De,be)}else return new j(this.type,[this.data[Z]],be)}indexOf(Z){const he=this.data;for(let be=0;be<he.length;++be)if(he[be]==Z)return be;return-1}_subarray(Z,he,be){const De=Z*he,Ze=(Z+1)*he,Ke="subarray"in this.data?this.data.subarray(De,Ze):this.data.slice(De,Ze);return new j(this.type,Ke,be)}item(){const Z=this.data;if(Z.length!==1)throw new Error(`a Tensor with ${Z.length} elements cannot be converted to Scalar`);return Z[0]}tolist(){return y(this.data,this.dims)}sigmoid(){return this.clone().sigmoid_()}sigmoid_(){const Z=this.data;for(let he=0;he<Z.length;++he)Z[he]=1/(1+Math.exp(-Z[he]));return this}map(Z){return this.clone().map_(Z)}map_(Z){const he=this.data;for(let be=0;be<he.length;++be)he[be]=Z(he[be],be,he);return this}mul(Z){return this.clone().mul_(Z)}mul_(Z){const he=this.data;for(let be=0;be<he.length;++be)he[be]*=Z;return this}div(Z){return this.clone().div_(Z)}div_(Z){const he=this.data;for(let be=0;be<he.length;++be)he[be]/=Z;return this}add(Z){return this.clone().add_(Z)}add_(Z){const he=this.data;for(let be=0;be<he.length;++be)he[be]+=Z;return this}sub(Z){return this.clone().sub_(Z)}sub_(Z){const he=this.data;for(let be=0;be<he.length;++be)he[be]-=Z;return this}clone(){return new j(this.type,this.data.slice(),this.dims.slice())}slice(...Z){const he=[],be=[];for(let $e=0;$e<this.dims.length;++$e){let ie=Z[$e];if(ie==null)be.push([0,this.dims[$e]]),he.push(this.dims[$e]);else if(typeof ie=="number")ie=$(ie,this.dims[$e],$e),be.push([ie,ie+1]);else if(Array.isArray(ie)&&ie.length===2){let[Me,je]=ie;if(Me=Me===null?0:$(Me,this.dims[$e],$e,!1),je=je===null?this.dims[$e]:$(je,this.dims[$e],$e,!1),Me>je)throw new Error(`Invalid slice: ${ie}`);const Ne=[Math.max(Me,0),Math.min(je,this.dims[$e])];be.push(Ne),he.push(Ne[1]-Ne[0])}else throw new Error(`Invalid slice: ${ie}`)}const De=be.map(([$e,ie])=>ie-$e),Ze=De.reduce(($e,ie)=>$e*ie),Ke=this.data,ne=new Ke.constructor(Ze),Xe=this.stride();for(let $e=0;$e<Ze;++$e){let ie=0;for(let Me=De.length-1,je=$e;Me>=0;--Me){const Ne=De[Me];ie+=(je%Ne+be[Me][0])*Xe[Me],je=Math.floor(je/Ne)}ne[$e]=Ke[ie]}return new j(this.type,ne,he)}permute(...Z){return P(this,Z)}transpose(...Z){return this.permute(...Z)}sum(Z=null,he=!1){return this.norm(1,Z,he)}norm(Z="fro",he=null,be=!1){if(Z==="fro")Z=2;else if(typeof Z=="string")throw Error(`Unsupported norm: ${Z}`);const De=this.data;if(he===null){let ne=De.reduce((Xe,$e)=>Xe+$e**Z,0)**(1/Z);return new j(this.type,[ne],[])}he=$(he,this.dims.length);const Ze=this.dims.slice();Ze[he]=1;const Ke=new De.constructor(De.length/this.dims[he]);for(let ne=0;ne<De.length;++ne){let Xe=0;for(let $e=this.dims.length-1,ie=ne,Me=1;$e>=0;--$e){const je=this.dims[$e];if($e!==he){const Ne=ie%je;Xe+=Ne*Me,Me*=Ze[$e]}ie=Math.floor(ie/je)}Ke[Xe]+=De[ne]**Z}if(Z!==1)for(let ne=0;ne<Ke.length;++ne)Ke[ne]=Ke[ne]**(1/Z);return be||Ze.splice(he,1),new j(this.type,Ke,Ze)}normalize_(Z=2,he=1){he=$(he,this.dims.length);const be=this.norm(Z,he,!0),De=this.data,Ze=be.data;for(let Ke=0;Ke<De.length;++Ke){let ne=0;for(let Xe=this.dims.length-1,$e=Ke,ie=1;Xe>=0;--Xe){const Me=this.dims[Xe];if(Xe!==he){const je=$e%Me;ne+=je*ie,ie*=this.dims[Xe]}$e=Math.floor($e/Me)}De[Ke]/=Ze[ne]}return this}normalize(Z=2,he=1){return this.clone().normalize_(Z,he)}stride(){return Q(this.dims)}squeeze(Z=null){return new j(this.type,this.data,X(this.dims,Z))}squeeze_(Z=null){return this.dims=X(this.dims,Z),this}unsqueeze(Z=null){return new j(this.type,this.data,I(this.dims,Z))}unsqueeze_(Z=null){return this.dims=I(this.dims,Z),this}flatten_(Z=0,he=-1){he=(he+this.dims.length)%this.dims.length;let be=this.dims.slice(0,Z),De=this.dims.slice(Z,he+1),Ze=this.dims.slice(he+1);return this.dims=[...be,De.reduce((Ke,ne)=>Ke*ne,1),...Ze],this}flatten(Z=0,he=-1){return this.clone().flatten_(Z,he)}view(...Z){let he=-1;for(let De=0;De<Z.length;++De)if(Z[De]===-1){if(he!==-1)throw new Error("Only one dimension can be inferred");he=De}const be=this.data;if(he!==-1){const De=Z.reduce((Ze,Ke,ne)=>ne!==he?Ze*Ke:Ze,1);Z[he]=be.length/De}return new j(this.type,be,Z)}neg_(){const Z=this.data;for(let he=0;he<Z.length;++he)Z[he]=-Z[he];return this}neg(){return this.clone().neg_()}clamp_(Z,he){const be=this.data;for(let De=0;De<be.length;++De)be[De]=Math.min(Math.max(be[De],Z),he);return this}clamp(Z,he){return this.clone().clamp_(Z,he)}round_(){const Z=this.data;for(let he=0;he<Z.length;++he)Z[he]=Math.round(Z[he]);return this}round(){return this.clone().round_()}mean(Z=null,he=!1){return J(this,Z,he)}min(Z=null,he=!1){if(Z!==null)throw new Error("`dim !== null` not yet implemented.");const be=(0,w.min)(this.data)[0];return new j(this.type,[be],[])}max(Z=null,he=!1){if(Z!==null)throw new Error("`dim !== null` not yet implemented.");const be=(0,w.max)(this.data)[0];return new j(this.type,[be],[])}argmin(Z=null,he=!1){if(Z!==null)throw new Error("`dim !== null` not yet implemented.");const be=(0,w.min)(this.data)[1];return new j("int64",[BigInt(be)],[])}argmax(Z=null,he=!1){if(Z!==null)throw new Error("`dim !== null` not yet implemented.");const be=(0,w.max)(this.data)[1];return new j("int64",[BigInt(be)],[])}to(Z){if(this.type===Z)return this;if(!te.hasOwnProperty(Z))throw new Error(`Unsupported type: ${Z}`);let he;const be=["int64","uint64"].includes(this.type),De=["int64","uint64"].includes(Z);return be&&!De?he=Number:!be&&De&&(he=BigInt),new j(Z,te[Z].from(this.data,he),this.dims)}}function y(de,Z){const he=de.length,be=Z.reduce((Ze,Ke)=>Ze*Ke);if(he!==be)throw Error(`cannot reshape array of size ${he} into shape (${Z})`);let De=de;for(let Ze=Z.length-1;Ze>=0;Ze--)De=De.reduce((Ke,ne)=>{let Xe=Ke[Ke.length-1];return Xe.length<Z[Ze]?Xe.push(ne):Ke.push([ne]),Ke},[[]]);return De[0]}function P(de,Z){const[he,be]=(0,w.permute_data)(de.data,de.dims,Z);return new j(de.type,he,be)}function v(de,[Z,he],be="bilinear",De=!1){const Ze=de.dims.at(-3)??1,Ke=de.dims.at(-2),ne=de.dims.at(-1);let Xe=(0,w.interpolate_data)(de.data,[Ze,Ke,ne],[Z,he],be,De);return new j(de.type,Xe,[Ze,Z,he])}async function T(de,{size:Z=null,mode:he="bilinear"}={}){if(de.dims.length!==4)throw new Error("`interpolate_4d` currently only supports 4D input.");if(!Z)throw new Error("`interpolate_4d` requires a `size` argument.");let be;if(Z.length===2)be=[...de.dims.slice(0,2),...Z];else if(Z.length===3)be=[de.dims[0],...Z];else if(Z.length===4)be=Z;else throw new Error("`size` must be of length 2, 3, or 4.");let De;if(he==="nearest")De=await W.TensorOpRegistry.nearest_interpolate_4d;else if(he==="bilinear")De=await W.TensorOpRegistry.bilinear_interpolate_4d;else if(he==="bicubic")De=await W.TensorOpRegistry.bicubic_interpolate_4d;else throw new Error(`Unsupported mode: ${he}`);const Ze=new j("int64",new BigInt64Array(be.map(BigInt)),[be.length]);return await De({x:de,s:Ze})}async function b(de,Z){return await(await W.TensorOpRegistry.matmul)({a:de,b:Z})}async function z(de,Z){return await(await W.TensorOpRegistry.rfft)({x:de,a:Z})}async function K(de,Z){const he=await W.TensorOpRegistry.top_k;return Z==null?Z=de.dims.at(-1):Z=Math.min(Z,de.dims.at(-1)),await he({x:de,k:new j("int64",[BigInt(Z)],[1])})}const re=de=>new j("int64",de,[de.length]);async function ae(de,Z,he,be,De){return await(await W.TensorOpRegistry.slice)({x:de,s:re(Z),e:re(he),a:re(be),t:re(De??new Array(be.length).fill(1))})}function B(de,Z){const he=de.data,be=Z.data,De=[de.dims[0],de.dims[2]],Ze=new he.constructor(De[0]*De[1]),[Ke,ne,Xe]=de.dims;let $e=0;for(let ie=0;ie<Ke;++ie){const Me=ie*Xe*ne;for(let je=0;je<Xe;++je){let Ne=0,Ve=0;const Be=ie*ne,Qe=Me+je;for(let gt=0;gt<ne;++gt){const lt=Number(be[Be+gt]);Ve+=lt,Ne+=he[Qe+gt*Xe]*lt}const ot=Ne/Ve;Ze[$e++]=ot}}return new j(de.type,Ze,De)}function G(de,Z,{eps:he=1e-5}={}){if(de.dims.length!==2)throw new Error("`layer_norm` currently only supports 2D input.");const[be,De]=de.dims;if(Z.length!==1&&Z[0]!==De)throw new Error("`normalized_shape` must be a 1D array with shape `[input.dims[1]]`.");const[Ze,Ke]=x(de,1,0,!0),ne=Ze.data,Xe=Ke.data,$e=de.data,ie=new $e.constructor($e.length);for(let Me=0;Me<be;++Me){const je=Me*De;for(let Ne=0;Ne<De;++Ne){const Ve=je+Ne;ie[Ve]=($e[Ve]-Xe[Me])/(ne[Me]+he)}}return new j(de.type,ie,de.dims)}function X(de,Z){return de=de.slice(),Z===null?de=de.filter(he=>he!==1):typeof Z=="number"?de[Z]===1&&de.splice(Z,1):Array.isArray(Z)&&(de=de.filter((he,be)=>he!==1||!Z.includes(be))),de}function I(de,Z){return Z=$(Z,de.length+1),de=de.slice(),de.splice(Z,0,1),de}function $(de,Z,he=null,be=!0){if(be&&(de<-Z||de>=Z))throw new Error(`IndexError: index ${de} is out of bounds for dimension${he===null?"":" "+he} with size ${Z}`);return de<0&&(de=(de%Z+Z)%Z),de}function g(de,Z=0){Z=$(Z,de[0].dims.length);const he=de[0].dims.slice();he[Z]=de.reduce((Ke,ne)=>Ke+ne.dims[Z],0);const be=he.reduce((Ke,ne)=>Ke*ne,1),De=new de[0].data.constructor(be),Ze=de[0].type;if(Z===0){let Ke=0;for(const ne of de){const Xe=ne.data;De.set(Xe,Ke),Ke+=Xe.length}}else{let Ke=0;for(let ne=0;ne<de.length;++ne){const{data:Xe,dims:$e}=de[ne];for(let ie=0;ie<Xe.length;++ie){let Me=0;for(let je=$e.length-1,Ne=ie,Ve=1;je>=0;--je){const Be=$e[je];let Qe=Ne%Be;je===Z&&(Qe+=Ke),Me+=Qe*Ve,Ve*=he[je],Ne=Math.floor(Ne/Be)}De[Me]=Xe[ie]}Ke+=$e[Z]}}return new j(Ze,De,he)}function C(de,Z=0){return g(de.map(he=>he.unsqueeze(Z)),Z)}function x(de,Z=null,he=1,be=!1){const De=de.data,Ze=de.dims;if(Z===null){const je=De.reduce((Qe,ot)=>Qe+ot,0)/De.length,Ne=Math.sqrt(De.reduce((Qe,ot)=>Qe+(ot-je)**2,0)/(De.length-he)),Ve=new j(de.type,[je],[]);return[new j(de.type,[Ne],[]),Ve]}Z=$(Z,Ze.length);const Ke=J(de,Z,be),ne=Ke.data,Xe=Ze.slice();Xe[Z]=1;const $e=new De.constructor(De.length/Ze[Z]);for(let Me=0;Me<De.length;++Me){let je=0;for(let Ne=Ze.length-1,Ve=Me,Be=1;Ne>=0;--Ne){const Qe=Ze[Ne];if(Ne!==Z){const ot=Ve%Qe;je+=ot*Be,Be*=Xe[Ne]}Ve=Math.floor(Ve/Qe)}$e[je]+=(De[Me]-ne[je])**2}for(let Me=0;Me<$e.length;++Me)$e[Me]=Math.sqrt($e[Me]/(Ze[Z]-he));return be||Xe.splice(Z,1),[new j(de.type,$e,Xe),Ke]}function J(de,Z=null,he=!1){const be=de.data;if(Z===null){const ne=be.reduce((Xe,$e)=>Xe+$e,0);return new j(de.type,[ne/be.length],[])}const De=de.dims;Z=$(Z,De.length);const Ze=De.slice();Ze[Z]=1;const Ke=new be.constructor(be.length/De[Z]);for(let ne=0;ne<be.length;++ne){let Xe=0;for(let $e=De.length-1,ie=ne,Me=1;$e>=0;--$e){const je=De[$e];if($e!==Z){const Ne=ie%je;Xe+=Ne*Me,Me*=Ze[$e]}ie=Math.floor(ie/je)}Ke[Xe]+=be[ne]}if(De[Z]!==1)for(let ne=0;ne<Ke.length;++ne)Ke[ne]=Ke[ne]/De[Z];return he||Ze.splice(Z,1),new j(de.type,Ke,Ze)}function Q(de){const Z=new Array(de.length);for(let he=de.length-1,be=1;he>=0;--he)Z[he]=be,be*=de[he];return Z}function le(de,Z,he,be){const De=de.reduce((Ze,Ke)=>Ze*Ke,1);return new j(he,new be(De).fill(Z),de)}function ue(de,Z){let he,be;if(typeof Z=="number")he="float32",be=Float32Array;else if(typeof Z=="bigint")he="int64",be=BigInt64Array;else if(typeof Z=="boolean")he="bool",be=Uint8Array;else throw new Error(`Unsupported data type: ${typeof Z}`);return le(de,Z,he,be)}function fe(de,Z){return ue(de.dims,Z)}function Pe(de){return le(de,1n,"int64",BigInt64Array)}function ve(de){return Pe(de.dims)}function Fe(de){return le(de,0n,"int64",BigInt64Array)}function Ge(de){return Fe(de.dims)}function Re(de){const Z=de.reduce((he,be)=>he*be,1);return new j("float32",Float32Array.from({length:Z},()=>Math.random()),de)}function ut(de,Z){if(de.dims.length!==2)throw new Error("The tensor must have 2 dimensions");if(de.dims.at(-1)%8!==0)throw new Error("The last dimension of the tensor must be a multiple of 8");if(!["binary","ubinary"].includes(Z))throw new Error("The precision must be either 'binary' or 'ubinary'");const he=Z==="binary",be=he?"int8":"uint8",De=he?Int8Array:Uint8Array,Ze=de.data,Ke=new De(Ze.length/8);for(let ne=0;ne<Ze.length;++ne){const Xe=Ze[ne]>0?1:0,$e=Math.floor(ne/8),ie=ne%8;Ke[$e]|=Xe<<7-ie,he&&ie===0&&(Ke[$e]-=128)}return new j(be,Ke,[de.dims[0],de.dims[1]/8])}}},Gm={};function us(Ae){var F=Gm[Ae];if(F!==void 0)return F.exports;var r=Gm[Ae]={exports:{}};return qm[Ae](r,r.exports,us),r.exports}us.m=qm;(()=>{var Ae=Object.getPrototypeOf?r=>Object.getPrototypeOf(r):r=>r.__proto__,F;us.t=function(r,w){if(w&1&&(r=this(r)),w&8||typeof r=="object"&&r&&(w&4&&r.__esModule||w&16&&typeof r.then=="function"))return r;var D=Object.create(null);us.r(D);var W={};F=F||[null,Ae({}),Ae([]),Ae(Ae)];for(var te=w&2&&r;typeof te=="object"&&!~F.indexOf(te);te=Ae(te))Object.getOwnPropertyNames(te).forEach(j=>W[j]=()=>r[j]);return W.default=()=>r,us.d(D,W),D}})();us.d=(Ae,F)=>{for(var r in F)us.o(F,r)&&!us.o(Ae,r)&&Object.defineProperty(Ae,r,{enumerable:!0,get:F[r]})};us.o=(Ae,F)=>Object.prototype.hasOwnProperty.call(Ae,F);us.r=Ae=>{typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(Ae,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Ae,"__esModule",{value:!0})};(()=>{var Ae;if(typeof import.meta.url=="string"&&(Ae=import.meta.url),!Ae)throw new Error("Automatic publicPath is not supported in this browser");Ae=Ae.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),us.p=Ae})();us.b=new URL("./",import.meta.url);var d={};(()=>{/*!*****************************!*\
  !*** ./src/transformers.js ***!
  \*****************************/us.r(d),us.d(d,{ASTFeatureExtractor:()=>v.ASTFeatureExtractor,ASTForAudioClassification:()=>r.ASTForAudioClassification,ASTModel:()=>r.ASTModel,ASTPreTrainedModel:()=>r.ASTPreTrainedModel,AlbertForMaskedLM:()=>r.AlbertForMaskedLM,AlbertForQuestionAnswering:()=>r.AlbertForQuestionAnswering,AlbertForSequenceClassification:()=>r.AlbertForSequenceClassification,AlbertModel:()=>r.AlbertModel,AlbertPreTrainedModel:()=>r.AlbertPreTrainedModel,AlbertTokenizer:()=>w.AlbertTokenizer,AudioClassificationPipeline:()=>F.AudioClassificationPipeline,AutoConfig:()=>D.AutoConfig,AutoFeatureExtractor:()=>T.AutoFeatureExtractor,AutoImageProcessor:()=>K.AutoImageProcessor,AutoModel:()=>r.AutoModel,AutoModelForAudioClassification:()=>r.AutoModelForAudioClassification,AutoModelForAudioFrameClassification:()=>r.AutoModelForAudioFrameClassification,AutoModelForCTC:()=>r.AutoModelForCTC,AutoModelForCausalLM:()=>r.AutoModelForCausalLM,AutoModelForDepthEstimation:()=>r.AutoModelForDepthEstimation,AutoModelForDocumentQuestionAnswering:()=>r.AutoModelForDocumentQuestionAnswering,AutoModelForImageClassification:()=>r.AutoModelForImageClassification,AutoModelForImageFeatureExtraction:()=>r.AutoModelForImageFeatureExtraction,AutoModelForImageMatting:()=>r.AutoModelForImageMatting,AutoModelForImageSegmentation:()=>r.AutoModelForImageSegmentation,AutoModelForImageToImage:()=>r.AutoModelForImageToImage,AutoModelForMaskGeneration:()=>r.AutoModelForMaskGeneration,AutoModelForMaskedLM:()=>r.AutoModelForMaskedLM,AutoModelForNormalEstimation:()=>r.AutoModelForNormalEstimation,AutoModelForObjectDetection:()=>r.AutoModelForObjectDetection,AutoModelForPoseEstimation:()=>r.AutoModelForPoseEstimation,AutoModelForQuestionAnswering:()=>r.AutoModelForQuestionAnswering,AutoModelForSemanticSegmentation:()=>r.AutoModelForSemanticSegmentation,AutoModelForSeq2SeqLM:()=>r.AutoModelForSeq2SeqLM,AutoModelForSequenceClassification:()=>r.AutoModelForSequenceClassification,AutoModelForSpeechSeq2Seq:()=>r.AutoModelForSpeechSeq2Seq,AutoModelForTextToSpectrogram:()=>r.AutoModelForTextToSpectrogram,AutoModelForTextToWaveform:()=>r.AutoModelForTextToWaveform,AutoModelForTokenClassification:()=>r.AutoModelForTokenClassification,AutoModelForUniversalSegmentation:()=>r.AutoModelForUniversalSegmentation,AutoModelForVision2Seq:()=>r.AutoModelForVision2Seq,AutoModelForXVector:()=>r.AutoModelForXVector,AutoModelForZeroShotObjectDetection:()=>r.AutoModelForZeroShotObjectDetection,AutoProcessor:()=>B.AutoProcessor,AutoTokenizer:()=>w.AutoTokenizer,AutomaticSpeechRecognitionPipeline:()=>F.AutomaticSpeechRecognitionPipeline,BartForConditionalGeneration:()=>r.BartForConditionalGeneration,BartForSequenceClassification:()=>r.BartForSequenceClassification,BartModel:()=>r.BartModel,BartPretrainedModel:()=>r.BartPretrainedModel,BartTokenizer:()=>w.BartTokenizer,BaseModelOutput:()=>r.BaseModelOutput,BaseStreamer:()=>G.BaseStreamer,BeitFeatureExtractor:()=>z.BeitFeatureExtractor,BeitForImageClassification:()=>r.BeitForImageClassification,BeitModel:()=>r.BeitModel,BeitPreTrainedModel:()=>r.BeitPreTrainedModel,BertForMaskedLM:()=>r.BertForMaskedLM,BertForQuestionAnswering:()=>r.BertForQuestionAnswering,BertForSequenceClassification:()=>r.BertForSequenceClassification,BertForTokenClassification:()=>r.BertForTokenClassification,BertModel:()=>r.BertModel,BertPreTrainedModel:()=>r.BertPreTrainedModel,BertTokenizer:()=>w.BertTokenizer,BitImageProcessor:()=>z.BitImageProcessor,BlenderbotForConditionalGeneration:()=>r.BlenderbotForConditionalGeneration,BlenderbotModel:()=>r.BlenderbotModel,BlenderbotPreTrainedModel:()=>r.BlenderbotPreTrainedModel,BlenderbotSmallForConditionalGeneration:()=>r.BlenderbotSmallForConditionalGeneration,BlenderbotSmallModel:()=>r.BlenderbotSmallModel,BlenderbotSmallPreTrainedModel:()=>r.BlenderbotSmallPreTrainedModel,BlenderbotSmallTokenizer:()=>w.BlenderbotSmallTokenizer,BlenderbotTokenizer:()=>w.BlenderbotTokenizer,BloomForCausalLM:()=>r.BloomForCausalLM,BloomModel:()=>r.BloomModel,BloomPreTrainedModel:()=>r.BloomPreTrainedModel,BloomTokenizer:()=>w.BloomTokenizer,CLIPFeatureExtractor:()=>z.CLIPFeatureExtractor,CLIPImageProcessor:()=>z.CLIPImageProcessor,CLIPModel:()=>r.CLIPModel,CLIPPreTrainedModel:()=>r.CLIPPreTrainedModel,CLIPSegForImageSegmentation:()=>r.CLIPSegForImageSegmentation,CLIPSegModel:()=>r.CLIPSegModel,CLIPSegPreTrainedModel:()=>r.CLIPSegPreTrainedModel,CLIPTextModel:()=>r.CLIPTextModel,CLIPTextModelWithProjection:()=>r.CLIPTextModelWithProjection,CLIPTokenizer:()=>w.CLIPTokenizer,CLIPVisionModel:()=>r.CLIPVisionModel,CLIPVisionModelWithProjection:()=>r.CLIPVisionModelWithProjection,CamembertForMaskedLM:()=>r.CamembertForMaskedLM,CamembertForQuestionAnswering:()=>r.CamembertForQuestionAnswering,CamembertForSequenceClassification:()=>r.CamembertForSequenceClassification,CamembertForTokenClassification:()=>r.CamembertForTokenClassification,CamembertModel:()=>r.CamembertModel,CamembertPreTrainedModel:()=>r.CamembertPreTrainedModel,CamembertTokenizer:()=>w.CamembertTokenizer,CausalLMOutput:()=>r.CausalLMOutput,CausalLMOutputWithPast:()=>r.CausalLMOutputWithPast,ChineseCLIPFeatureExtractor:()=>z.ChineseCLIPFeatureExtractor,ChineseCLIPModel:()=>r.ChineseCLIPModel,ChineseCLIPPreTrainedModel:()=>r.ChineseCLIPPreTrainedModel,ClapAudioModelWithProjection:()=>r.ClapAudioModelWithProjection,ClapFeatureExtractor:()=>v.ClapFeatureExtractor,ClapModel:()=>r.ClapModel,ClapPreTrainedModel:()=>r.ClapPreTrainedModel,ClapTextModelWithProjection:()=>r.ClapTextModelWithProjection,ClassifierFreeGuidanceLogitsProcessor:()=>I.ClassifierFreeGuidanceLogitsProcessor,CodeGenForCausalLM:()=>r.CodeGenForCausalLM,CodeGenModel:()=>r.CodeGenModel,CodeGenPreTrainedModel:()=>r.CodeGenPreTrainedModel,CodeGenTokenizer:()=>w.CodeGenTokenizer,CodeLlamaTokenizer:()=>w.CodeLlamaTokenizer,CohereForCausalLM:()=>r.CohereForCausalLM,CohereModel:()=>r.CohereModel,CoherePreTrainedModel:()=>r.CoherePreTrainedModel,CohereTokenizer:()=>w.CohereTokenizer,ConvBertForMaskedLM:()=>r.ConvBertForMaskedLM,ConvBertForQuestionAnswering:()=>r.ConvBertForQuestionAnswering,ConvBertForSequenceClassification:()=>r.ConvBertForSequenceClassification,ConvBertForTokenClassification:()=>r.ConvBertForTokenClassification,ConvBertModel:()=>r.ConvBertModel,ConvBertPreTrainedModel:()=>r.ConvBertPreTrainedModel,ConvBertTokenizer:()=>w.ConvBertTokenizer,ConvNextFeatureExtractor:()=>z.ConvNextFeatureExtractor,ConvNextForImageClassification:()=>r.ConvNextForImageClassification,ConvNextImageProcessor:()=>z.ConvNextImageProcessor,ConvNextModel:()=>r.ConvNextModel,ConvNextPreTrainedModel:()=>r.ConvNextPreTrainedModel,ConvNextV2ForImageClassification:()=>r.ConvNextV2ForImageClassification,ConvNextV2Model:()=>r.ConvNextV2Model,ConvNextV2PreTrainedModel:()=>r.ConvNextV2PreTrainedModel,DPTFeatureExtractor:()=>z.DPTFeatureExtractor,DPTForDepthEstimation:()=>r.DPTForDepthEstimation,DPTImageProcessor:()=>z.DPTImageProcessor,DPTModel:()=>r.DPTModel,DPTPreTrainedModel:()=>r.DPTPreTrainedModel,DebertaForMaskedLM:()=>r.DebertaForMaskedLM,DebertaForQuestionAnswering:()=>r.DebertaForQuestionAnswering,DebertaForSequenceClassification:()=>r.DebertaForSequenceClassification,DebertaForTokenClassification:()=>r.DebertaForTokenClassification,DebertaModel:()=>r.DebertaModel,DebertaPreTrainedModel:()=>r.DebertaPreTrainedModel,DebertaTokenizer:()=>w.DebertaTokenizer,DebertaV2ForMaskedLM:()=>r.DebertaV2ForMaskedLM,DebertaV2ForQuestionAnswering:()=>r.DebertaV2ForQuestionAnswering,DebertaV2ForSequenceClassification:()=>r.DebertaV2ForSequenceClassification,DebertaV2ForTokenClassification:()=>r.DebertaV2ForTokenClassification,DebertaV2Model:()=>r.DebertaV2Model,DebertaV2PreTrainedModel:()=>r.DebertaV2PreTrainedModel,DebertaV2Tokenizer:()=>w.DebertaV2Tokenizer,DecisionTransformerModel:()=>r.DecisionTransformerModel,DecisionTransformerPreTrainedModel:()=>r.DecisionTransformerPreTrainedModel,DeiTFeatureExtractor:()=>z.DeiTFeatureExtractor,DeiTForImageClassification:()=>r.DeiTForImageClassification,DeiTImageProcessor:()=>z.DeiTImageProcessor,DeiTModel:()=>r.DeiTModel,DeiTPreTrainedModel:()=>r.DeiTPreTrainedModel,DepthAnythingForDepthEstimation:()=>r.DepthAnythingForDepthEstimation,DepthAnythingPreTrainedModel:()=>r.DepthAnythingPreTrainedModel,DepthEstimationPipeline:()=>F.DepthEstimationPipeline,DepthProForDepthEstimation:()=>r.DepthProForDepthEstimation,DepthProPreTrainedModel:()=>r.DepthProPreTrainedModel,DetrFeatureExtractor:()=>z.DetrFeatureExtractor,DetrForObjectDetection:()=>r.DetrForObjectDetection,DetrForSegmentation:()=>r.DetrForSegmentation,DetrImageProcessor:()=>z.DetrImageProcessor,DetrModel:()=>r.DetrModel,DetrObjectDetectionOutput:()=>r.DetrObjectDetectionOutput,DetrPreTrainedModel:()=>r.DetrPreTrainedModel,DetrSegmentationOutput:()=>r.DetrSegmentationOutput,Dinov2ForImageClassification:()=>r.Dinov2ForImageClassification,Dinov2Model:()=>r.Dinov2Model,Dinov2PreTrainedModel:()=>r.Dinov2PreTrainedModel,Dinov2WithRegistersForImageClassification:()=>r.Dinov2WithRegistersForImageClassification,Dinov2WithRegistersModel:()=>r.Dinov2WithRegistersModel,Dinov2WithRegistersPreTrainedModel:()=>r.Dinov2WithRegistersPreTrainedModel,DistilBertForMaskedLM:()=>r.DistilBertForMaskedLM,DistilBertForQuestionAnswering:()=>r.DistilBertForQuestionAnswering,DistilBertForSequenceClassification:()=>r.DistilBertForSequenceClassification,DistilBertForTokenClassification:()=>r.DistilBertForTokenClassification,DistilBertModel:()=>r.DistilBertModel,DistilBertPreTrainedModel:()=>r.DistilBertPreTrainedModel,DistilBertTokenizer:()=>w.DistilBertTokenizer,DocumentQuestionAnsweringPipeline:()=>F.DocumentQuestionAnsweringPipeline,DonutFeatureExtractor:()=>z.DonutFeatureExtractor,DonutImageProcessor:()=>z.DonutImageProcessor,DonutSwinModel:()=>r.DonutSwinModel,DonutSwinPreTrainedModel:()=>r.DonutSwinPreTrainedModel,EfficientNetForImageClassification:()=>r.EfficientNetForImageClassification,EfficientNetImageProcessor:()=>z.EfficientNetImageProcessor,EfficientNetModel:()=>r.EfficientNetModel,EfficientNetPreTrainedModel:()=>r.EfficientNetPreTrainedModel,ElectraForMaskedLM:()=>r.ElectraForMaskedLM,ElectraForQuestionAnswering:()=>r.ElectraForQuestionAnswering,ElectraForSequenceClassification:()=>r.ElectraForSequenceClassification,ElectraForTokenClassification:()=>r.ElectraForTokenClassification,ElectraModel:()=>r.ElectraModel,ElectraPreTrainedModel:()=>r.ElectraPreTrainedModel,ElectraTokenizer:()=>w.ElectraTokenizer,EosTokenCriteria:()=>X.EosTokenCriteria,EsmForMaskedLM:()=>r.EsmForMaskedLM,EsmForSequenceClassification:()=>r.EsmForSequenceClassification,EsmForTokenClassification:()=>r.EsmForTokenClassification,EsmModel:()=>r.EsmModel,EsmPreTrainedModel:()=>r.EsmPreTrainedModel,EsmTokenizer:()=>w.EsmTokenizer,ExaoneForCausalLM:()=>r.ExaoneForCausalLM,ExaoneModel:()=>r.ExaoneModel,ExaonePreTrainedModel:()=>r.ExaonePreTrainedModel,FFT:()=>y.FFT,FalconForCausalLM:()=>r.FalconForCausalLM,FalconModel:()=>r.FalconModel,FalconPreTrainedModel:()=>r.FalconPreTrainedModel,FalconTokenizer:()=>w.FalconTokenizer,FastViTForImageClassification:()=>r.FastViTForImageClassification,FastViTModel:()=>r.FastViTModel,FastViTPreTrainedModel:()=>r.FastViTPreTrainedModel,FeatureExtractionPipeline:()=>F.FeatureExtractionPipeline,FeatureExtractor:()=>P.FeatureExtractor,FillMaskPipeline:()=>F.FillMaskPipeline,Florence2ForConditionalGeneration:()=>r.Florence2ForConditionalGeneration,Florence2PreTrainedModel:()=>r.Florence2PreTrainedModel,Florence2Processor:()=>ae.Florence2Processor,ForcedBOSTokenLogitsProcessor:()=>I.ForcedBOSTokenLogitsProcessor,ForcedEOSTokenLogitsProcessor:()=>I.ForcedEOSTokenLogitsProcessor,GLPNFeatureExtractor:()=>z.GLPNFeatureExtractor,GLPNForDepthEstimation:()=>r.GLPNForDepthEstimation,GLPNModel:()=>r.GLPNModel,GLPNPreTrainedModel:()=>r.GLPNPreTrainedModel,GPT2LMHeadModel:()=>r.GPT2LMHeadModel,GPT2Model:()=>r.GPT2Model,GPT2PreTrainedModel:()=>r.GPT2PreTrainedModel,GPT2Tokenizer:()=>w.GPT2Tokenizer,GPTBigCodeForCausalLM:()=>r.GPTBigCodeForCausalLM,GPTBigCodeModel:()=>r.GPTBigCodeModel,GPTBigCodePreTrainedModel:()=>r.GPTBigCodePreTrainedModel,GPTJForCausalLM:()=>r.GPTJForCausalLM,GPTJModel:()=>r.GPTJModel,GPTJPreTrainedModel:()=>r.GPTJPreTrainedModel,GPTNeoForCausalLM:()=>r.GPTNeoForCausalLM,GPTNeoModel:()=>r.GPTNeoModel,GPTNeoPreTrainedModel:()=>r.GPTNeoPreTrainedModel,GPTNeoXForCausalLM:()=>r.GPTNeoXForCausalLM,GPTNeoXModel:()=>r.GPTNeoXModel,GPTNeoXPreTrainedModel:()=>r.GPTNeoXPreTrainedModel,GPTNeoXTokenizer:()=>w.GPTNeoXTokenizer,Gemma2ForCausalLM:()=>r.Gemma2ForCausalLM,Gemma2Model:()=>r.Gemma2Model,Gemma2PreTrainedModel:()=>r.Gemma2PreTrainedModel,GemmaForCausalLM:()=>r.GemmaForCausalLM,GemmaModel:()=>r.GemmaModel,GemmaPreTrainedModel:()=>r.GemmaPreTrainedModel,GemmaTokenizer:()=>w.GemmaTokenizer,GraniteForCausalLM:()=>r.GraniteForCausalLM,GraniteModel:()=>r.GraniteModel,GranitePreTrainedModel:()=>r.GranitePreTrainedModel,Grok1Tokenizer:()=>w.Grok1Tokenizer,GroupViTModel:()=>r.GroupViTModel,GroupViTPreTrainedModel:()=>r.GroupViTPreTrainedModel,HerbertTokenizer:()=>w.HerbertTokenizer,HieraForImageClassification:()=>r.HieraForImageClassification,HieraModel:()=>r.HieraModel,HieraPreTrainedModel:()=>r.HieraPreTrainedModel,HubertForCTC:()=>r.HubertForCTC,HubertForSequenceClassification:()=>r.HubertForSequenceClassification,HubertModel:()=>r.HubertModel,HubertPreTrainedModel:()=>r.HubertPreTrainedModel,IJepaForImageClassification:()=>r.IJepaForImageClassification,IJepaModel:()=>r.IJepaModel,IJepaPreTrainedModel:()=>r.IJepaPreTrainedModel,Idefics3ForConditionalGeneration:()=>r.Idefics3ForConditionalGeneration,Idefics3ImageProcessor:()=>z.Idefics3ImageProcessor,Idefics3PreTrainedModel:()=>r.Idefics3PreTrainedModel,Idefics3Processor:()=>ae.Idefics3Processor,ImageClassificationPipeline:()=>F.ImageClassificationPipeline,ImageFeatureExtractionPipeline:()=>F.ImageFeatureExtractionPipeline,ImageFeatureExtractor:()=>v.ImageFeatureExtractor,ImageMattingOutput:()=>r.ImageMattingOutput,ImageProcessor:()=>b.ImageProcessor,ImageSegmentationPipeline:()=>F.ImageSegmentationPipeline,ImageToImagePipeline:()=>F.ImageToImagePipeline,ImageToTextPipeline:()=>F.ImageToTextPipeline,InterruptableStoppingCriteria:()=>X.InterruptableStoppingCriteria,JAISLMHeadModel:()=>r.JAISLMHeadModel,JAISModel:()=>r.JAISModel,JAISPreTrainedModel:()=>r.JAISPreTrainedModel,JinaCLIPImageProcessor:()=>z.JinaCLIPImageProcessor,JinaCLIPModel:()=>r.JinaCLIPModel,JinaCLIPPreTrainedModel:()=>r.JinaCLIPPreTrainedModel,JinaCLIPProcessor:()=>ae.JinaCLIPProcessor,JinaCLIPTextModel:()=>r.JinaCLIPTextModel,JinaCLIPVisionModel:()=>r.JinaCLIPVisionModel,LlamaForCausalLM:()=>r.LlamaForCausalLM,LlamaModel:()=>r.LlamaModel,LlamaPreTrainedModel:()=>r.LlamaPreTrainedModel,LlamaTokenizer:()=>w.LlamaTokenizer,LlavaForConditionalGeneration:()=>r.LlavaForConditionalGeneration,LlavaOnevisionForConditionalGeneration:()=>r.LlavaOnevisionForConditionalGeneration,LlavaOnevisionImageProcessor:()=>z.LlavaOnevisionImageProcessor,LlavaPreTrainedModel:()=>r.LlavaPreTrainedModel,LogitsProcessor:()=>I.LogitsProcessor,LogitsProcessorList:()=>I.LogitsProcessorList,LogitsWarper:()=>I.LogitsWarper,LongT5ForConditionalGeneration:()=>r.LongT5ForConditionalGeneration,LongT5Model:()=>r.LongT5Model,LongT5PreTrainedModel:()=>r.LongT5PreTrainedModel,M2M100ForConditionalGeneration:()=>r.M2M100ForConditionalGeneration,M2M100Model:()=>r.M2M100Model,M2M100PreTrainedModel:()=>r.M2M100PreTrainedModel,M2M100Tokenizer:()=>w.M2M100Tokenizer,MBart50Tokenizer:()=>w.MBart50Tokenizer,MBartForCausalLM:()=>r.MBartForCausalLM,MBartForConditionalGeneration:()=>r.MBartForConditionalGeneration,MBartForSequenceClassification:()=>r.MBartForSequenceClassification,MBartModel:()=>r.MBartModel,MBartPreTrainedModel:()=>r.MBartPreTrainedModel,MBartTokenizer:()=>w.MBartTokenizer,MPNetForMaskedLM:()=>r.MPNetForMaskedLM,MPNetForQuestionAnswering:()=>r.MPNetForQuestionAnswering,MPNetForSequenceClassification:()=>r.MPNetForSequenceClassification,MPNetForTokenClassification:()=>r.MPNetForTokenClassification,MPNetModel:()=>r.MPNetModel,MPNetPreTrainedModel:()=>r.MPNetPreTrainedModel,MPNetTokenizer:()=>w.MPNetTokenizer,MT5ForConditionalGeneration:()=>r.MT5ForConditionalGeneration,MT5Model:()=>r.MT5Model,MT5PreTrainedModel:()=>r.MT5PreTrainedModel,MarianMTModel:()=>r.MarianMTModel,MarianModel:()=>r.MarianModel,MarianPreTrainedModel:()=>r.MarianPreTrainedModel,MarianTokenizer:()=>w.MarianTokenizer,Mask2FormerImageProcessor:()=>z.Mask2FormerImageProcessor,MaskFormerFeatureExtractor:()=>z.MaskFormerFeatureExtractor,MaskFormerForInstanceSegmentation:()=>r.MaskFormerForInstanceSegmentation,MaskFormerImageProcessor:()=>z.MaskFormerImageProcessor,MaskFormerModel:()=>r.MaskFormerModel,MaskFormerPreTrainedModel:()=>r.MaskFormerPreTrainedModel,MaskedLMOutput:()=>r.MaskedLMOutput,MaxLengthCriteria:()=>X.MaxLengthCriteria,MgpstrForSceneTextRecognition:()=>r.MgpstrForSceneTextRecognition,MgpstrModelOutput:()=>r.MgpstrModelOutput,MgpstrPreTrainedModel:()=>r.MgpstrPreTrainedModel,MgpstrProcessor:()=>ae.MgpstrProcessor,MgpstrTokenizer:()=>w.MgpstrTokenizer,MinLengthLogitsProcessor:()=>I.MinLengthLogitsProcessor,MinNewTokensLengthLogitsProcessor:()=>I.MinNewTokensLengthLogitsProcessor,MistralForCausalLM:()=>r.MistralForCausalLM,MistralModel:()=>r.MistralModel,MistralPreTrainedModel:()=>r.MistralPreTrainedModel,MobileBertForMaskedLM:()=>r.MobileBertForMaskedLM,MobileBertForQuestionAnswering:()=>r.MobileBertForQuestionAnswering,MobileBertForSequenceClassification:()=>r.MobileBertForSequenceClassification,MobileBertModel:()=>r.MobileBertModel,MobileBertPreTrainedModel:()=>r.MobileBertPreTrainedModel,MobileBertTokenizer:()=>w.MobileBertTokenizer,MobileLLMForCausalLM:()=>r.MobileLLMForCausalLM,MobileLLMModel:()=>r.MobileLLMModel,MobileLLMPreTrainedModel:()=>r.MobileLLMPreTrainedModel,MobileNetV1FeatureExtractor:()=>z.MobileNetV1FeatureExtractor,MobileNetV1ForImageClassification:()=>r.MobileNetV1ForImageClassification,MobileNetV1ImageProcessor:()=>z.MobileNetV1ImageProcessor,MobileNetV1Model:()=>r.MobileNetV1Model,MobileNetV1PreTrainedModel:()=>r.MobileNetV1PreTrainedModel,MobileNetV2FeatureExtractor:()=>z.MobileNetV2FeatureExtractor,MobileNetV2ForImageClassification:()=>r.MobileNetV2ForImageClassification,MobileNetV2ImageProcessor:()=>z.MobileNetV2ImageProcessor,MobileNetV2Model:()=>r.MobileNetV2Model,MobileNetV2PreTrainedModel:()=>r.MobileNetV2PreTrainedModel,MobileNetV3FeatureExtractor:()=>z.MobileNetV3FeatureExtractor,MobileNetV3ForImageClassification:()=>r.MobileNetV3ForImageClassification,MobileNetV3ImageProcessor:()=>z.MobileNetV3ImageProcessor,MobileNetV3Model:()=>r.MobileNetV3Model,MobileNetV3PreTrainedModel:()=>r.MobileNetV3PreTrainedModel,MobileNetV4FeatureExtractor:()=>z.MobileNetV4FeatureExtractor,MobileNetV4ForImageClassification:()=>r.MobileNetV4ForImageClassification,MobileNetV4ImageProcessor:()=>z.MobileNetV4ImageProcessor,MobileNetV4Model:()=>r.MobileNetV4Model,MobileNetV4PreTrainedModel:()=>r.MobileNetV4PreTrainedModel,MobileViTFeatureExtractor:()=>z.MobileViTFeatureExtractor,MobileViTForImageClassification:()=>r.MobileViTForImageClassification,MobileViTImageProcessor:()=>z.MobileViTImageProcessor,MobileViTModel:()=>r.MobileViTModel,MobileViTPreTrainedModel:()=>r.MobileViTPreTrainedModel,MobileViTV2ForImageClassification:()=>r.MobileViTV2ForImageClassification,MobileViTV2Model:()=>r.MobileViTV2Model,MobileViTV2PreTrainedModel:()=>r.MobileViTV2PreTrainedModel,ModelOutput:()=>r.ModelOutput,ModernBertForMaskedLM:()=>r.ModernBertForMaskedLM,ModernBertForSequenceClassification:()=>r.ModernBertForSequenceClassification,ModernBertForTokenClassification:()=>r.ModernBertForTokenClassification,ModernBertModel:()=>r.ModernBertModel,ModernBertPreTrainedModel:()=>r.ModernBertPreTrainedModel,Moondream1ForConditionalGeneration:()=>r.Moondream1ForConditionalGeneration,MoonshineFeatureExtractor:()=>v.MoonshineFeatureExtractor,MoonshineForConditionalGeneration:()=>r.MoonshineForConditionalGeneration,MoonshineModel:()=>r.MoonshineModel,MoonshinePreTrainedModel:()=>r.MoonshinePreTrainedModel,MoonshineProcessor:()=>ae.MoonshineProcessor,MptForCausalLM:()=>r.MptForCausalLM,MptModel:()=>r.MptModel,MptPreTrainedModel:()=>r.MptPreTrainedModel,MultiModalityCausalLM:()=>r.MultiModalityCausalLM,MultiModalityPreTrainedModel:()=>r.MultiModalityPreTrainedModel,MusicgenForCausalLM:()=>r.MusicgenForCausalLM,MusicgenForConditionalGeneration:()=>r.MusicgenForConditionalGeneration,MusicgenModel:()=>r.MusicgenModel,MusicgenPreTrainedModel:()=>r.MusicgenPreTrainedModel,NllbTokenizer:()=>w.NllbTokenizer,NoBadWordsLogitsProcessor:()=>I.NoBadWordsLogitsProcessor,NoRepeatNGramLogitsProcessor:()=>I.NoRepeatNGramLogitsProcessor,NomicBertModel:()=>r.NomicBertModel,NomicBertPreTrainedModel:()=>r.NomicBertPreTrainedModel,NougatImageProcessor:()=>z.NougatImageProcessor,NougatTokenizer:()=>w.NougatTokenizer,OPTForCausalLM:()=>r.OPTForCausalLM,OPTModel:()=>r.OPTModel,OPTPreTrainedModel:()=>r.OPTPreTrainedModel,ObjectDetectionPipeline:()=>F.ObjectDetectionPipeline,Olmo2ForCausalLM:()=>r.Olmo2ForCausalLM,Olmo2Model:()=>r.Olmo2Model,Olmo2PreTrainedModel:()=>r.Olmo2PreTrainedModel,OlmoForCausalLM:()=>r.OlmoForCausalLM,OlmoModel:()=>r.OlmoModel,OlmoPreTrainedModel:()=>r.OlmoPreTrainedModel,OpenELMForCausalLM:()=>r.OpenELMForCausalLM,OpenELMModel:()=>r.OpenELMModel,OpenELMPreTrainedModel:()=>r.OpenELMPreTrainedModel,OwlViTFeatureExtractor:()=>z.OwlViTFeatureExtractor,OwlViTForObjectDetection:()=>r.OwlViTForObjectDetection,OwlViTImageProcessor:()=>z.OwlViTImageProcessor,OwlViTModel:()=>r.OwlViTModel,OwlViTPreTrainedModel:()=>r.OwlViTPreTrainedModel,OwlViTProcessor:()=>ae.OwlViTProcessor,Owlv2ForObjectDetection:()=>r.Owlv2ForObjectDetection,Owlv2ImageProcessor:()=>z.Owlv2ImageProcessor,Owlv2Model:()=>r.Owlv2Model,Owlv2PreTrainedModel:()=>r.Owlv2PreTrainedModel,PaliGemmaForConditionalGeneration:()=>r.PaliGemmaForConditionalGeneration,PaliGemmaPreTrainedModel:()=>r.PaliGemmaPreTrainedModel,PaliGemmaProcessor:()=>ae.PaliGemmaProcessor,PatchTSMixerForPrediction:()=>r.PatchTSMixerForPrediction,PatchTSMixerModel:()=>r.PatchTSMixerModel,PatchTSMixerPreTrainedModel:()=>r.PatchTSMixerPreTrainedModel,PatchTSTForPrediction:()=>r.PatchTSTForPrediction,PatchTSTModel:()=>r.PatchTSTModel,PatchTSTPreTrainedModel:()=>r.PatchTSTPreTrainedModel,Phi3ForCausalLM:()=>r.Phi3ForCausalLM,Phi3Model:()=>r.Phi3Model,Phi3PreTrainedModel:()=>r.Phi3PreTrainedModel,Phi3VForCausalLM:()=>r.Phi3VForCausalLM,Phi3VImageProcessor:()=>z.Phi3VImageProcessor,Phi3VPreTrainedModel:()=>r.Phi3VPreTrainedModel,Phi3VProcessor:()=>ae.Phi3VProcessor,PhiForCausalLM:()=>r.PhiForCausalLM,PhiModel:()=>r.PhiModel,PhiPreTrainedModel:()=>r.PhiPreTrainedModel,Pipeline:()=>F.Pipeline,PreTrainedModel:()=>r.PreTrainedModel,PreTrainedTokenizer:()=>w.PreTrainedTokenizer,PretrainedConfig:()=>D.PretrainedConfig,PretrainedMixin:()=>r.PretrainedMixin,Processor:()=>re.Processor,PvtForImageClassification:()=>r.PvtForImageClassification,PvtImageProcessor:()=>z.PvtImageProcessor,PvtModel:()=>r.PvtModel,PvtPreTrainedModel:()=>r.PvtPreTrainedModel,PyAnnoteFeatureExtractor:()=>v.PyAnnoteFeatureExtractor,PyAnnoteForAudioFrameClassification:()=>r.PyAnnoteForAudioFrameClassification,PyAnnoteModel:()=>r.PyAnnoteModel,PyAnnotePreTrainedModel:()=>r.PyAnnotePreTrainedModel,PyAnnoteProcessor:()=>ae.PyAnnoteProcessor,QuestionAnsweringModelOutput:()=>r.QuestionAnsweringModelOutput,QuestionAnsweringPipeline:()=>F.QuestionAnsweringPipeline,Qwen2ForCausalLM:()=>r.Qwen2ForCausalLM,Qwen2Model:()=>r.Qwen2Model,Qwen2PreTrainedModel:()=>r.Qwen2PreTrainedModel,Qwen2Tokenizer:()=>w.Qwen2Tokenizer,Qwen2VLForConditionalGeneration:()=>r.Qwen2VLForConditionalGeneration,Qwen2VLImageProcessor:()=>z.Qwen2VLImageProcessor,Qwen2VLPreTrainedModel:()=>r.Qwen2VLPreTrainedModel,Qwen2VLProcessor:()=>ae.Qwen2VLProcessor,RTDetrForObjectDetection:()=>r.RTDetrForObjectDetection,RTDetrImageProcessor:()=>z.RTDetrImageProcessor,RTDetrModel:()=>r.RTDetrModel,RTDetrObjectDetectionOutput:()=>r.RTDetrObjectDetectionOutput,RTDetrPreTrainedModel:()=>r.RTDetrPreTrainedModel,RawImage:()=>te.RawImage,RepetitionPenaltyLogitsProcessor:()=>I.RepetitionPenaltyLogitsProcessor,ResNetForImageClassification:()=>r.ResNetForImageClassification,ResNetModel:()=>r.ResNetModel,ResNetPreTrainedModel:()=>r.ResNetPreTrainedModel,RoFormerForMaskedLM:()=>r.RoFormerForMaskedLM,RoFormerForQuestionAnswering:()=>r.RoFormerForQuestionAnswering,RoFormerForSequenceClassification:()=>r.RoFormerForSequenceClassification,RoFormerForTokenClassification:()=>r.RoFormerForTokenClassification,RoFormerModel:()=>r.RoFormerModel,RoFormerPreTrainedModel:()=>r.RoFormerPreTrainedModel,RoFormerTokenizer:()=>w.RoFormerTokenizer,RobertaForMaskedLM:()=>r.RobertaForMaskedLM,RobertaForQuestionAnswering:()=>r.RobertaForQuestionAnswering,RobertaForSequenceClassification:()=>r.RobertaForSequenceClassification,RobertaForTokenClassification:()=>r.RobertaForTokenClassification,RobertaModel:()=>r.RobertaModel,RobertaPreTrainedModel:()=>r.RobertaPreTrainedModel,RobertaTokenizer:()=>w.RobertaTokenizer,SamImageProcessor:()=>z.SamImageProcessor,SamImageSegmentationOutput:()=>r.SamImageSegmentationOutput,SamModel:()=>r.SamModel,SamPreTrainedModel:()=>r.SamPreTrainedModel,SamProcessor:()=>ae.SamProcessor,SapiensForDepthEstimation:()=>r.SapiensForDepthEstimation,SapiensForNormalEstimation:()=>r.SapiensForNormalEstimation,SapiensForSemanticSegmentation:()=>r.SapiensForSemanticSegmentation,SapiensPreTrainedModel:()=>r.SapiensPreTrainedModel,SeamlessM4TFeatureExtractor:()=>v.SeamlessM4TFeatureExtractor,SegformerFeatureExtractor:()=>z.SegformerFeatureExtractor,SegformerForImageClassification:()=>r.SegformerForImageClassification,SegformerForSemanticSegmentation:()=>r.SegformerForSemanticSegmentation,SegformerImageProcessor:()=>z.SegformerImageProcessor,SegformerModel:()=>r.SegformerModel,SegformerPreTrainedModel:()=>r.SegformerPreTrainedModel,Seq2SeqLMOutput:()=>r.Seq2SeqLMOutput,SequenceClassifierOutput:()=>r.SequenceClassifierOutput,SiglipImageProcessor:()=>z.SiglipImageProcessor,SiglipModel:()=>r.SiglipModel,SiglipPreTrainedModel:()=>r.SiglipPreTrainedModel,SiglipTextModel:()=>r.SiglipTextModel,SiglipTokenizer:()=>w.SiglipTokenizer,SiglipVisionModel:()=>r.SiglipVisionModel,SpeechT5FeatureExtractor:()=>v.SpeechT5FeatureExtractor,SpeechT5ForSpeechToText:()=>r.SpeechT5ForSpeechToText,SpeechT5ForTextToSpeech:()=>r.SpeechT5ForTextToSpeech,SpeechT5HifiGan:()=>r.SpeechT5HifiGan,SpeechT5Model:()=>r.SpeechT5Model,SpeechT5PreTrainedModel:()=>r.SpeechT5PreTrainedModel,SpeechT5Processor:()=>ae.SpeechT5Processor,SpeechT5Tokenizer:()=>w.SpeechT5Tokenizer,SqueezeBertForMaskedLM:()=>r.SqueezeBertForMaskedLM,SqueezeBertForQuestionAnswering:()=>r.SqueezeBertForQuestionAnswering,SqueezeBertForSequenceClassification:()=>r.SqueezeBertForSequenceClassification,SqueezeBertModel:()=>r.SqueezeBertModel,SqueezeBertPreTrainedModel:()=>r.SqueezeBertPreTrainedModel,SqueezeBertTokenizer:()=>w.SqueezeBertTokenizer,StableLmForCausalLM:()=>r.StableLmForCausalLM,StableLmModel:()=>r.StableLmModel,StableLmPreTrainedModel:()=>r.StableLmPreTrainedModel,Starcoder2ForCausalLM:()=>r.Starcoder2ForCausalLM,Starcoder2Model:()=>r.Starcoder2Model,Starcoder2PreTrainedModel:()=>r.Starcoder2PreTrainedModel,StoppingCriteria:()=>X.StoppingCriteria,StoppingCriteriaList:()=>X.StoppingCriteriaList,SummarizationPipeline:()=>F.SummarizationPipeline,SuppressTokensAtBeginLogitsProcessor:()=>I.SuppressTokensAtBeginLogitsProcessor,Swin2SRForImageSuperResolution:()=>r.Swin2SRForImageSuperResolution,Swin2SRImageProcessor:()=>z.Swin2SRImageProcessor,Swin2SRModel:()=>r.Swin2SRModel,Swin2SRPreTrainedModel:()=>r.Swin2SRPreTrainedModel,SwinForImageClassification:()=>r.SwinForImageClassification,SwinModel:()=>r.SwinModel,SwinPreTrainedModel:()=>r.SwinPreTrainedModel,T5ForConditionalGeneration:()=>r.T5ForConditionalGeneration,T5Model:()=>r.T5Model,T5PreTrainedModel:()=>r.T5PreTrainedModel,T5Tokenizer:()=>w.T5Tokenizer,TableTransformerForObjectDetection:()=>r.TableTransformerForObjectDetection,TableTransformerModel:()=>r.TableTransformerModel,TableTransformerObjectDetectionOutput:()=>r.TableTransformerObjectDetectionOutput,TableTransformerPreTrainedModel:()=>r.TableTransformerPreTrainedModel,TemperatureLogitsWarper:()=>I.TemperatureLogitsWarper,Tensor:()=>j.Tensor,Text2TextGenerationPipeline:()=>F.Text2TextGenerationPipeline,TextClassificationPipeline:()=>F.TextClassificationPipeline,TextGenerationPipeline:()=>F.TextGenerationPipeline,TextStreamer:()=>G.TextStreamer,TextToAudioPipeline:()=>F.TextToAudioPipeline,TokenClassificationPipeline:()=>F.TokenClassificationPipeline,TokenClassifierOutput:()=>r.TokenClassifierOutput,TokenizerModel:()=>w.TokenizerModel,TopKLogitsWarper:()=>I.TopKLogitsWarper,TopPLogitsWarper:()=>I.TopPLogitsWarper,TrOCRForCausalLM:()=>r.TrOCRForCausalLM,TrOCRPreTrainedModel:()=>r.TrOCRPreTrainedModel,TranslationPipeline:()=>F.TranslationPipeline,UniSpeechForCTC:()=>r.UniSpeechForCTC,UniSpeechForSequenceClassification:()=>r.UniSpeechForSequenceClassification,UniSpeechModel:()=>r.UniSpeechModel,UniSpeechPreTrainedModel:()=>r.UniSpeechPreTrainedModel,UniSpeechSatForAudioFrameClassification:()=>r.UniSpeechSatForAudioFrameClassification,UniSpeechSatForCTC:()=>r.UniSpeechSatForCTC,UniSpeechSatForSequenceClassification:()=>r.UniSpeechSatForSequenceClassification,UniSpeechSatModel:()=>r.UniSpeechSatModel,UniSpeechSatPreTrainedModel:()=>r.UniSpeechSatPreTrainedModel,VLChatProcessor:()=>ae.VLChatProcessor,VLMImageProcessor:()=>z.VLMImageProcessor,ViTFeatureExtractor:()=>z.ViTFeatureExtractor,ViTForImageClassification:()=>r.ViTForImageClassification,ViTImageProcessor:()=>z.ViTImageProcessor,ViTMAEModel:()=>r.ViTMAEModel,ViTMAEPreTrainedModel:()=>r.ViTMAEPreTrainedModel,ViTMSNForImageClassification:()=>r.ViTMSNForImageClassification,ViTMSNModel:()=>r.ViTMSNModel,ViTMSNPreTrainedModel:()=>r.ViTMSNPreTrainedModel,ViTModel:()=>r.ViTModel,ViTPreTrainedModel:()=>r.ViTPreTrainedModel,VisionEncoderDecoderModel:()=>r.VisionEncoderDecoderModel,VitMatteForImageMatting:()=>r.VitMatteForImageMatting,VitMatteImageProcessor:()=>z.VitMatteImageProcessor,VitMattePreTrainedModel:()=>r.VitMattePreTrainedModel,VitPoseForPoseEstimation:()=>r.VitPoseForPoseEstimation,VitPoseImageProcessor:()=>z.VitPoseImageProcessor,VitPosePreTrainedModel:()=>r.VitPosePreTrainedModel,VitsModel:()=>r.VitsModel,VitsModelOutput:()=>r.VitsModelOutput,VitsPreTrainedModel:()=>r.VitsPreTrainedModel,VitsTokenizer:()=>w.VitsTokenizer,Wav2Vec2BertForCTC:()=>r.Wav2Vec2BertForCTC,Wav2Vec2BertForSequenceClassification:()=>r.Wav2Vec2BertForSequenceClassification,Wav2Vec2BertModel:()=>r.Wav2Vec2BertModel,Wav2Vec2BertPreTrainedModel:()=>r.Wav2Vec2BertPreTrainedModel,Wav2Vec2CTCTokenizer:()=>w.Wav2Vec2CTCTokenizer,Wav2Vec2FeatureExtractor:()=>v.Wav2Vec2FeatureExtractor,Wav2Vec2ForAudioFrameClassification:()=>r.Wav2Vec2ForAudioFrameClassification,Wav2Vec2ForCTC:()=>r.Wav2Vec2ForCTC,Wav2Vec2ForSequenceClassification:()=>r.Wav2Vec2ForSequenceClassification,Wav2Vec2Model:()=>r.Wav2Vec2Model,Wav2Vec2PreTrainedModel:()=>r.Wav2Vec2PreTrainedModel,Wav2Vec2ProcessorWithLM:()=>ae.Wav2Vec2ProcessorWithLM,WavLMForAudioFrameClassification:()=>r.WavLMForAudioFrameClassification,WavLMForCTC:()=>r.WavLMForCTC,WavLMForSequenceClassification:()=>r.WavLMForSequenceClassification,WavLMForXVector:()=>r.WavLMForXVector,WavLMModel:()=>r.WavLMModel,WavLMPreTrainedModel:()=>r.WavLMPreTrainedModel,WeSpeakerFeatureExtractor:()=>v.WeSpeakerFeatureExtractor,WeSpeakerResNetModel:()=>r.WeSpeakerResNetModel,WeSpeakerResNetPreTrainedModel:()=>r.WeSpeakerResNetPreTrainedModel,WhisperFeatureExtractor:()=>v.WhisperFeatureExtractor,WhisperForConditionalGeneration:()=>r.WhisperForConditionalGeneration,WhisperModel:()=>r.WhisperModel,WhisperPreTrainedModel:()=>r.WhisperPreTrainedModel,WhisperProcessor:()=>ae.WhisperProcessor,WhisperTextStreamer:()=>G.WhisperTextStreamer,WhisperTimeStampLogitsProcessor:()=>I.WhisperTimeStampLogitsProcessor,WhisperTokenizer:()=>w.WhisperTokenizer,XLMForQuestionAnswering:()=>r.XLMForQuestionAnswering,XLMForSequenceClassification:()=>r.XLMForSequenceClassification,XLMForTokenClassification:()=>r.XLMForTokenClassification,XLMModel:()=>r.XLMModel,XLMPreTrainedModel:()=>r.XLMPreTrainedModel,XLMRobertaForMaskedLM:()=>r.XLMRobertaForMaskedLM,XLMRobertaForQuestionAnswering:()=>r.XLMRobertaForQuestionAnswering,XLMRobertaForSequenceClassification:()=>r.XLMRobertaForSequenceClassification,XLMRobertaForTokenClassification:()=>r.XLMRobertaForTokenClassification,XLMRobertaModel:()=>r.XLMRobertaModel,XLMRobertaPreTrainedModel:()=>r.XLMRobertaPreTrainedModel,XLMRobertaTokenizer:()=>w.XLMRobertaTokenizer,XLMTokenizer:()=>w.XLMTokenizer,XLMWithLMHeadModel:()=>r.XLMWithLMHeadModel,XVectorOutput:()=>r.XVectorOutput,YolosFeatureExtractor:()=>z.YolosFeatureExtractor,YolosForObjectDetection:()=>r.YolosForObjectDetection,YolosImageProcessor:()=>z.YolosImageProcessor,YolosModel:()=>r.YolosModel,YolosObjectDetectionOutput:()=>r.YolosObjectDetectionOutput,YolosPreTrainedModel:()=>r.YolosPreTrainedModel,ZeroShotAudioClassificationPipeline:()=>F.ZeroShotAudioClassificationPipeline,ZeroShotClassificationPipeline:()=>F.ZeroShotClassificationPipeline,ZeroShotImageClassificationPipeline:()=>F.ZeroShotImageClassificationPipeline,ZeroShotObjectDetectionPipeline:()=>F.ZeroShotObjectDetectionPipeline,bankers_round:()=>y.bankers_round,cat:()=>j.cat,cos_sim:()=>y.cos_sim,dot:()=>y.dot,dynamic_time_warping:()=>y.dynamic_time_warping,env:()=>Ae.env,full:()=>j.full,full_like:()=>j.full_like,getKeyValueShapes:()=>D.getKeyValueShapes,hamming:()=>W.hamming,hanning:()=>W.hanning,interpolate:()=>j.interpolate,interpolate_4d:()=>j.interpolate_4d,interpolate_data:()=>y.interpolate_data,is_chinese_char:()=>w.is_chinese_char,layer_norm:()=>j.layer_norm,load_image:()=>te.load_image,log_softmax:()=>y.log_softmax,magnitude:()=>y.magnitude,matmul:()=>j.matmul,max:()=>y.max,mean:()=>j.mean,mean_pooling:()=>j.mean_pooling,medianFilter:()=>y.medianFilter,mel_filter_bank:()=>W.mel_filter_bank,min:()=>y.min,ones:()=>j.ones,ones_like:()=>j.ones_like,permute:()=>j.permute,permute_data:()=>y.permute_data,pipeline:()=>F.pipeline,quantize_embeddings:()=>j.quantize_embeddings,rand:()=>j.rand,read_audio:()=>W.read_audio,rfft:()=>j.rfft,round:()=>y.round,slice:()=>j.slice,softmax:()=>y.softmax,spectrogram:()=>W.spectrogram,stack:()=>j.stack,std_mean:()=>j.std_mean,topk:()=>j.topk,window_function:()=>W.window_function,zeros:()=>j.zeros,zeros_like:()=>j.zeros_like});var Ae=us("./src/env.js"),F=us("./src/pipelines.js"),r=us("./src/models.js"),w=us("./src/tokenizers.js"),D=us("./src/configs.js"),W=us("./src/utils/audio.js"),te=us("./src/utils/image.js"),j=us("./src/utils/tensor.js"),y=us("./src/utils/maths.js"),P=us("./src/base/feature_extraction_utils.js"),v=us("./src/models/feature_extractors.js"),T=us("./src/models/auto/feature_extraction_auto.js"),b=us("./src/base/image_processors_utils.js"),z=us("./src/models/image_processors.js"),K=us("./src/models/auto/image_processing_auto.js"),re=us("./src/base/processing_utils.js"),ae=us("./src/models/processors.js"),B=us("./src/models/auto/processing_auto.js"),G=us("./src/generation/streamers.js"),X=us("./src/generation/stopping_criteria.js"),I=us("./src/generation/logits_process.js")})();d.ASTFeatureExtractor;d.ASTForAudioClassification;d.ASTModel;d.ASTPreTrainedModel;d.AlbertForMaskedLM;d.AlbertForQuestionAnswering;d.AlbertForSequenceClassification;d.AlbertModel;d.AlbertPreTrainedModel;d.AlbertTokenizer;d.AudioClassificationPipeline;d.AutoConfig;d.AutoFeatureExtractor;d.AutoImageProcessor;d.AutoModel;d.AutoModelForAudioClassification;d.AutoModelForAudioFrameClassification;d.AutoModelForCTC;d.AutoModelForCausalLM;d.AutoModelForDepthEstimation;d.AutoModelForDocumentQuestionAnswering;var vf=d.AutoModelForImageClassification;d.AutoModelForImageFeatureExtraction;d.AutoModelForImageMatting;d.AutoModelForImageSegmentation;d.AutoModelForImageToImage;d.AutoModelForMaskGeneration;d.AutoModelForMaskedLM;d.AutoModelForNormalEstimation;d.AutoModelForObjectDetection;d.AutoModelForPoseEstimation;d.AutoModelForQuestionAnswering;d.AutoModelForSemanticSegmentation;d.AutoModelForSeq2SeqLM;d.AutoModelForSequenceClassification;d.AutoModelForSpeechSeq2Seq;d.AutoModelForTextToSpectrogram;d.AutoModelForTextToWaveform;d.AutoModelForTokenClassification;d.AutoModelForUniversalSegmentation;d.AutoModelForVision2Seq;d.AutoModelForXVector;d.AutoModelForZeroShotObjectDetection;var Tf=d.AutoProcessor;d.AutoTokenizer;d.AutomaticSpeechRecognitionPipeline;d.BartForConditionalGeneration;d.BartForSequenceClassification;d.BartModel;d.BartPretrainedModel;d.BartTokenizer;d.BaseModelOutput;d.BaseStreamer;d.BeitFeatureExtractor;d.BeitForImageClassification;d.BeitModel;d.BeitPreTrainedModel;d.BertForMaskedLM;d.BertForQuestionAnswering;d.BertForSequenceClassification;d.BertForTokenClassification;d.BertModel;d.BertPreTrainedModel;d.BertTokenizer;d.BitImageProcessor;d.BlenderbotForConditionalGeneration;d.BlenderbotModel;d.BlenderbotPreTrainedModel;d.BlenderbotSmallForConditionalGeneration;d.BlenderbotSmallModel;d.BlenderbotSmallPreTrainedModel;d.BlenderbotSmallTokenizer;d.BlenderbotTokenizer;d.BloomForCausalLM;d.BloomModel;d.BloomPreTrainedModel;d.BloomTokenizer;d.CLIPFeatureExtractor;d.CLIPImageProcessor;d.CLIPModel;d.CLIPPreTrainedModel;d.CLIPSegForImageSegmentation;d.CLIPSegModel;d.CLIPSegPreTrainedModel;d.CLIPTextModel;d.CLIPTextModelWithProjection;d.CLIPTokenizer;d.CLIPVisionModel;d.CLIPVisionModelWithProjection;d.CamembertForMaskedLM;d.CamembertForQuestionAnswering;d.CamembertForSequenceClassification;d.CamembertForTokenClassification;d.CamembertModel;d.CamembertPreTrainedModel;d.CamembertTokenizer;d.CausalLMOutput;d.CausalLMOutputWithPast;d.ChineseCLIPFeatureExtractor;d.ChineseCLIPModel;d.ChineseCLIPPreTrainedModel;d.ClapAudioModelWithProjection;d.ClapFeatureExtractor;d.ClapModel;d.ClapPreTrainedModel;d.ClapTextModelWithProjection;d.ClassifierFreeGuidanceLogitsProcessor;d.CodeGenForCausalLM;d.CodeGenModel;d.CodeGenPreTrainedModel;d.CodeGenTokenizer;d.CodeLlamaTokenizer;d.CohereForCausalLM;d.CohereModel;d.CoherePreTrainedModel;d.CohereTokenizer;d.ConvBertForMaskedLM;d.ConvBertForQuestionAnswering;d.ConvBertForSequenceClassification;d.ConvBertForTokenClassification;d.ConvBertModel;d.ConvBertPreTrainedModel;d.ConvBertTokenizer;d.ConvNextFeatureExtractor;d.ConvNextForImageClassification;d.ConvNextImageProcessor;d.ConvNextModel;d.ConvNextPreTrainedModel;d.ConvNextV2ForImageClassification;d.ConvNextV2Model;d.ConvNextV2PreTrainedModel;d.DPTFeatureExtractor;d.DPTForDepthEstimation;d.DPTImageProcessor;d.DPTModel;d.DPTPreTrainedModel;d.DebertaForMaskedLM;d.DebertaForQuestionAnswering;d.DebertaForSequenceClassification;d.DebertaForTokenClassification;d.DebertaModel;d.DebertaPreTrainedModel;d.DebertaTokenizer;d.DebertaV2ForMaskedLM;d.DebertaV2ForQuestionAnswering;d.DebertaV2ForSequenceClassification;d.DebertaV2ForTokenClassification;d.DebertaV2Model;d.DebertaV2PreTrainedModel;d.DebertaV2Tokenizer;d.DecisionTransformerModel;d.DecisionTransformerPreTrainedModel;d.DeiTFeatureExtractor;d.DeiTForImageClassification;d.DeiTImageProcessor;d.DeiTModel;d.DeiTPreTrainedModel;d.DepthAnythingForDepthEstimation;d.DepthAnythingPreTrainedModel;d.DepthEstimationPipeline;d.DepthProForDepthEstimation;d.DepthProPreTrainedModel;d.DetrFeatureExtractor;d.DetrForObjectDetection;d.DetrForSegmentation;d.DetrImageProcessor;d.DetrModel;d.DetrObjectDetectionOutput;d.DetrPreTrainedModel;d.DetrSegmentationOutput;d.Dinov2ForImageClassification;d.Dinov2Model;d.Dinov2PreTrainedModel;d.Dinov2WithRegistersForImageClassification;d.Dinov2WithRegistersModel;d.Dinov2WithRegistersPreTrainedModel;d.DistilBertForMaskedLM;d.DistilBertForQuestionAnswering;d.DistilBertForSequenceClassification;d.DistilBertForTokenClassification;d.DistilBertModel;d.DistilBertPreTrainedModel;d.DistilBertTokenizer;d.DocumentQuestionAnsweringPipeline;d.DonutFeatureExtractor;d.DonutImageProcessor;d.DonutSwinModel;d.DonutSwinPreTrainedModel;d.EfficientNetForImageClassification;d.EfficientNetImageProcessor;d.EfficientNetModel;d.EfficientNetPreTrainedModel;d.ElectraForMaskedLM;d.ElectraForQuestionAnswering;d.ElectraForSequenceClassification;d.ElectraForTokenClassification;d.ElectraModel;d.ElectraPreTrainedModel;d.ElectraTokenizer;d.EosTokenCriteria;d.EsmForMaskedLM;d.EsmForSequenceClassification;d.EsmForTokenClassification;d.EsmModel;d.EsmPreTrainedModel;d.EsmTokenizer;d.ExaoneForCausalLM;d.ExaoneModel;d.ExaonePreTrainedModel;d.FFT;d.FalconForCausalLM;d.FalconModel;d.FalconPreTrainedModel;d.FalconTokenizer;d.FastViTForImageClassification;d.FastViTModel;d.FastViTPreTrainedModel;d.FeatureExtractionPipeline;d.FeatureExtractor;d.FillMaskPipeline;d.Florence2ForConditionalGeneration;d.Florence2PreTrainedModel;d.Florence2Processor;d.ForcedBOSTokenLogitsProcessor;d.ForcedEOSTokenLogitsProcessor;d.GLPNFeatureExtractor;d.GLPNForDepthEstimation;d.GLPNModel;d.GLPNPreTrainedModel;d.GPT2LMHeadModel;d.GPT2Model;d.GPT2PreTrainedModel;d.GPT2Tokenizer;d.GPTBigCodeForCausalLM;d.GPTBigCodeModel;d.GPTBigCodePreTrainedModel;d.GPTJForCausalLM;d.GPTJModel;d.GPTJPreTrainedModel;d.GPTNeoForCausalLM;d.GPTNeoModel;d.GPTNeoPreTrainedModel;d.GPTNeoXForCausalLM;d.GPTNeoXModel;d.GPTNeoXPreTrainedModel;d.GPTNeoXTokenizer;d.Gemma2ForCausalLM;d.Gemma2Model;d.Gemma2PreTrainedModel;d.GemmaForCausalLM;d.GemmaModel;d.GemmaPreTrainedModel;d.GemmaTokenizer;d.GraniteForCausalLM;d.GraniteModel;d.GranitePreTrainedModel;d.Grok1Tokenizer;d.GroupViTModel;d.GroupViTPreTrainedModel;d.HerbertTokenizer;d.HieraForImageClassification;d.HieraModel;d.HieraPreTrainedModel;d.HubertForCTC;d.HubertForSequenceClassification;d.HubertModel;d.HubertPreTrainedModel;d.IJepaForImageClassification;d.IJepaModel;d.IJepaPreTrainedModel;d.Idefics3ForConditionalGeneration;d.Idefics3ImageProcessor;d.Idefics3PreTrainedModel;d.Idefics3Processor;d.ImageClassificationPipeline;d.ImageFeatureExtractionPipeline;d.ImageFeatureExtractor;d.ImageMattingOutput;d.ImageProcessor;d.ImageSegmentationPipeline;d.ImageToImagePipeline;d.ImageToTextPipeline;d.InterruptableStoppingCriteria;d.JAISLMHeadModel;d.JAISModel;d.JAISPreTrainedModel;d.JinaCLIPImageProcessor;d.JinaCLIPModel;d.JinaCLIPPreTrainedModel;d.JinaCLIPProcessor;d.JinaCLIPTextModel;d.JinaCLIPVisionModel;d.LlamaForCausalLM;d.LlamaModel;d.LlamaPreTrainedModel;d.LlamaTokenizer;d.LlavaForConditionalGeneration;d.LlavaOnevisionForConditionalGeneration;d.LlavaOnevisionImageProcessor;d.LlavaPreTrainedModel;d.LogitsProcessor;d.LogitsProcessorList;d.LogitsWarper;d.LongT5ForConditionalGeneration;d.LongT5Model;d.LongT5PreTrainedModel;d.M2M100ForConditionalGeneration;d.M2M100Model;d.M2M100PreTrainedModel;d.M2M100Tokenizer;d.MBart50Tokenizer;d.MBartForCausalLM;d.MBartForConditionalGeneration;d.MBartForSequenceClassification;d.MBartModel;d.MBartPreTrainedModel;d.MBartTokenizer;d.MPNetForMaskedLM;d.MPNetForQuestionAnswering;d.MPNetForSequenceClassification;d.MPNetForTokenClassification;d.MPNetModel;d.MPNetPreTrainedModel;d.MPNetTokenizer;d.MT5ForConditionalGeneration;d.MT5Model;d.MT5PreTrainedModel;d.MarianMTModel;d.MarianModel;d.MarianPreTrainedModel;d.MarianTokenizer;d.Mask2FormerImageProcessor;d.MaskFormerFeatureExtractor;d.MaskFormerForInstanceSegmentation;d.MaskFormerImageProcessor;d.MaskFormerModel;d.MaskFormerPreTrainedModel;d.MaskedLMOutput;d.MaxLengthCriteria;d.MgpstrForSceneTextRecognition;d.MgpstrModelOutput;d.MgpstrPreTrainedModel;d.MgpstrProcessor;d.MgpstrTokenizer;d.MinLengthLogitsProcessor;d.MinNewTokensLengthLogitsProcessor;d.MistralForCausalLM;d.MistralModel;d.MistralPreTrainedModel;d.MobileBertForMaskedLM;d.MobileBertForQuestionAnswering;d.MobileBertForSequenceClassification;d.MobileBertModel;d.MobileBertPreTrainedModel;d.MobileBertTokenizer;d.MobileLLMForCausalLM;d.MobileLLMModel;d.MobileLLMPreTrainedModel;d.MobileNetV1FeatureExtractor;d.MobileNetV1ForImageClassification;d.MobileNetV1ImageProcessor;d.MobileNetV1Model;d.MobileNetV1PreTrainedModel;d.MobileNetV2FeatureExtractor;d.MobileNetV2ForImageClassification;d.MobileNetV2ImageProcessor;d.MobileNetV2Model;d.MobileNetV2PreTrainedModel;d.MobileNetV3FeatureExtractor;d.MobileNetV3ForImageClassification;d.MobileNetV3ImageProcessor;d.MobileNetV3Model;d.MobileNetV3PreTrainedModel;d.MobileNetV4FeatureExtractor;d.MobileNetV4ForImageClassification;d.MobileNetV4ImageProcessor;d.MobileNetV4Model;d.MobileNetV4PreTrainedModel;d.MobileViTFeatureExtractor;d.MobileViTForImageClassification;d.MobileViTImageProcessor;d.MobileViTModel;d.MobileViTPreTrainedModel;d.MobileViTV2ForImageClassification;d.MobileViTV2Model;d.MobileViTV2PreTrainedModel;d.ModelOutput;d.ModernBertForMaskedLM;d.ModernBertForSequenceClassification;d.ModernBertForTokenClassification;d.ModernBertModel;d.ModernBertPreTrainedModel;d.Moondream1ForConditionalGeneration;d.MoonshineFeatureExtractor;d.MoonshineForConditionalGeneration;d.MoonshineModel;d.MoonshinePreTrainedModel;d.MoonshineProcessor;d.MptForCausalLM;d.MptModel;d.MptPreTrainedModel;d.MultiModalityCausalLM;d.MultiModalityPreTrainedModel;d.MusicgenForCausalLM;d.MusicgenForConditionalGeneration;d.MusicgenModel;d.MusicgenPreTrainedModel;d.NllbTokenizer;d.NoBadWordsLogitsProcessor;d.NoRepeatNGramLogitsProcessor;d.NomicBertModel;d.NomicBertPreTrainedModel;d.NougatImageProcessor;d.NougatTokenizer;d.OPTForCausalLM;d.OPTModel;d.OPTPreTrainedModel;d.ObjectDetectionPipeline;d.Olmo2ForCausalLM;d.Olmo2Model;d.Olmo2PreTrainedModel;d.OlmoForCausalLM;d.OlmoModel;d.OlmoPreTrainedModel;d.OpenELMForCausalLM;d.OpenELMModel;d.OpenELMPreTrainedModel;d.OwlViTFeatureExtractor;d.OwlViTForObjectDetection;d.OwlViTImageProcessor;d.OwlViTModel;d.OwlViTPreTrainedModel;d.OwlViTProcessor;d.Owlv2ForObjectDetection;d.Owlv2ImageProcessor;d.Owlv2Model;d.Owlv2PreTrainedModel;d.PaliGemmaForConditionalGeneration;d.PaliGemmaPreTrainedModel;d.PaliGemmaProcessor;d.PatchTSMixerForPrediction;d.PatchTSMixerModel;d.PatchTSMixerPreTrainedModel;d.PatchTSTForPrediction;d.PatchTSTModel;d.PatchTSTPreTrainedModel;d.Phi3ForCausalLM;d.Phi3Model;d.Phi3PreTrainedModel;d.Phi3VForCausalLM;d.Phi3VImageProcessor;d.Phi3VPreTrainedModel;d.Phi3VProcessor;d.PhiForCausalLM;d.PhiModel;d.PhiPreTrainedModel;d.Pipeline;d.PreTrainedModel;d.PreTrainedTokenizer;d.PretrainedConfig;d.PretrainedMixin;d.Processor;d.PvtForImageClassification;d.PvtImageProcessor;d.PvtModel;d.PvtPreTrainedModel;d.PyAnnoteFeatureExtractor;d.PyAnnoteForAudioFrameClassification;d.PyAnnoteModel;d.PyAnnotePreTrainedModel;d.PyAnnoteProcessor;d.QuestionAnsweringModelOutput;d.QuestionAnsweringPipeline;d.Qwen2ForCausalLM;d.Qwen2Model;d.Qwen2PreTrainedModel;d.Qwen2Tokenizer;d.Qwen2VLForConditionalGeneration;d.Qwen2VLImageProcessor;d.Qwen2VLPreTrainedModel;d.Qwen2VLProcessor;d.RTDetrForObjectDetection;d.RTDetrImageProcessor;d.RTDetrModel;d.RTDetrObjectDetectionOutput;d.RTDetrPreTrainedModel;var Km=d.RawImage;d.RepetitionPenaltyLogitsProcessor;d.ResNetForImageClassification;d.ResNetModel;d.ResNetPreTrainedModel;d.RoFormerForMaskedLM;d.RoFormerForQuestionAnswering;d.RoFormerForSequenceClassification;d.RoFormerForTokenClassification;d.RoFormerModel;d.RoFormerPreTrainedModel;d.RoFormerTokenizer;d.RobertaForMaskedLM;d.RobertaForQuestionAnswering;d.RobertaForSequenceClassification;d.RobertaForTokenClassification;d.RobertaModel;d.RobertaPreTrainedModel;d.RobertaTokenizer;d.SamImageProcessor;d.SamImageSegmentationOutput;d.SamModel;d.SamPreTrainedModel;d.SamProcessor;d.SapiensForDepthEstimation;d.SapiensForNormalEstimation;d.SapiensForSemanticSegmentation;d.SapiensPreTrainedModel;d.SeamlessM4TFeatureExtractor;d.SegformerFeatureExtractor;d.SegformerForImageClassification;d.SegformerForSemanticSegmentation;d.SegformerImageProcessor;d.SegformerModel;d.SegformerPreTrainedModel;d.Seq2SeqLMOutput;d.SequenceClassifierOutput;d.SiglipImageProcessor;d.SiglipModel;d.SiglipPreTrainedModel;d.SiglipTextModel;d.SiglipTokenizer;d.SiglipVisionModel;d.SpeechT5FeatureExtractor;d.SpeechT5ForSpeechToText;d.SpeechT5ForTextToSpeech;d.SpeechT5HifiGan;d.SpeechT5Model;d.SpeechT5PreTrainedModel;d.SpeechT5Processor;d.SpeechT5Tokenizer;d.SqueezeBertForMaskedLM;d.SqueezeBertForQuestionAnswering;d.SqueezeBertForSequenceClassification;d.SqueezeBertModel;d.SqueezeBertPreTrainedModel;d.SqueezeBertTokenizer;d.StableLmForCausalLM;d.StableLmModel;d.StableLmPreTrainedModel;d.Starcoder2ForCausalLM;d.Starcoder2Model;d.Starcoder2PreTrainedModel;d.StoppingCriteria;d.StoppingCriteriaList;d.SummarizationPipeline;d.SuppressTokensAtBeginLogitsProcessor;d.Swin2SRForImageSuperResolution;d.Swin2SRImageProcessor;d.Swin2SRModel;d.Swin2SRPreTrainedModel;d.SwinForImageClassification;d.SwinModel;d.SwinPreTrainedModel;d.T5ForConditionalGeneration;d.T5Model;d.T5PreTrainedModel;d.T5Tokenizer;d.TableTransformerForObjectDetection;d.TableTransformerModel;d.TableTransformerObjectDetectionOutput;d.TableTransformerPreTrainedModel;d.TemperatureLogitsWarper;d.Tensor;d.Text2TextGenerationPipeline;d.TextClassificationPipeline;d.TextGenerationPipeline;d.TextStreamer;d.TextToAudioPipeline;d.TokenClassificationPipeline;d.TokenClassifierOutput;d.TokenizerModel;d.TopKLogitsWarper;d.TopPLogitsWarper;d.TrOCRForCausalLM;d.TrOCRPreTrainedModel;d.TranslationPipeline;d.UniSpeechForCTC;d.UniSpeechForSequenceClassification;d.UniSpeechModel;d.UniSpeechPreTrainedModel;d.UniSpeechSatForAudioFrameClassification;d.UniSpeechSatForCTC;d.UniSpeechSatForSequenceClassification;d.UniSpeechSatModel;d.UniSpeechSatPreTrainedModel;d.VLChatProcessor;d.VLMImageProcessor;d.ViTFeatureExtractor;d.ViTForImageClassification;d.ViTImageProcessor;d.ViTMAEModel;d.ViTMAEPreTrainedModel;d.ViTMSNForImageClassification;d.ViTMSNModel;d.ViTMSNPreTrainedModel;d.ViTModel;d.ViTPreTrainedModel;d.VisionEncoderDecoderModel;d.VitMatteForImageMatting;d.VitMatteImageProcessor;d.VitMattePreTrainedModel;d.VitPoseForPoseEstimation;d.VitPoseImageProcessor;d.VitPosePreTrainedModel;d.VitsModel;d.VitsModelOutput;d.VitsPreTrainedModel;d.VitsTokenizer;d.Wav2Vec2BertForCTC;d.Wav2Vec2BertForSequenceClassification;d.Wav2Vec2BertModel;d.Wav2Vec2BertPreTrainedModel;d.Wav2Vec2CTCTokenizer;d.Wav2Vec2FeatureExtractor;d.Wav2Vec2ForAudioFrameClassification;d.Wav2Vec2ForCTC;d.Wav2Vec2ForSequenceClassification;d.Wav2Vec2Model;d.Wav2Vec2PreTrainedModel;d.Wav2Vec2ProcessorWithLM;d.WavLMForAudioFrameClassification;d.WavLMForCTC;d.WavLMForSequenceClassification;d.WavLMForXVector;d.WavLMModel;d.WavLMPreTrainedModel;d.WeSpeakerFeatureExtractor;d.WeSpeakerResNetModel;d.WeSpeakerResNetPreTrainedModel;d.WhisperFeatureExtractor;d.WhisperForConditionalGeneration;d.WhisperModel;d.WhisperPreTrainedModel;d.WhisperProcessor;d.WhisperTextStreamer;d.WhisperTimeStampLogitsProcessor;d.WhisperTokenizer;d.XLMForQuestionAnswering;d.XLMForSequenceClassification;d.XLMForTokenClassification;d.XLMModel;d.XLMPreTrainedModel;d.XLMRobertaForMaskedLM;d.XLMRobertaForQuestionAnswering;d.XLMRobertaForSequenceClassification;d.XLMRobertaForTokenClassification;d.XLMRobertaModel;d.XLMRobertaPreTrainedModel;d.XLMRobertaTokenizer;d.XLMTokenizer;d.XLMWithLMHeadModel;d.XVectorOutput;d.YolosFeatureExtractor;d.YolosForObjectDetection;d.YolosImageProcessor;d.YolosModel;d.YolosObjectDetectionOutput;d.YolosPreTrainedModel;d.ZeroShotAudioClassificationPipeline;d.ZeroShotClassificationPipeline;d.ZeroShotImageClassificationPipeline;d.ZeroShotObjectDetectionPipeline;d.bankers_round;d.cat;d.cos_sim;d.dot;d.dynamic_time_warping;d.env;d.full;d.full_like;d.getKeyValueShapes;d.hamming;d.hanning;d.interpolate;var xf=d.interpolate_4d;d.interpolate_data;d.is_chinese_char;d.layer_norm;d.load_image;d.log_softmax;d.magnitude;d.matmul;d.max;d.mean;d.mean_pooling;d.medianFilter;d.mel_filter_bank;d.min;d.ones;d.ones_like;d.permute;d.permute_data;d.pipeline;d.quantize_embeddings;d.rand;d.read_audio;d.rfft;d.round;d.slice;var Pf=d.softmax;d.spectrogram;d.stack;d.std_mean;d.topk;d.window_function;d.zeros;d.zeros_like;async function Ef(){try{return navigator.gpu?!!await navigator.gpu.requestAdapter():!1}catch{return!1}}const Hm=await Ef(),Ym="onnx-community/dinov2-with-registers-small-with-attentions",tc=await vf.from_pretrained(Ym,{device:Hm?"webgpu":"wasm",dtype:Hm?"q4":"q8"}).catch(Ae=>{throw console.error(Ae),self.postMessage({type:"error",error:Ae.toString()}),Ae}),Cf=await Tf.from_pretrained(Ym).catch(Ae=>{throw console.error(Ae),self.postMessage({type:"error",error:Ae.toString()}),Ae});self.postMessage({type:"status",status:"ready"});const ha=800;self.onmessage=async Ae=>{const{image:F}=Ae.data;self.postMessage({type:"status",status:"read_image"});let r=await Km.read(F);if(r.width>ha||r.height>ha){const I=r.width/r.height;let $,g;r.width>r.height?($=ha,g=Math.round(ha/I)):(g=ha,$=Math.round(ha*I)),r=await r.resize($,g)}const w=await Cf(r);self.postMessage({type:"status",status:"run_model"});const{logits:D,attentions:W}=await tc(w);self.postMessage({type:"status",status:"postprocess"});const te=D[0],j=Pf(te.data),y=te.argmax().item(),P=j[y]*100,v=tc.config.id2label[y];console.log(`Predicted class: ${v}`);const T=tc.config.patch_size,[b,z]=w.pixel_values.dims.slice(-2),K=Math.floor(b/T),re=Math.floor(z/T),ae=tc.config.num_attention_heads,B=1,G=tc.config.num_register_tokens??0,X=[];for(let I=0;I<W.length;++I){const g=W[I].slice(0,null,0,[B+G,null]).view(ae,1,K,re),C=await xf(g,{size:[b,z],mode:"nearest"});for(let x=0;x<ae;++x){const J=C[x],Q=J.min().item(),le=J.max().item(),ue=Km.fromTensor(J.sub_(Q).div_(le-Q).mul_(255).to("uint8")).rgba(),fe=await createImageBitmap(new ImageData(ue.data,ue.width,ue.height),{imageOrientation:"flipY"});X.push({layer:I,head:x,num_heads:ae,image:fe})}}self.postMessage({type:"output",result:{attentions:X,label:v,score:P}})};
Hyper Icon
